<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.2.1">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2019-03-11T14:51:39-07:00</updated><id>/</id><title type="html">Art is Never Finished</title><subtitle>...Only Abandoned. – Leonardo da Vinci</subtitle><entry><title type="html">Automatic CSV to SQL ETL in Clojure</title><link href="/blog/csv-etl-in-clojure/" rel="alternate" type="text/html" title="Automatic CSV to SQL ETL in Clojure" /><published>2019-03-03T00:00:00-08:00</published><updated>2019-03-03T00:00:00-08:00</updated><id>/blog/csv-etl-in-clojure</id><content type="html" xml:base="/blog/csv-etl-in-clojure/">&lt;p&gt;This is another basic example to help beginners get started in &lt;a href=&quot;https://clojure.org&quot;&gt;Clojure&lt;/a&gt;, which is still my favorite programming language, almost 10 years after I first started using it. Like all languages, Clojure has some warts. But it also has a lot of very powerful and abstract concepts that many average programmers have not seen before, and like most mathematical concepts, the power of such abstractions are greatly underestimated by many people. Even fancy-sounding but easy-to-understand concepts like &lt;a href=&quot;https://en.wikipedia.org/wiki/Homoiconicity&quot;&gt;homoiconicity&lt;/a&gt; are still really underappreciated in the programming community.&lt;/p&gt;

&lt;p&gt;Compared with other mathematically-oriented languages like Haskell, Clojure is also arguably a more practical choice for practical tasks – it’s designed for massive concurrency, and has more libraries than any other language. This is a bold but probably a true statement because, in addition to its own libraries, Clojure can use java libraries on the back-end and javascript libraries on the front-end, which are two of the most popular languages in existence.&lt;/p&gt;

&lt;h2 id=&quot;tl-dr&quot;&gt;TL; DR&lt;/h2&gt;

&lt;p&gt;In this article, I’ll present a simple example of setting up a SQL database from a bunch of CSV files. This is called an ETL job (Extract, Transfer, Load), which is a really common pattern in software.&lt;/p&gt;

&lt;p&gt;Since most ETL jobs like this are quite simple, let’s make a trivial example slightly more realistic by trying to automatically infer the database schema automatically. Let’s also try to make it fast enough to be usable for files with a few million rows in it.&lt;/p&gt;

&lt;p&gt;An overview of the approach that we will follow is:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Group CSVs by directory&lt;/strong&gt;, such that each directory corresponds to a SQL table that we would like to create.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Scan the the directory tree&lt;/strong&gt; to create a list of CSV files we want to scan.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Autodetect the data type of each column&lt;/strong&gt; across all files in each directory, and store the schema just outside the directory, so that it can be modified as needed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Create the table from the autodetected schema&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Load the CSV files into SQL tables&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In past articles, we discussed how to &lt;a href=&quot;../loading-csvs-in-clojure&quot;&gt;read in CSVs&lt;/a&gt; and &lt;a href=&quot;../docker-postgres&quot;&gt;create a postgres database with docker&lt;/a&gt;. I’ll just assume that you read those already, that you have a Postgres instance running in docker already, so that we can get on with the ETL-specific code.&lt;/p&gt;

&lt;h2 id=&quot;group-csvs-in-directories&quot;&gt;1. Group CSVs in Directories&lt;/h2&gt;

&lt;p&gt;Let’s go get some census data from 2010 and download some data. The &lt;a href=&quot;http://census.ire.org/data/bulkdata.html&quot;&gt;census.ire.org&lt;/a&gt; website has a handy tool that let’s you download census data on each state. Since this is an example, we will only use five states’ worth of data.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://censusdata.ire.org/01/all_060_in_01.P1.csv&quot;&gt;Alabama&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://censusdata.ire.org/02/all_060_in_02.P1.csv&quot;&gt;Alaska&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://censusdata.ire.org/04/all_060_in_04.P1.csv&quot;&gt;Arizona&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://censusdata.ire.org/05/all_060_in_05.P1.csv&quot;&gt;Arkansas&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://censusdata.ire.org/06/all_060_in_06.P1.csv&quot;&gt;California&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Just making one table from a few small CSVs isn’t going to fully demonstrate this example, so let’s also fetch a much bigger dataset…the past 15 years of crime reports from Los Angeles, courtesy of &lt;a href=&quot;https://data.gov&quot;&gt;data.gov&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://data.lacity.org/api/views/y8tr-7khq/rows.csv?accessType=DOWNLOAD&quot;&gt;“Crime Data from 2010 to Present”&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note that this file is MUCH larger than the census data; it is 6.8 million lines long, and has about 20 columns, and is 1.5G in size. It will be a better benchmark of performance than those short census files.&lt;/p&gt;

&lt;p&gt;Now place all the files in a directory tree like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sqlcsv/
├── census
│   ├── all_060_in_01.P1.csv
│   ├── all_060_in_02.P1.csv
│   ├── all_060_in_04.P1.csv
│   ├── all_060_in_05.P1.csv
│   └── all_060_in_06.P1.csv
└── crimes
    └── Crimes_-_2001_to_present.csv
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;scan-directories&quot;&gt;2. Scan directories&lt;/h2&gt;

&lt;p&gt;This is pretty easy using &lt;code class=&quot;highlighter-rouge&quot;&gt;file-seq&lt;/code&gt;. All we have to do is create a few functions for listing files and subdirectories.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(ns net.roboloco.files
  (:require [java-time :as jt]
            [clojure.java.io :as jio]))

(defn list-files
  &quot;Lists only the files in the directory string DIR.&quot;
  [dir]
  (-&amp;gt;&amp;gt; (file-seq (clojure.java.io/file dir))
       (remove #(.isDirectory ^java.io.File %))))

(defn list-subdirectories
  &quot;Lists only the subdirectorys of the directory string DIR&quot;
  [dir]
  (-&amp;gt;&amp;gt; (file-seq (clojure.java.io/file dir))
       (filter #(.isDirectory %))
       (remove #(= % (clojure.java.io/file dir)))))

(defn has-suffix?
  &quot;Works on file object types.&quot;
  [ ^String suffix ^java.io.File file]
  (and (.isFile file)
       (re-find (re-pattern (str &quot;.*\\.&quot; suffix &quot;$&quot;)) (.getName file))))

(defn list-files-of-type 
  &quot;Lists all files in the directory with the extension ext.&quot;
  [dir ext]
  (-&amp;gt;&amp;gt; (file-seq (clojure.java.io/file dir))
       (filter (partial has-suffix? ext))))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Some string-cleaning utility functions will also come in handy:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(ns net.roboloco.util)

(set! *warn-on-reflection* true)

(defn alphanumeric?
  &quot;TRUE when the string is completely alphanumeric.&quot;
  [string]
  (= string (apply str (re-seq #&quot;[a-z_A-Z0-9]&quot; string))))

(defn spaces-to-underscores
  &quot;Converts spaces to underscores.&quot;
  [string]
  (clojure.string/replace string #&quot;\s&quot; &quot;_&quot;))

(defn periods-to-underscores
  &quot;Converts spaces to underscores.&quot;
  [string]
  (clojure.string/replace string #&quot;\.&quot; &quot;_&quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We’ll also need some simple date-parsing functions:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(ns net.roboloco.dates
  &quot;Code for handling strings reperesnting dates and datetimes.&quot;
  (:require [java-time :as jt]))

(set! *warn-on-reflection* true)

(defn parse-date
  &quot;Parses a standard date, like 2019-02-17.&quot;
  [s]
  (jt/local-date &quot;yyyy-MM-dd&quot; s))

(defn parse-datetime
  &quot;Returns the datetime format that Python's pandas usually saves in.&quot;
  [s]
  (jt/local-date-time &quot;yyyy-MM-dd HH:mm:ss&quot; s))

(defn local-to-offset
  &quot;Converts a local date time to an offset date time. By default, it assumes
  that the local time is UTC, but you may change this with optional arg TZ.&quot;
  [local-date-time &amp;amp; [tz]]
  (let [tz (or tz &quot;UTC&quot;)]
    (-&amp;gt; local-date-time
        (jt/zoned-date-time tz)
        (jt/offset-date-time))))

(defn parse-RFC3339
  &quot;Assuming a UTC datestamp with T and Z separator, for example:
  2019-01-17T22:03:16Z
  2019-01-17T22:03:16.383Z
  2019-01-17T22:03:16.111222333Z&quot;
  [s]
  (local-to-offset
   (condp = (count s)
     20 (jt/local-date-time &quot;yyyy-MM-dd'T'HH:mm:ss'Z'&quot; s)
     24 (jt/local-date-time &quot;yyyy-MM-dd'T'HH:mm:ss.SSS'Z'&quot; s)
     27 (jt/local-date-time &quot;yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'&quot; s)
     30 (jt/local-date-time &quot;yyyy-MM-dd'T'HH:mm:ss.SSSSSSSSS'Z'&quot; s))))

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;autodetect-the-schema&quot;&gt;3. Autodetect the Schema&lt;/h2&gt;

&lt;p&gt;This is by far the most complex section of the program. For each element, the autodetector tests each of the parsing functions in &lt;code class=&quot;highlighter-rouge&quot;&gt;sql-types-and-parsers&lt;/code&gt;, and the first that works will be is considered the inferred SQL type. As I experimented with this at the REPL, I realized that testing every sql parser on every element was prohibitively slow, so I defined &lt;code class=&quot;highlighter-rouge&quot;&gt;guess-all-sql-types-in-column&lt;/code&gt; to reduce the rate of failed tests by remembering which parser last worked for each column.&lt;/p&gt;

&lt;p&gt;Another note on optimization: although I initially assumed that I could make the CSV loading faster by scanning only the first N lines of each file, this ended up being error-prone in general, so I relented and allowed it to scan the whole file.&lt;/p&gt;

&lt;p&gt;Note that this code only works for integers, floats, dates, datetimes, and strings (text), but that you could easily extend it by adding more things to &lt;code class=&quot;highlighter-rouge&quot;&gt;type-definitions&lt;/code&gt;.  An exception thrown if types do not match in different files.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(ns net.roboloco.guess-schema
  (:require [clojure.data.csv]
            [net.roboloco.dates :as dates]
            [net.roboloco.files :as files]
            [net.roboloco.util :as util]))

(set! *warn-on-reflection* true)

(def ^:dynamic *sql-types-and-parsers*
  ;; This data structure defines all of the SQL data types, and the appropriate
  ;; function to use when parsing a string containing that data type.
  ;; Parsers will be tried in sequential order, and the first one that works is used.
  ;; 
  ;; SQL               String-&amp;gt;CLJ Parser
  [[&quot;NULL&quot;             #(or (nil? %) (empty? %))]
   [&quot;INTEGER&quot;          #(Integer/parseInt %)]
   [&quot;DOUBLE PRECISION&quot; #(Float/parseFloat %)]
   [&quot;DATE&quot;             dates/parse-date]
   [&quot;TIMESTAMPTZ&quot;      dates/parse-RFC3339]
   [&quot;TEXT&quot;             #(str %)]]) ;; this is always true, so is the &quot;default&quot; value

(defn guess-sql-parser
  &quot;Given an unknown string, this fn runs through all of the SQL types &amp;amp; parsers in 
  sql-types-and-parsers and returns the first row with a working parser.&quot;
  [string]
  (loop [types-and-parsers *sql-types-and-parsers*]
    (when-let [[sql-type parse-fn :as typerow] (first types-and-parsers)]
      (if (try (parse-fn string)
               (catch Exception e false))
        typerow
        (recur (next types-and-parsers))))))

(defn guess-all-sql-types-in-column
  &quot;Like guess-sql-type, but an optimized version for looking at a whole column.
  In practice, this really reduces the number of tests and exceptions trapped
  over the simpler but much slower solution: 
         (set (flatten (map guess-sql-parser seq-of-strings)))&quot;
  [seq-of-strings]
  (loop [strings seq-of-strings
         last-successful-parse-fn nil
         types-found #{}]
    (if-let [string (first strings)]
      (if (try (last-successful-parse-fn string)
               (catch Exception e false))
        (recur (next strings)  ; Previously successful parser worked again
               last-successful-parse-fn
               types-found)
        (if-let [[sql-type parse-fn] (guess-sql-parser string)]
          (recur (next strings)  ; A new working parser was found
                 parse-fn
                 (conj types-found sql-type))
          (recur (next strings)  ; No working parser found, move to next string
                 last-successful-parse-fn
                 (conj types-found nil))))
      types-found)))

(defn clean-column-names
  &quot;Replaces whitespaces and periods in column names with underscores.&quot;
  [columns]
  (-&amp;gt;&amp;gt; columns
       (map util/periods-to-underscores)
       (mapv util/spaces-to-underscores)))

(defn guess-csv-column-types
  &quot;Returns a map of column name to the guessed SQL column type. Reads every
  row in the CSV, and returns all types found for each column. Works in 
  parallel and lazily on chunks of 1000 lines, to reduce the time to parse
  very large files.&quot;
  [csv-filepath]
  (println &quot;Scanning:&quot; csv-filepath)
  (with-open [reader (clojure.java.io/reader csv-filepath)]
     (let [rows (clojure.data.csv/read-csv reader)
           header (clean-column-names (first rows))
           data-rows (rest rows)
           chunk-size 10000]
       (-&amp;gt;&amp;gt; data-rows          
            (partition-all chunk-size)
            (map #(apply map vector %)) ;; Convert list of rows into list of columns
            (map #(pmap guess-all-sql-types-in-column %))
            (map (fn [i data] (println (* 10000 (inc i)) &quot;rows scanned&quot;) data) (range))
            (apply map (fn [&amp;amp; args] (reduce clojure.set/union args)))
            (map vector header)
            (into {})))))

(defn scan-csvdir-and-make-schema
  &quot;Scans the header of every .csv file in CSVDIR, and returns a hashmap
  containing the schema of all the columns in the directory.
  If a non-alphanumeric string is found, raises an exception. 
  If the schema is inconsistent, raises an exception.&quot;
  [csvdir]
  (let [csv-schemas (-&amp;gt;&amp;gt; (files/list-files-of-type csvdir &quot;csv&quot;)
                         (map guess-csv-column-types))
        columns (set (flatten (map keys csv-schemas)))
        problematic-columns (remove util/alphanumeric? columns)]
    (when-not (empty? problematic-columns)
      (throw (Exception. (str &quot;Non-alphanumeric characters found in column names:&quot;
                              (apply str (interpose &quot;, &quot;  problematic-columns))))))
    (into {} (for [col columns]
               (let [all-types-for-col (-&amp;gt;&amp;gt; (map #(vec (get % col)) csv-schemas)
                                            (flatten)
                                            (remove nil?)
                                            (set))
                     nullable-suffix (if (get all-types-for-col &quot;NULL&quot;) 
                                       &quot; NULL&quot;
                                       &quot;&quot;)
                     types (disj all-types-for-col &quot;NULL&quot;)]
                 (cond
                  (= 0 (count types))        [col nil]
                  (= 1 (count types))        [col (str (first types) nullable-suffix)]
                  ;; If it's mixed integer and float, make everything float
                  (= #{&quot;INTEGER&quot; &quot;DOUBLE PRECISION&quot;} types) 
                                             [col (str &quot;DOUBLE PRECISION&quot; nullable-suffix)]
                  ;; If the default type of TEXT is in there, choose text
                  (get types &quot;TEXT&quot;) [col (str &quot;TEXT&quot; nullable-suffix)]
                  :otherwise  ;; Otherwise we have some weird error
                  (throw (Exception. (str &quot;Inconsistent types across files for column: &quot; 
                                           col (vec types))))))))))

(defn parse-csv-rows-using-schema
  &quot;Lazily parse CSV-ROWS using the schema.&quot;
  [schema csv-rows]
  (let [header (clean-column-names (first csv-rows))
        types  (map #(get schema %) header)
        empty-string-to-nil (fn [s] (if (and (string? s) (empty? s)) nil s))
        raw-rows (map #(map empty-string-to-nil %) (rest csv-rows))
        all-parsers (into {} *sql-types-and-parsers*)
        row-parsers (mapv #(get all-parsers %) types)
        typed-rows (for [raw-row raw-rows]
                     (map (fn [parse-fn element]
                            (when (and parse-fn (not (empty? element)))
                              (try (parse-fn element)
                                   (catch Exception e
                                     (println &quot;Schema:&quot; schema)
                                     (println &quot;Header:&quot; header)
                                     (println &quot;Raw row:&quot; raw-row)
                                     (throw e)))))
                          row-parsers
                          raw-row))
        cnt (atom 0)
        chunk-size 1000]
    [header typed-rows]))

(defn table-definition-sql-string
  &quot;Returns a string suitable for creating a SQL table named TABLE-NAME, given
  a hashmap SCHEMA of column names to column types. The ENDING-STRING is appended
  to the end of the create table statement, if needed. &quot;
  [table-name schema &amp;amp; [ending-string]]
  (let [ending-string (or ending-string &quot;&quot;)
        col-defs (-&amp;gt;&amp;gt; schema
                      (sort-by first)
                      (remove (comp nil? second))
                      (map (fn [[col type]] (format &quot;\t%s %s&quot; col type)))
                      (interpose &quot;,\n&quot;)
                      (apply str))]
    (format &quot;CREATE TABLE %s (\n%s %s\n);&quot;
            table-name col-defs ending-string)))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We are now ready to actually do the autodetection! Let’s create our main namespace:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(ns net.roboloco.csv2sql
  (:gen-class)
  (:require [clojure.data.csv]
            [clojure.java.jdbc :as sql]
            [net.roboloco.guess-schema :as guess]
            [net.roboloco.files :as files]))

(set! *warn-on-reflection* true)

(defn table-schema-filename [dirname] (format &quot;%s-schema.edn&quot; dirname))
(defn table-sql-filename [dirname] (format &quot;%s.sql&quot; dirname))

(defn autodetect-sql-schemas!
  &quot;Scans through the subdirectories of CSVDIR, infers the column data types,
  and stores the inferred schema in CSVDIR so that you may manually edit it
  before loading it in with MAKE-SQL-TABLES.&quot;
  [csvdir]
  (doseq [dir (files/list-subdirectories csvdir)]
    (printf &quot;Autodetecting schema for: %s\n&quot; dir)
    (let [tablename (.getName ^java.io.File dir)
          schema (guess/scan-csvdir-and-make-schema dir)]
      (when-not (empty? schema)
        (let [table-sql (guess/table-definition-sql-string tablename schema)]
          (println (str csvdir (table-schema-filename tablename)) schema)          
          (spit (str csvdir (table-schema-filename tablename)) schema)
          (spit (str csvdir (table-sql-filename tablename)) table-sql))))))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You may note that I’m storing the SQL schemas for each subdirectory in the root &lt;code class=&quot;highlighter-rouge&quot;&gt;sqlcsv/&lt;/code&gt; directory. This will let you hand-tune the schema as needed, if you want to make an index on one key or another, or make a particular column unique and required.&lt;/p&gt;

&lt;h2 id=&quot;create-the-autodetected-schema&quot;&gt;4. Create the Autodetected Schema&lt;/h2&gt;

&lt;p&gt;With the schema autodetected, we now need to create the tables. Continuing along with the &lt;code class=&quot;highlighter-rouge&quot;&gt;net.roboloco.csv2sql&lt;/code&gt; namespace, and assuming that you are using the same &lt;a href=&quot;../docker-postgres&quot;&gt;postgres database&lt;/a&gt; from a previous article:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(def default-db {:dbtype &quot;postgresql&quot; 
                 :dbname   (or (System/getenv &quot;POSTGERS_DB&quot;)  &quot;csv2sql&quot;)
                 :user     (or (System/getenv &quot;POSTGRES_USER&quot;) &quot;postgres&quot;)
                 :password (or (System/getenv &quot;POSTGRES_PASS&quot;) &quot;mysecretpassword&quot;)})

(defn connection-ok?
  &quot;A predicate that tests if the database is connected.&quot;
  [db]
  (= {:result 15} (first (sql/query db [&quot;select 3*5 as result&quot;]))))

(defn drop-existing-sql-tables!
  &quot;For each subdirectory in DIRNAME, drop any tables with the same name.&quot;
  [db csvdir]
  (doseq [table-name (map (fn [f] (.getName ^java.io.File f))
                          (files/list-subdirectories csvdir))]    
    (let [cmd (format &quot;DROP TABLE IF EXISTS %s;&quot; table-name) ]
      (sql/db-do-commands db cmd))))

(defn make-sql-tables!
  &quot;Makes the SQL tables from whatever is in the database. &quot;
  [db csvdir]
  (doseq [sql-file (map (fn [f] (.getName ^java.io.File f)) 
                        (files/list-files-of-type csvdir &quot;sql&quot;))]
    (let [table-sql (slurp sql-file)]
      (println table-sql)
      (sql/db-do-commands db table-sql))))

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;load-the-csv-files-into-sql&quot;&gt;5. Load the CSV files into SQL&lt;/h2&gt;

&lt;p&gt;The final step is to load in the CSV file. As we do so, we need to parse the strings from the CSV using the schema so that they are converted into the proper data type for JDBC to properly insert them in Postgres.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(defn insert-csv!
  &quot;Inserts the rows of the CSV into the database, converting the rows to the appropriate
  type as they are loaded. Lazy, so it works on very large files. If a column is not
  found in the schema, it is omitted and not inserted into the database. &quot;
  [db table csvfile schema]
  (with-open [reader (clojure.java.io/reader csvfile)]
    (let [csv-rows (clojure.data.csv/read-csv reader)
          [header typed-rows] (guess/parse-csv-rows-using-schema schema csv-rows)
          cnt (atom 0)
          chunk-size 1000]
      (doseq [chunk-of-rows (partition-all chunk-size typed-rows)]
        (let [line-num (swap! cnt inc)]
            (println &quot;Inserted&quot;  (* chunk-size (inc @cnt)) &quot;rows&quot;))
        (sql/insert-multi! db table header chunk-of-rows)))))

(defn insert-all-csvs!
  &quot;Loads all the subdirectories of CSVDIR as tables. Optional hashmap MANUAL-OPTIONS
  lets you decide how to customize various tables; for example, you may want to set
  an optional table.&quot;
  [db csvdir]  
  (doseq [dirname (map (fn [f] (.getName ^java.io.File f))
                       (files/list-subdirectories csvdir))]
    (let [filepath (str csvdir &quot;/&quot; (table-schema-filename dirname))
          _ (println filepath)
          schema (slurp filepath)]
      (when-not (empty? schema)
        (-&amp;gt;&amp;gt; (files/list-files-of-type (str csvdir &quot;/&quot; dirname) &quot;csv&quot;)
             (map (fn [csvfile]
                    (println (format &quot;Loading: %s&quot; csvfile))
                    (insert-csv! db dirname csvfile schema)))
             doall)))))

(defn -main
  []
  (let [csvdir (System/getenv &quot;CSVDIR&quot;)
        db default-db]
    (when-not (connection-ok? db)
      (throw (Exception. (str &quot;Unable to connect to DB:&quot; db))))
    (autodetect-sql-schemas! csvdir)
    (make-sql-tables! db csvdir)
    (insert-all-csvs! db csvdir)
    (println &quot;Done!&quot;)))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Nothing left to do but try it out! The final step is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;(-main)&lt;/code&gt; either at the REPL or add &lt;code class=&quot;highlighter-rouge&quot;&gt;gen-class&lt;/code&gt; to the namespace and build an uberjar with &lt;code class=&quot;highlighter-rouge&quot;&gt;(-main)&lt;/code&gt; set as the entry point (in &lt;code class=&quot;highlighter-rouge&quot;&gt;project.clj&lt;/code&gt;), and then launch it with an environment variable that sets the CSVDIR:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lein uberjar

CSVDIR=/path/to/your/sqlcsv/ java -jar target/csv2sql-0.1.0-SNAPSHOT-standalone.jar
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The above is probably sufficient for this exercise – this ETL job will populate a database with a few million rows in a few minutes. On my laptop, it ingests about 5000-10000 rows per second, depending on the CSV.&lt;/p&gt;

&lt;p&gt;Not bad a couple hundred lines of code, but it could probably still be trimmed/simplified. The above code may be found in the &lt;a href=&quot;https://github.com/ivarthorson/csv2sql&quot;&gt;csv2sql repo&lt;/a&gt; if you want to go further.&lt;/p&gt;

&lt;p&gt;Some possible extensions to this would be:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Warn the user if 99.9% of the elements of a column are of one type, but there are a few values that are of a different type.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add support for JSONs, rather than just CSVs. This would probably involve flattening nested JSONs so that &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&lt;/code&gt; would become &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;a.b&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;, and might involve generalizing the loader.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If your database supports tens or hundreds of millions of rows, add support for Parquet files, a common tabular data format for big data.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This little program was focused on ETL, and we should probably stop at that. Rather than bolt on a HTTP CRUD API here, it might make more sense to contain that functionality as a separate app.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://clojure-doc.org/articles/ecosystem/java_jdbc/using_sql.html&quot;&gt;http://clojure-doc.org/articles/ecosystem/java_jdbc/using_sql.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.timescale.com/v1.2/using-timescaledb/writing-data&quot;&gt;https://docs.timescale.com/v1.2/using-timescaledb/writing-data&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="clojure" /><summary type="html">This is another basic example to help beginners get started in Clojure, which is still my favorite programming language, almost 10 years after I first started using it. Like all languages, Clojure has some warts. But it also has a lot of very powerful and abstract concepts that many average programmers have not seen before, and like most mathematical concepts, the power of such abstractions are greatly underestimated by many people. Even fancy-sounding but easy-to-understand concepts like homoiconicity are still really underappreciated in the programming community.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="{&quot;feature&quot;=&gt;nil}" /></entry><entry><title type="html">Composite Robot Construction</title><link href="/blog/composite-robot-construction/" rel="alternate" type="text/html" title="Composite Robot Construction" /><published>2019-02-26T00:00:00-08:00</published><updated>2019-02-26T00:00:00-08:00</updated><id>/blog/composite-robot-construction</id><content type="html" xml:base="/blog/composite-robot-construction/">&lt;p&gt;This article describes the progress of a fiber-reinforced polymer monopod robot that I built over a period of about 30 days. My hope is that seeing some of the successes and failures I encountered will help you build your own composite robots. Foam and fiberglass are very versatile materials that are just as accessible to garage-level workshops as they are to research institutions, as I hope you will see.&lt;/p&gt;

&lt;p&gt;If this article interests you, perhaps look at the &lt;a href=&quot;../../about/frp-seminar-slides.pdf&quot;&gt;FRP tutorial slides I made&lt;/a&gt;, or watch the &lt;a href=&quot;https://youtu.be/x9cK6zSe-NQ&quot;&gt;tutorial video&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;project-background&quot;&gt;Project Background&lt;/h2&gt;

&lt;p&gt;I built a robot for my Ph.D. thesis while working at a research institution in Italy, the &lt;a href=&quot;https://iit.it&quot;&gt;Istituto Italiano di Technologia&lt;/a&gt;. Italy is an absolutely lovely place to live – people are healthy, their eyes usually excude a great understanding of human compassion, the food is reliably delicious, and the weather is amazing. But every culture has it weakpoints, and it is probably fair to say that Italians are not well known for their planning and organization. So maybe it will not surprise you that, like so many other projects in Italy, my thesis robot was constructed in a rush and at the last minute.&lt;/p&gt;

&lt;p&gt;Due to some miscommunications, bureaucratic delays, and funding hiccups, I did not even have the parts that I needed until &lt;em&gt;after&lt;/em&gt; the end of my thesis research period. By way of background, beginning a Ph.D. in Europe usually implies you to have gotten a Masters degree first, so the durations are shorter than in the USA. In Italy, to prevent the abuse of vulnerable and underpaid Ph.D. students, there is even a legal limit to a Ph.D.’s duration, which is a period of about three to three and a half years, followed by a three to six month period of writing the thesis. In my case, after working for three years on compliant actuation, delays meant that the construction of my robot actually began in the final three-month period allocated for us students to write our theses, so I was in a real hurry to build, code, and write as fast as my fingers could possibly type!&lt;/p&gt;

&lt;p&gt;The point of building the robot was to try to design a mechanical structure with mechanical dynamics that would naturally be very close to actual hopping motions, even without any control effort applied. Using electric motors in a hopping robot is difficult, as they have a fairly low power-to-weight ratio. I tried to solve the problem by designing custom actuators with transmissions built to match the simulated mechanical dynamics of a 3-link hopping robot. This meant big springs, and a mechanism for stretching them elastically.&lt;/p&gt;

&lt;h2 id=&quot;actuator-background&quot;&gt;Actuator Background&lt;/h2&gt;

&lt;p&gt;Some but not all of the actuator parts arrived in December 2011, all shiny and new:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2011-12-13_Canon_EOS_REBEL_T1i_IMG_9896_0a51120.jpg&quot; alt=&quot;2011-12-13_Canon_EOS_REBEL_T1i_IMG_9896_0a51120&quot; title=&quot;The actuator parts laid out on a table, before assembly.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’m not going to go into how the actuator works – see my &lt;a href=&quot;../../about/thorson-phd-defense.pdf&quot;&gt;thesis slides&lt;/a&gt; for that. The overview of the idea is that a center gear is driven by a differential, and as the gear rolls around the interior of the ring gear, it pulls on a bar that compresses the large spring. This can store a large amount of energy for a short time, and means the rotor needs to move less during hopping motions, so you can use a less powerful motor when hopping.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2011-12-13_Canon_EOS_REBEL_T1i_IMG_9975_03176b2.jpg&quot; alt=&quot;2011-12-13_Canon_EOS_REBEL_T1i_IMG_9975_03176b2&quot; title=&quot;The guts of the mechanism.&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2011-12-16_Canon_EOS_REBEL_T1i_IMG_09990_fcb25ff.jpg&quot; alt=&quot;2011-12-16_Canon_EOS_REBEL_T1i_IMG_09990_fcb25ff&quot; title=&quot;The whole motor, fully assembled, tips the scales at 2883g.&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;construction-plan&quot;&gt;Construction Plan&lt;/h2&gt;

&lt;p&gt;Even though I had made another &lt;a href=&quot;https://youtu.be/o5AgR_gQ89A&quot;&gt;larger, heavier version of this actuator&lt;/a&gt; about a year earlier, and since then had reduced the weight of the motor significantly, the last iteration of the actuator still ended up weighing 2883g. I had simulated the robot extensively, and I knew that the whole robot had to weigh less than 10kg, at the very most. The weight of just these two actuators alone unfortunately took up over half of the mass of the robot, and as a result I was desperate to make the structure as light as possible. Although using aluminum construction would probably have been slightly simpler, I decided to go with foam-and-fiberglass construction, since I had used it before on other projects and knew it was robust and strong enough for a structure like this.&lt;/p&gt;

&lt;p&gt;The main point of building this robot was to test the actuators, but I also wanted to try a few different composite construction techniques. While I have used nomex honeycomb sheets for simply curved surfaces, and used molds for complex surfaces, I had never tried using hot wire techniques or an expanding urethane foam for complex curved parts. To test all the combinations, I planned to make the robot in four pieces:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The body, which I would make from styrofoam and fiberglass, using moldless construction.&lt;/li&gt;
  &lt;li&gt;The hip joint, which attaches the body to the thigh, I would make from fiberglass and urethane foam, using inner and outer molds.&lt;/li&gt;
  &lt;li&gt;The thigh, which I would make from carbon fiber and urethane foam, using inner and outer molds.&lt;/li&gt;
  &lt;li&gt;The shank, which I would make from carbon fiber and urethan foam, using inner and outer molds.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;day-1-mold-printing&quot;&gt;Day 1: Mold-printing&lt;/h2&gt;

&lt;p&gt;The first day, I designed and 3D-printed an inner “plug” and outer “mold” on a pair of 3D systems Stratisys printers. The colors are different because the printers had different filiments on them when I printed them.&lt;/p&gt;

&lt;p&gt;The “plug” defines the inside shape of the part that I want to make:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-01_Canon_EOS_REBEL_T1i_IMG_10597_6f43657.jpg&quot; alt=&quot;2012-01-01_Canon_EOS_REBEL_T1i_IMG_10597_6f43657&quot; title=&quot;The two pieces of the plug.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And the “mold” defines the outside shape:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-01_Canon_EOS_REBEL_T1i_IMG_10600_e4bd0f0.jpg&quot; alt=&quot;2012-01-01_Canon_EOS_REBEL_T1i_IMG_10600_e4bd0f0&quot; title=&quot;The mold.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I ended up mounting the plug (not shown) and the mold on small melanine boards so that I could handle them better.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-01_Canon_EOS_REBEL_T1i_IMG_10601_5353810.jpg&quot; alt=&quot;2012-01-01_Canon_EOS_REBEL_T1i_IMG_10601_5353810&quot; title=&quot;The mold, installed in a board (top side).&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;day-2-hot-wiring&quot;&gt;Day 2: Hot-Wiring&lt;/h2&gt;

&lt;p&gt;I stole a technique from Burt Rutan’s moldless composite construction books, and used two sheets of metal and an electrically heated nichrome “hot wire” to cut the body of the robot from a block of foam.&lt;/p&gt;

&lt;p&gt;Note: DO NOT USE URETHANE FOAM FOR HOTWIRING. Styrofoam fumes are still not good to breathe, but they are much less poisonous than urethane foam smoke.&lt;/p&gt;

&lt;p&gt;The first thing to do is to make a couple of sheet metal templates. When cutting out the sheets of metal, it’s a good idea to bolt the two pieces together so they come out identically shaped.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-02_Canon_EOS_REBEL_T1i_IMG_10611_313d00b.jpg&quot; alt=&quot;2012-01-02_Canon_EOS_REBEL_T1i_IMG_10611_313d00b&quot; title=&quot;Two sheets of aluminum bolted together.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The hot-wiring is pretty simple. Start with three blocks of styrofoam…&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-02_Canon_EOS_REBEL_T1i_IMG_10606_0fc4ddf.jpg&quot; alt=&quot;2012-01-02_Canon_EOS_REBEL_T1i_IMG_10606_0fc4ddf&quot; title=&quot;Three blocks of styrofoam.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;…then glue them together with spray adhesive, stack a heavy weight on top, and wait a few hours.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-02_Canon_EOS_REBEL_T1i_IMG_10609_1e2f4b6.jpg&quot; alt=&quot;2012-01-02_Canon_EOS_REBEL_T1i_IMG_10609_1e2f4b6&quot; title=&quot;A heavy weight pressing the styrofoam blocks together.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Clamp the metal cutouts to the block, and be careful to make sure they are not rotated relative to each other. We used machinist spacers to hold the templates a fixed distance from the tabletop when clamping them on. Likewise, make sure the templates are the correct distance from the front and back of the blocks. Be as precise as possible here, this is an important step.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-02_Canon_EOS_REBEL_T1i_IMG_10613_827e473.jpg&quot; alt=&quot;2012-01-02_Canon_EOS_REBEL_T1i_IMG_10613_827e473&quot; title=&quot;Clamp the metal cutouts to the block. (Left side)&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-02_Canon_EOS_REBEL_T1i_IMG_10614_57f03c0.jpg&quot; alt=&quot;2012-01-02_Canon_EOS_REBEL_T1i_IMG_10614_57f03c0&quot; title=&quot;Clamp the metal cutouts to the block. (Right side)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now heat up a nichrome wire with a few amps of current. Depending on the diameter of the wire, more or less current will be needed. I recommend doing some test cuts, and adding some type of tensioning mechanism because the spring will stretch slightly as it heats and you want it to stay very taut. Here’s a short video of our test cuts:&lt;/p&gt;

&lt;p&gt;TODO&lt;/p&gt;

&lt;p&gt;When you are done, you should be able to lift off the piece you just cut with a hot wire, and leave long spider-web-like strands behind. The strands are easily brushed off with your hand.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-02_Canon_EOS_REBEL_T1i_IMG_10639_00936b0.jpg&quot; alt=&quot;2012-01-02_Canon_EOS_REBEL_T1i_IMG_10639_00936b0&quot; title=&quot;Lifting off the recently-cut foam;&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-02_Canon_EOS_REBEL_T1i_IMG_10640_412fbf3.jpg&quot; alt=&quot;2012-01-02_Canon_EOS_REBEL_T1i_IMG_10640_412fbf3&quot; title=&quot;Spiderwebs&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-02_Canon_EOS_REBEL_T1i_IMG_10642_b7ac046.jpg&quot; alt=&quot;2012-01-02_Canon_EOS_REBEL_T1i_IMG_10642_b7ac046&quot; title=&quot;The finished piece&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is one of the few times where getting a good result is as easy as it looks. I don’t recommend any sawing motions or anything – just be smooth and count along with a friend as you go over all of the tick marks around the shape. I see no reason why you couldn’t achieve some pretty interesting lofted shapes, if each of the metal templates were different shapes.&lt;/p&gt;

&lt;h2 id=&quot;day-5&quot;&gt;Day 5:&lt;/h2&gt;

&lt;p&gt;The body of the robot now looks like this.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-05_Canon_EOS_REBEL_T1i_IMG_11190_a82bca7.jpg&quot; alt=&quot;2012-01-05_Canon_EOS_REBEL_T1i_IMG_11190_a82bca7&quot; title=&quot;The piece, ready for fiberglassing.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s time to apply fiberglass. The short version of what we are going to do is to lay fiberglass cloth over the top of the surface, spread epoxy through the fabric until it is fully wetted, and wait 8-24 hours for the epoxy to cure.&lt;/p&gt;

&lt;p&gt;Cut out the fiberglass cloth using sharp scissors on a clean table. It’s important to use gloves and keep your oily hands off of the fabric – epoxy will not stick to oil. For common thicknesses of fiberglass fabric, you’ll only need a couple of layers to get a reasonably hard surface that can still be cut with a sharp knife. If you put 4-5 layers on, it will be heavier and much more resistant to puncture. If you want to keep it light and strong, cut out enough fabric to put 2 layers everywhere, and then reinforce the edges that are likely to strike the ground with 4-5 layers. This is additive manufacturing, and it’s acceptable to only reinforce only the places you need. If you are going to drill into the fiberglass, you’ll want to build up 10 or even 20 layers, depending on how you are attaching a bolt to it.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-05_Canon_EOS_REBEL_T1i_IMG_11192_0f6dda3.jpg&quot; alt=&quot;2012-01-05_Canon_EOS_REBEL_T1i_IMG_11192_0f6dda3&quot; title=&quot;Fiberglass cloth.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Weigh out the appropriate amount of resin and hardener. Many formulations these days ask for equal amounts of resin and hardener, but be careful to check if the label is indicating equal units of volume or mass – they can be different!&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-05_Canon_EOS_REBEL_T1i_IMG_11193_3ed4692.jpg&quot; alt=&quot;2012-01-05_Canon_EOS_REBEL_T1i_IMG_11193_3ed4692&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Set a timer for 30 minutes, and have a friend handy whose hands are NOT covered in sticky resin. Now wet out the fabric with a disposable paintbrush, work quickly, and stipple all the resin into the fabric.&lt;/p&gt;

&lt;p&gt;TODO&lt;/p&gt;

&lt;p&gt;In my case, I use a vacuum bag over the part so that atmospheric pressure pushes the fabric tightly against the foam. It also removes excess resin. Keeping the fabrics tight against one another, and removing all excess resin is generally makes slightly lighter and stronger parts, but you can get great results even without the vacuum bag. Note that if you don’t use enough resin, it will be a structural disaster, so tread carefully along that particular weight optimization pathway. As a rule of thumb, it’s better to have too much resin than too little for hobbyist projects.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-05_Canon_EOS_REBEL_T1i_IMG_11191_ee89bd7.jpg&quot; alt=&quot;2012-01-05_Canon_EOS_REBEL_T1i_IMG_11191_ee89bd7&quot; title=&quot;Vacuum pump and vacuum bag.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Try to finish within the 30 minutes, then pull the vacuum. If you wait too long and the viscosity of the resin is too high, carefully use a hair dryer (or if you feel like living dangerously, a heat gun) to locally increase the temperature of the resin in specific areas to get the resin to flow more easily.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-05_Canon_EOS_REBEL_T1i_IMG_11196_69f122d.jpg&quot; alt=&quot;2012-01-05_Canon_EOS_REBEL_T1i_IMG_11196_69f122d&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Vacuum bagging usually has three layers between the fibers and the vacuum bag itself. The innermost is a “peel ply” made of non-stick vinyl, which you use directly on top of the fiberglass when you intend to bond something else to it at a later stage. The peel ply leaves a matte surface on the part, which is good for adhesion of subsequent layers. Then there is the “breather ply”, which is a smooth plastic that has tiny holes in it through which the resin flows. Finally, the next outermost layer is thick cotton or felt “bleeder ply” which absorbs the excess resin, and then the vacuum bag itself. As the vacuum pumps down, you will see a bunch of dots in the bleeder ply as the resin flows through tiny holes in the breather ply.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-05_Canon_EOS_REBEL_T1i_IMG_11197_ded79bc.jpg&quot; alt=&quot;2012-01-05_Canon_EOS_REBEL_T1i_IMG_11197_ded79bc&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The whole thing is pretty funny looking at this point:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-05_Canon_EOS_REBEL_T1i_IMG_11199_605601b.jpg&quot; alt=&quot;2012-01-05_Canon_EOS_REBEL_T1i_IMG_11199_605601b&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As I waited for the body to cure under vacuum for for 4-6 hours, and then another 20 before “unbagging” the part, I also started to work on the exterior surface mold for the shank:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-05_Canon_EOS_REBEL_T1i_IMG_11200_ec10b6a.jpg&quot; alt=&quot;2012-01-05_Canon_EOS_REBEL_T1i_IMG_11200_ec10b6a&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The gray paste is automotive bondo, which you should apply on with a minimum thickness needed to fill any gaps, and then sand as smooth as possible. Bondo dries fairly quickly and can help you fill gaps in the 3D printing texture that would otherwise show up on your molded part.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-05_Canon_EOS_REBEL_T1i_IMG_11202_d2741e9.jpg&quot; alt=&quot;2012-01-05_Canon_EOS_REBEL_T1i_IMG_11202_d2741e9&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The last step (not shown here, but you’ll see soon) is to paint the mold with a glossy black color.&lt;/p&gt;

&lt;h2 id=&quot;day-6&quot;&gt;Day 6:&lt;/h2&gt;

&lt;p&gt;This is what the body part looks like after unbagging, removing the breather ply and bleeder ply, and just having the peel ply:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-06_Canon_EOS_REBEL_T1i_IMG_11203_7b36269.jpg&quot; alt=&quot;2012-01-06_Canon_EOS_REBEL_T1i_IMG_11203_7b36269&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you remove the peel ply, you may see blue sparks and static electricity. This is normal, but I can’t explain why.&lt;/p&gt;

&lt;p&gt;After removing the peel ply and trimming the fiberglass with a sharp knife, I had this:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-06_Canon_EOS_REBEL_T1i_IMG_11205_32a2c5f.jpg&quot; alt=&quot;2012-01-06_Canon_EOS_REBEL_T1i_IMG_11205_32a2c5f&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now it’s time to do the same trick again with the hot wire, and remove the interior foam of the body part…&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-06_Canon_EOS_REBEL_T1i_IMG_11212_dc29dce.jpg&quot; alt=&quot;2012-01-06_Canon_EOS_REBEL_T1i_IMG_11212_dc29dce&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tada!&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-06_Canon_EOS_REBEL_T1i_IMG_11215_bfadb38.jpg&quot; alt=&quot;2012-01-06_Canon_EOS_REBEL_T1i_IMG_11215_bfadb38&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The weight is pretty good considering the size of the part. If I had it to do over again, I would have gone twice as thin with the foam, had I wished. Probably 1cm would have been sufficient instead of the 2cm that I left here.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-06_Canon_EOS_REBEL_T1i_IMG_11217_890f1d8.jpg&quot; alt=&quot;2012-01-06_Canon_EOS_REBEL_T1i_IMG_11217_890f1d8&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At this point, I also glued on a back side to the foam box that is being made:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-07_Canon_EOS_REBEL_T1i_IMG_11226_d0d2c09.jpg&quot; alt=&quot;2012-01-07_Canon_EOS_REBEL_T1i_IMG_11226_d0d2c09&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After the glue dried, I rounded the corner with some sandpaper. Foam is a real easy thing to work with.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-07_Canon_EOS_REBEL_T1i_IMG_11223_5583143.jpg&quot; alt=&quot;2012-01-07_Canon_EOS_REBEL_T1i_IMG_11223_5583143&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;day-7&quot;&gt;Day 7:&lt;/h2&gt;

&lt;p&gt;I don’t have as many photos as I should for this day, but here I’m assembling the the 3D printed mold for the thigh.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-07_Canon_EOS_REBEL_T1i_IMG_11220_aba4b6b.jpg&quot; alt=&quot;2012-01-07_Canon_EOS_REBEL_T1i_IMG_11220_aba4b6b&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once again, I covered the inside of the mold with bondo. In this case, I used a yellow bondo rather than gray, for no particular reason. In this photo, it is not sanded yet.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-07_Canon_EOS_REBEL_T1i_IMG_11221_c01af7a.jpg&quot; alt=&quot;2012-01-07_Canon_EOS_REBEL_T1i_IMG_11221_c01af7a&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Most of the structures in this robot are open boxes, so I made the “box lids” out of foam, and sandwiched them between two sheets of fiberglass on a sheet of glass, and then pumped a vacuum on them to make very flat, lightweight pieces. Here’s what the foam looks like, but I don’t have any photos of the parts themselves:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-07_Canon_EOS_REBEL_T1i_IMG_11224_e5b01d1.jpg&quot; alt=&quot;2012-01-07_Canon_EOS_REBEL_T1i_IMG_11224_e5b01d1&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Not shown today, I also did the vacuum bagged layup of the shank, which we will see tomorrow.&lt;/p&gt;

&lt;p&gt;Very importantly, I probably spent most of the day waxing, waxing, and re-waxing the painted black surfaces of the mold. Some people take this to a religious level and do it a half dozen times or more, and it is indeed religiously important for big molds that have never been used before. But for small molds, three times is usually enough for me. Epoxy will stick to any poorly waxed thing like the world’s strongest leech, and your part will be ruined.&lt;/p&gt;

&lt;h2 id=&quot;day-8&quot;&gt;Day 8:&lt;/h2&gt;

&lt;p&gt;We now can see the first carbon fiber part to pop out of the mold. The molded surface will have a fairly shiny and smooth texture to it where it contacted the mold.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-08_Canon_EOS_REBEL_T1i_IMG_11235_a21fded.jpg&quot; alt=&quot;2012-01-08_Canon_EOS_REBEL_T1i_IMG_11235_a21fded&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;While releasing the shank’s outer surface from the mold, I broke the mold. Good thing I’m only making one of these! Maybe I should have waxed more than 3x? Also note how I painted it black before waxing to better see bumps, imperfections, and the wax.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-08_Canon_EOS_REBEL_T1i_IMG_11227_9577d6e.jpg&quot; alt=&quot;2012-01-08_Canon_EOS_REBEL_T1i_IMG_11227_9577d6e&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can see the texture of the carbon fiber weave left on the mold, as it was pushed into the mold by the fiberglass.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-08_Canon_EOS_REBEL_T1i_IMG_11228_2cead35.jpg&quot; alt=&quot;2012-01-08_Canon_EOS_REBEL_T1i_IMG_11228_2cead35&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The next thing is to trim the edge with a sharp knife, and wipe off any wax on the surface. Because this is a two-mold part, all wax needs to be removed so that another layer of carbon fiber can bond with the outside surface around the parting line.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-08_Canon_EOS_REBEL_T1i_IMG_11238_fb029c5.jpg&quot; alt=&quot;2012-01-08_Canon_EOS_REBEL_T1i_IMG_11238_fb029c5&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The weight of the outer layer is really pretty light. Note the matte texture of the inside – a result of the peel ply.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-08_Canon_EOS_REBEL_T1i_IMG_11243_01fc096.jpg&quot; alt=&quot;2012-01-08_Canon_EOS_REBEL_T1i_IMG_11243_01fc096&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The next thing to do will be to fill the gap between the outside surface and inside surface with expanding urethane foam. The next few frames show how the outer skin will fit over the plug.&lt;/p&gt;

&lt;p class=&quot;center center&quot;&gt;&lt;img src=&quot;2012-01-08_Canon_EOS_REBEL_T1i_IMG_11248_052eb49.jpg&quot; alt=&quot;2012-01-08_Canon_EOS_REBEL_T1i_IMG_11248_052eb49&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-08_Canon_EOS_REBEL_T1i_IMG_11249_8219042.jpg&quot; alt=&quot;2012-01-08_Canon_EOS_REBEL_T1i_IMG_11249_8219042&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;2012-01-08_Canon_EOS_REBEL_T1i_IMG_11250_975f786.jpg&quot; alt=&quot;2012-01-08_Canon_EOS_REBEL_T1i_IMG_11250_975f786&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Time to fill the inside with polyurethane foam… (I will regret this tomorrow!)&lt;/p&gt;

&lt;p class=&quot;center center&quot;&gt;&lt;img src=&quot;2012-01-08_Canon_EOS_REBEL_T1i_IMG_11252_9038b7e.jpg&quot; alt=&quot;2012-01-08_Canon_EOS_REBEL_T1i_IMG_11252_9038b7e&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;2012-01-08_Canon_EOS_REBEL_T1i_IMG_11254_b14bc7d.jpg&quot; alt=&quot;2012-01-08_Canon_EOS_REBEL_T1i_IMG_11254_b14bc7d&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I spent the rest of the day painting the interior of the thigh mold, and waxing a sheet of glass for use with the covering plates:&lt;/p&gt;

&lt;p class=&quot;center center&quot;&gt;&lt;img src=&quot;2012-01-08_Canon_EOS_REBEL_T1i_IMG_11256_b333c8c.jpg&quot; alt=&quot;2012-01-08_Canon_EOS_REBEL_T1i_IMG_11256_b333c8c&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;2012-01-08_Canon_EOS_REBEL_T1i_IMG_11257_82e4ffe.jpg&quot; alt=&quot;2012-01-08_Canon_EOS_REBEL_T1i_IMG_11257_82e4ffe&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I also did the layup of the fiberglass layer on the outside of the body box:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-08_Canon_EOS_REBEL_T1i_IMG_11245_0430ebc.jpg&quot; alt=&quot;2012-01-08_Canon_EOS_REBEL_T1i_IMG_11245_0430ebc&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;day-9&quot;&gt;Day 9:&lt;/h2&gt;

&lt;p&gt;The day dawned bright and exciting. Look at this great composite part, with a foam core all perfectly shaped.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-09_Canon_EOS_REBEL_T1i_IMG_11260_fc92bf7.jpg&quot; alt=&quot;2012-01-09_Canon_EOS_REBEL_T1i_IMG_11260_fc92bf7&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Oh no! The urethane foam didn’t cure! I guess in my excitement I forgot that a 1-part expanding foam relies on oxygen to cure, so it won’t dry out in an enclosed space like this mold.&lt;/p&gt;

&lt;p class=&quot;center center&quot;&gt;&lt;img src=&quot;2012-01-09_Canon_EOS_REBEL_T1i_IMG_11261_9dc62ca.jpg&quot; alt=&quot;2012-01-09_Canon_EOS_REBEL_T1i_IMG_11261_9dc62ca&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;2012-01-09_Canon_EOS_REBEL_T1i_IMG_11262_55ad3f6.jpg&quot; alt=&quot;2012-01-09_Canon_EOS_REBEL_T1i_IMG_11262_55ad3f6&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Discouraged by that dumb mistake, I ordered some different urethane foam, and spent the rest of the day waxing the thigh mold:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-09_Canon_EOS_REBEL_T1i_IMG_11265_36033dc.jpg&quot; alt=&quot;2012-01-09_Canon_EOS_REBEL_T1i_IMG_11265_36033dc&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On the bright side, the body part fiberglass is coming along well.&lt;/p&gt;

&lt;p class=&quot;center center&quot;&gt;&lt;img src=&quot;2012-01-09_Canon_EOS_REBEL_T1i_IMG_11270_100195d.jpg&quot; alt=&quot;2012-01-09_Canon_EOS_REBEL_T1i_IMG_11270_100195d&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;2012-01-09_Canon_EOS_REBEL_T1i_IMG_11272_f6ef1f7.jpg&quot; alt=&quot;2012-01-09_Canon_EOS_REBEL_T1i_IMG_11272_f6ef1f7&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;day-10&quot;&gt;Day 10:&lt;/h2&gt;

&lt;p&gt;Time for some carbon fiber! Carbon fiber is easier to cut than fiberglass because it’s stiffer and more brittle.  I have it here between two sheets of plastic to keep it clean and dust-free.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-10_Canon_EOS_REBEL_T1i_IMG_1285_423078a.jpg&quot; alt=&quot;2012-01-10_Canon_EOS_REBEL_T1i_IMG_1285_423078a&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The carbon fiber layup of the thigh looks a little weird before it is de-molded, though.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-10_Canon_EOS_REBEL_T1i_IMG_11273_d33472e.jpg&quot; alt=&quot;2012-01-10_Canon_EOS_REBEL_T1i_IMG_11273_d33472e&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After trimming, it is looking better, but the outside texture is pretty dry, like I didn’t use as much resin as I should have. There should be a smoother texture on the mold-side of the carbon fiber. The only way to fix this is to go back and apply more resin to the outside with a paintbrush, and then sand it smooth later. It’s much more time-consuming than if I had simply used the right amount of resin the first time.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-10_Canon_EOS_REBEL_T1i_IMG_11275_aa30acb.jpg&quot; alt=&quot;2012-01-10_Canon_EOS_REBEL_T1i_IMG_11275_aa30acb&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The robot is starting to take shape!&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-10_Canon_EOS_REBEL_T1i_IMG_11283_0c84a30.jpg&quot; alt=&quot;2012-01-10_Canon_EOS_REBEL_T1i_IMG_11283_0c84a30&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There’s one more part we have to make today: the hip-joint attachment for the body. I haven’t shown photos of this part yet, but it’s made the same way as everything else thus far.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-10_Canon_EOS_REBEL_T1i_IMG_11287_9586f77.jpg&quot; alt=&quot;2012-01-10_Canon_EOS_REBEL_T1i_IMG_11287_9586f77&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I also did some trimming of the body of the robot, to cut the foam away from the edge fo the fiberglass and make a “lip” internally that the box lid will fit into.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-10_Canon_EOS_REBEL_T1i_IMG_11292_0f34dfc.jpg&quot; alt=&quot;2012-01-10_Canon_EOS_REBEL_T1i_IMG_11292_0f34dfc&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;day-12&quot;&gt;Day 12:&lt;/h2&gt;

&lt;p&gt;The hip joint attachement demolded very well, but there surface texture isn’t very good yet.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-12_Canon_EOS_REBEL_T1i_IMG_11295_d9eca45.jpg&quot; alt=&quot;2012-01-12_Canon_EOS_REBEL_T1i_IMG_11295_d9eca45&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Adding that to the robot now gives it a more or less complete on the outside surface:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-12_Canon_EOS_REBEL_T1i_IMG_11296_ce333f0.jpg&quot; alt=&quot;2012-01-12_Canon_EOS_REBEL_T1i_IMG_11296_ce333f0&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;day-14&quot;&gt;Day 14:&lt;/h2&gt;

&lt;p&gt;Let’s try applying urethane foam again. Here I’ve got some two-part expanding foam. Because it’s two-part epoxy, it can cure without any oxygen, and is suitable for use in a mold cavity.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-14_Canon_EOS_REBEL_T1i_IMG_11390_d9ae10d.jpg&quot; alt=&quot;2012-01-14_Canon_EOS_REBEL_T1i_IMG_11390_d9ae10d&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Even so, a test is probably a wise idea….&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-14_Canon_EOS_REBEL_T1i_IMG_11391_5884894.jpg&quot; alt=&quot;2012-01-14_Canon_EOS_REBEL_T1i_IMG_11391_5884894&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since the test went well, jumped in with both feet and put the shank on its plug:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-14_Canon_EOS_REBEL_T1i_IMG_11399_dd97d80.jpg&quot; alt=&quot;2012-01-14_Canon_EOS_REBEL_T1i_IMG_11399_dd97d80&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And likewise for the hip-attachement piece (not shown) and the thigh:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-14_Canon_EOS_REBEL_T1i_IMG_11401_7eb154e.jpg&quot; alt=&quot;2012-01-14_Canon_EOS_REBEL_T1i_IMG_11401_7eb154e&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;day-15&quot;&gt;Day 15:&lt;/h2&gt;

&lt;p&gt;This time the foam cured perfectly, and I was able to gently wiggle the foam off of plug.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-15_Canon_EOS_REBEL_T1i_IMG_11404_fecc58c.jpg&quot; alt=&quot;2012-01-15_Canon_EOS_REBEL_T1i_IMG_11404_fecc58c&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-15_Canon_EOS_REBEL_T1i_IMG_11406_fa164a0.jpg&quot; alt=&quot;2012-01-15_Canon_EOS_REBEL_T1i_IMG_11406_fa164a0&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Adding the foam only added 108-72g = 36g of mass, yet made the part already much stiffer. When we add the inside layer of fiberglass to the foam, it is going to become incredibly stiff. Let’s just imagine that I did that…&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-15_Canon_EOS_REBEL_T1i_IMG_11416_cc208d1.jpg&quot; alt=&quot;2012-01-15_Canon_EOS_REBEL_T1i_IMG_11416_cc208d1&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Although it was only a single ply of carbon fiber, unlike the two plies on the outside surface, the inside layer added another 175g - 108g = 67g. This is probably mostly due to the weight of the resin, since I did not use a vacuum bag, and the 5-layer thick reinforcements I put on the large end for a metal piece that will be bolted on.&lt;/p&gt;

&lt;p&gt;A little more bad news today as well. Apparently, I got sloppy and didn’t wax the hip attachement plug enough.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-15_Canon_EOS_REBEL_T1i_IMG_11407_fb8a61f.jpg&quot; alt=&quot;2012-01-15_Canon_EOS_REBEL_T1i_IMG_11407_fb8a61f&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-15_Canon_EOS_REBEL_T1i_IMG_11414_3d50fce.jpg&quot; alt=&quot;2012-01-15_Canon_EOS_REBEL_T1i_IMG_11414_3d50fce&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;days-16-and-17&quot;&gt;Days 16 and 17:&lt;/h2&gt;

&lt;p&gt;Try, try again. At least this time I got the hip attachment foam to de-mold safely.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-16_Canon_EOS_REBEL_T1i_IMG_11426_2e0b12a.jpg&quot; alt=&quot;2012-01-16_Canon_EOS_REBEL_T1i_IMG_11426_2e0b12a&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I applied some fiberglass cloth to the inside of this piece; fiberglass is pretty transparent when properly wetted out, so after curing, you can hardly see it:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-17_Canon_EOS_REBEL_T1i_IMG_11438_a8bf3c7.jpg&quot; alt=&quot;2012-01-17_Canon_EOS_REBEL_T1i_IMG_11438_a8bf3c7&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I also added fiberglass cloth to the inside of the body box. Starting mass was 595g…&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-16_Canon_EOS_REBEL_T1i_IMG_11424_85baad6.jpg&quot; alt=&quot;2012-01-16_Canon_EOS_REBEL_T1i_IMG_11424_85baad6&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Adding the inside ply brought the mass up to 710g:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-17_Canon_EOS_REBEL_T1i_IMG_11443_40659be.jpg&quot; alt=&quot;2012-01-17_Canon_EOS_REBEL_T1i_IMG_11443_40659be&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To back up a bit, when curing, I used the completed body lid, which weighs 134g…&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-16_Canon_EOS_REBEL_T1i_IMG_11425_e7eab05.jpg&quot; alt=&quot;2012-01-16_Canon_EOS_REBEL_T1i_IMG_11425_e7eab05&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To make sure the piece would fit perfectly, I sandwiched the lid between two sheets of non-stick plastic and put weights on top while it cured.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-16_Canon_EOS_REBEL_T1i_IMG_11427_59e2891.jpg&quot; alt=&quot;2012-01-16_Canon_EOS_REBEL_T1i_IMG_11427_59e2891&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The hip attachement join needs a metal insert on it, so I added some extra fiberglass under it, and put the metal itself in the vacuum bag so it would be pushed in tight and fit perfectly.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-16_Canon_EOS_REBEL_T1i_IMG_11433_2afe8be.jpg&quot; alt=&quot;2012-01-16_Canon_EOS_REBEL_T1i_IMG_11433_2afe8be&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The last thing to do today is to apply a layer of carbon fiber to the inside of the thigh. This part was big enough I could use a vacuum bag.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-16_Canon_EOS_REBEL_T1i_IMG_11418_c2b5aa2.jpg&quot; alt=&quot;2012-01-16_Canon_EOS_REBEL_T1i_IMG_11418_c2b5aa2&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-16_Canon_EOS_REBEL_T1i_IMG_11429_3db0475.jpg&quot; alt=&quot;2012-01-16_Canon_EOS_REBEL_T1i_IMG_11429_3db0475&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;day-18&quot;&gt;Day 18&lt;/h2&gt;

&lt;p&gt;Things are really coming together! The nearly-finished thigh part weighs 463g now, and is incredibly rigid.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-17_Canon_EOS_REBEL_T1i_IMG_11434_91162b2.jpg&quot; alt=&quot;2012-01-17_Canon_EOS_REBEL_T1i_IMG_11434_91162b2&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After a bit of sanding on the sharpe edges, and screwing on the metal mounting pieces onto the shank and hip attachment points, both of those pieces also look good.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-18_Canon_EOS_REBEL_T1i_IMG_11445_39b722f.jpg&quot; alt=&quot;2012-01-18_Canon_EOS_REBEL_T1i_IMG_11445_39b722f&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-18_Canon_EOS_REBEL_T1i_IMG_11449_d0e71c4.jpg&quot; alt=&quot;2012-01-18_Canon_EOS_REBEL_T1i_IMG_11449_d0e71c4&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The motors fit beautifully in the thigh piece.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-18_Canon_EOS_REBEL_T1i_IMG_11447_bbb94d2.jpg&quot; alt=&quot;2012-01-18_Canon_EOS_REBEL_T1i_IMG_11447_bbb94d2&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And after a little trimming, the body box lid also fits well.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-18_Canon_EOS_REBEL_T1i_IMG_11450_9727db0.jpg&quot; alt=&quot;2012-01-18_Canon_EOS_REBEL_T1i_IMG_11450_9727db0&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;day-20&quot;&gt;Day 20&lt;/h2&gt;

&lt;p&gt;I added a touch-up coat of resin to the shank, and it looks good!&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-20_Canon_EOS_REBEL_T1i_IMG_11457_d4701cf.jpg&quot; alt=&quot;2012-01-20_Canon_EOS_REBEL_T1i_IMG_11457_d4701cf&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Similarly, a little extra epoxy made the thigh look good as well.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-20_Canon_EOS_REBEL_T1i_IMG_11451_d61edfd.jpg&quot; alt=&quot;2012-01-20_Canon_EOS_REBEL_T1i_IMG_11451_d61edfd&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Because of the stress concentration that occurs where the metal bolts to the aluminum, I actually sandwiched the lip of the between two aluminum pieces:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-20_Canon_EOS_REBEL_T1i_IMG_11453_d43f5b7.jpg&quot; alt=&quot;2012-01-20_Canon_EOS_REBEL_T1i_IMG_11453_d43f5b7&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(Not shown, but today I did the last fiberglassing to connect the hip attachment joint to the body. You’ll see the results tomorrow.)&lt;/p&gt;

&lt;h2 id=&quot;day-22&quot;&gt;Day 22&lt;/h2&gt;

&lt;p&gt;Time for some glamor photos of the pieces thus far:&lt;/p&gt;

&lt;p class=&quot;center center&quot;&gt;&lt;img src=&quot;2012-01-22_Canon_EOS_REBEL_T1i_IMG_11459_1864a14.jpg&quot; alt=&quot;2012-01-22_Canon_EOS_REBEL_T1i_IMG_11459_1864a14&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-22_Canon_EOS_REBEL_T1i_IMG_11460_621ccef.jpg&quot; alt=&quot;2012-01-22_Canon_EOS_REBEL_T1i_IMG_11460_621ccef&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-22_Canon_EOS_REBEL_T1i_IMG_11462_3d0da06.jpg&quot; alt=&quot;2012-01-22_Canon_EOS_REBEL_T1i_IMG_11462_3d0da06&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-22_Canon_EOS_REBEL_T1i_IMG_11470_2fc999a.jpg&quot; alt=&quot;2012-01-22_Canon_EOS_REBEL_T1i_IMG_11470_2fc999a&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-22_Canon_EOS_REBEL_T1i_IMG_11473_32dc801.jpg&quot; alt=&quot;2012-01-22_Canon_EOS_REBEL_T1i_IMG_11473_32dc801&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-22_Canon_EOS_REBEL_T1i_IMG_11474_8387840.jpg&quot; alt=&quot;2012-01-22_Canon_EOS_REBEL_T1i_IMG_11474_8387840&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-22_Canon_EOS_REBEL_T1i_IMG_11475_ee1eeae.jpg&quot; alt=&quot;2012-01-22_Canon_EOS_REBEL_T1i_IMG_11475_ee1eeae&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-22_Canon_EOS_REBEL_T1i_IMG_11476_9bc4044.jpg&quot; alt=&quot;2012-01-22_Canon_EOS_REBEL_T1i_IMG_11476_9bc4044&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-22_Canon_EOS_REBEL_T1i_IMG_11477_e32c4dd.jpg&quot; alt=&quot;2012-01-22_Canon_EOS_REBEL_T1i_IMG_11477_e32c4dd&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;2012-01-22_Canon_EOS_REBEL_T1i_IMG_11479_4104aa3.jpg&quot; alt=&quot;2012-01-22_Canon_EOS_REBEL_T1i_IMG_11479_4104aa3&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And of course, the brush that made it all possible:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-22_Canon_EOS_REBEL_T1i_IMG_11466_ee6f2e0.jpg&quot; alt=&quot;2012-01-22_Canon_EOS_REBEL_T1i_IMG_11466_ee6f2e0&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;day-23&quot;&gt;Day 23&lt;/h2&gt;

&lt;p&gt;Today was just assembly, mounting motors, running cables, and other fit and finish stuff.&lt;/p&gt;

&lt;p class=&quot;center center&quot;&gt;&lt;img src=&quot;2012-01-23_Canon_EOS_REBEL_T1i_IMG_11486_0197df7.jpg&quot; alt=&quot;2012-01-23_Canon_EOS_REBEL_T1i_IMG_11486_0197df7&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-23_Canon_EOS_REBEL_T1i_IMG_11487_11e4a6f.jpg&quot; alt=&quot;2012-01-23_Canon_EOS_REBEL_T1i_IMG_11487_11e4a6f&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-23_Canon_EOS_REBEL_T1i_IMG_11489_e50868a.jpg&quot; alt=&quot;2012-01-23_Canon_EOS_REBEL_T1i_IMG_11489_e50868a&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-23_Canon_EOS_REBEL_T1i_IMG_11492_b09c36a.jpg&quot; alt=&quot;2012-01-23_Canon_EOS_REBEL_T1i_IMG_11492_b09c36a&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-23_Canon_EOS_REBEL_T1i_IMG_11500_3ca568e.jpg&quot; alt=&quot;2012-01-23_Canon_EOS_REBEL_T1i_IMG_11500_3ca568e&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;2012-01-23_Canon_EOS_REBEL_T1i_IMG_11501_c229f73.jpg&quot; alt=&quot;2012-01-23_Canon_EOS_REBEL_T1i_IMG_11501_c229f73&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;day-25&quot;&gt;Day 25&lt;/h2&gt;

&lt;p&gt;Another day of assembly.&lt;/p&gt;

&lt;p class=&quot;center center&quot;&gt;&lt;img src=&quot;2012-01-25_Canon_EOS_REBEL_T1i_IMG_11503_2c4ddaf.jpg&quot; alt=&quot;2012-01-25_Canon_EOS_REBEL_T1i_IMG_11503_2c4ddaf&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;2012-01-25_Canon_EOS_REBEL_T1i_IMG_11504_1eb91f4.jpg&quot; alt=&quot;2012-01-25_Canon_EOS_REBEL_T1i_IMG_11504_1eb91f4&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I added an emergency stop button to the top, so you can stop it quickly.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-25_Canon_EOS_REBEL_T1i_IMG_11507_6693d08.jpg&quot; alt=&quot;2012-01-25_Canon_EOS_REBEL_T1i_IMG_11507_6693d08&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;And a power port on the back:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;2012-01-25_Canon_EOS_REBEL_T1i_IMG_11508_7c06947.jpg&quot; alt=&quot;2012-01-25_Canon_EOS_REBEL_T1i_IMG_11508_7c06947&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Cables are super important but easy to forget. I ran them axially out the shafts so that they could twist with minimal stress.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-25_Canon_EOS_REBEL_T1i_IMG_11510_6193025.jpg&quot; alt=&quot;2012-01-25_Canon_EOS_REBEL_T1i_IMG_11510_6193025&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;day-27&quot;&gt;Day 27&lt;/h2&gt;

&lt;p&gt;The robot is mostly assembled at this point. I added some rubber scuff strips to protect the edges because I expect the robot to fall quite a lot before I get the hopping algorithm dialed in.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-27_Canon_EOS_REBEL_T1i_IMG_11520_aecf5d7.jpg&quot; alt=&quot;2012-01-27_Canon_EOS_REBEL_T1i_IMG_11520_aecf5d7&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Final weight, sans batteries, is 8.3kg. Heavier than I would like, but it should still be technically possible.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-01-27_Canon_EOS_REBEL_T1i_IMG_11527_7c8c47f.jpg&quot; alt=&quot;2012-01-27_Canon_EOS_REBEL_T1i_IMG_11527_7c8c47f&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;day-28&quot;&gt;Day 28&lt;/h2&gt;

&lt;p&gt;No actual robot construction today. Instead, I built a moveable backboard out of some lumber, drew 10cm squares on it, and positioned the robot over the treadmill it runs on.&lt;/p&gt;

&lt;p class=&quot;center center&quot;&gt;&lt;img src=&quot;2012-01-28_Canon_EOS_REBEL_T1i_IMG_11533_d60c986.jpg&quot; alt=&quot;2012-01-28_Canon_EOS_REBEL_T1i_IMG_11533_d60c986&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;2012-01-28_Canon_EOS_REBEL_T1i_IMG_11537_e8d2a00.jpg&quot; alt=&quot;2012-01-28_Canon_EOS_REBEL_T1i_IMG_11537_e8d2a00&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;day-65&quot;&gt;Day 65&lt;/h2&gt;

&lt;p&gt;At this point, I had spent a whole month writing software, trying to tune the balance algorithm I had used in simulation, reverse-engineering the UDP packet structure of the Vicon camera system, and discovering bugs in the motor electronics control software. You can see the Vicon camera marker reflectors that I used to orient the robot in 3D. I waaaaay underestimated the amount of time it would take to tune the control systems and account for all of the communication lag. I also way underestimated the number of sources of friction and inefficiency; I was getting only about half of the toqrue that I expected from the motors.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-03-10_Canon_EOS_REBEL_T1i_IMG_12036_beb9e28.jpg&quot; alt=&quot;2012-03-10_Canon_EOS_REBEL_T1i_IMG_12036_beb9e28&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;During testing, I added a big foam “heel” to the robot, since that place was striking the ground occasionally with a lot more force than I intended.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-03-10_Canon_EOS_REBEL_T1i_IMG_12037_f727d37.jpg&quot; alt=&quot;2012-03-10_Canon_EOS_REBEL_T1i_IMG_12037_f727d37&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The scuff pads have also gotten some wear:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-03-10_Canon_EOS_REBEL_T1i_IMG_12066_42d5ebb.jpg&quot; alt=&quot;2012-03-10_Canon_EOS_REBEL_T1i_IMG_12066_42d5ebb&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As has the rubber sports ball I used as the foot tip:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-03-10_Canon_EOS_REBEL_T1i_IMG_12068_63fc50a.jpg&quot; alt=&quot;2012-03-10_Canon_EOS_REBEL_T1i_IMG_12068_63fc50a&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Other things learned during testing is that, unsurprisingly, a foam and fiberglass box is a great heat insulator. I added some small fans to pull air into the body and thigh to keep the motors and electronics cool.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-04-20_Canon_EOS_REBEL_T1i_IMG_12079_d18591f.jpg&quot; alt=&quot;2012-04-20_Canon_EOS_REBEL_T1i_IMG_12079_d18591f&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-04-20_Canon_EOS_REBEL_T1i_IMG_12082_3bcf8a9.jpg&quot; alt=&quot;2012-04-20_Canon_EOS_REBEL_T1i_IMG_12082_3bcf8a9&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The robot usually looked like this in operation. I added some bungee cables at the top to make the falls less hard.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-04-22_Canon_EOS_REBEL_T1i_IMG_12087_8dd1f37.jpg&quot; alt=&quot;2012-04-22_Canon_EOS_REBEL_T1i_IMG_12087_8dd1f37&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion:&lt;/h2&gt;

&lt;p&gt;To my great disappointment, it didn’t work! Even after all of this work making a light structure, and as much tuning as I could do, the robot was still too heavy to jump properly. Given the 111W motors, had I more properly accounted for the motor inefficiency and backboard friction, a more realistic estimate on a reasonable jumping weight would have been 4-6kg instead of 8-10kg. Thankfully, I had enough work with the compliant actuators and other work that I was able to complete my Ph.D. even without the robot hopping. And the spring mechanism was a great success, even if the hopping robot itself was not.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-04-26_Canon_EOS_450D_IMG_0040_35da09c.jpg&quot; alt=&quot;2012-04-26_Canon_EOS_450D_IMG_0040_35da09c&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In closing, I would like to thank the Genovese for having shared their beautiful city with me for those years, and thank whatever Italian spirit of energy and passion kept me motivated during this fun and unusual project. I’m still just thankful that I had the experience.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-08-24_Canon_PowerShot_SD1200_IS_IMG_3377_4624bd8.jpg&quot; alt=&quot;2012-08-24_Canon_PowerShot_SD1200_IS_IMG_3377_4624bd8&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;addendum-tutorial-photos&quot;&gt;Addendum: Tutorial Photos&lt;/h2&gt;

&lt;p&gt;Here are some other photos that you may find helpful.&lt;/p&gt;

&lt;p&gt;Let’s start with the actual process of doing a fiberglass lay-up. When putting fiberglass onto a mold (or glass in this case), I find it helpful to paint the mold itself with epoxy to ensure there are no air bubbles trapped under the fabric.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-02-12_FinePix_S5700_S700_wet-resin-on-glass_e09103a.jpg&quot; alt=&quot;2012-02-12_FinePix_S5700_S700_wet-resin-on-glass_e09103a&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you wet out the fabric (using the tip of the brush to “stipple” as needed), you will see the fiberglass become clear.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-02-12_FinePix_S5700_S700_wet-brush-second-layer_057e8d6.jpg&quot; alt=&quot;2012-02-12_FinePix_S5700_S700_wet-brush-second-layer_057e8d6&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-02-12_FinePix_S5700_S700_wet-brush-out-fabric_ee6b9c8.jpg&quot; alt=&quot;2012-02-12_FinePix_S5700_S700_wet-brush-out-fabric_ee6b9c8&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;During a layup, it’s a good idea to have various things handy. A marker, lots of cups, a squeege, measuring syringes, disposable paintbrushes, and roller tools to help squeeze out excess resin. But the most essential tools are plastic gloves and tons and tons of paper towels to help clean up, and a timer to let you know how many minutes until your resin gels.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-02-12_FinePix_S5700_S700_wet-layup-supplies_7dd1f7f.jpg&quot; alt=&quot;2012-02-12_FinePix_S5700_S700_wet-layup-supplies_7dd1f7f&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s usually a simple matter to peel 1-3 layers of carbon fiber off of a glass plate or mold. However, if you use more than 3 layers, or if the part is curved in a complicated way, the part will be more rigid and more difficult to remove if you have not waxed the glass properly.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-02-12_FinePix_S5700_S700_wet-peel-off-carbon_32af84f.jpg&quot; alt=&quot;2012-02-12_FinePix_S5700_S700_wet-peel-off-carbon_32af84f&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Some people just wonder what various fabrics look like when cured. From left to right, some samples of fiberglass, kevlar, and carbon fiber, in thickenesses of 1, 2, and 3 plys of fabric.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-02-07_FinePix_S5700_S700_trimmed-samples_04adea4.jpg&quot; alt=&quot;2012-02-07_FinePix_S5700_S700_trimmed-samples_04adea4&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Other people ask about core materials. As an experiment, I made a test piece of composite on a sheet of glass, and put three different cores on it. From left to right, nomex honeycomb, pvc foam, and styrofoam. For thick cores like this, it’s important to bevel the edges as I did. Note that the layer on the glass is already cured. It’s also important to note that you should add tiny pinholes through the foam, every 2cm or so, to help resin trapped under the foam cores flow through it as the vacuum pressure squeezes out any excess resin underneath the core material.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-02-12_FinePix_S5700_S700_cores-three-types_a74a5f8.jpg&quot; alt=&quot;2012-02-12_FinePix_S5700_S700_cores-three-types_a74a5f8&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After applying another layer of carbon fiber and using a vacuum bag, you get this result:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-02-12_FinePix_S5700_S700_cores-with-backside_0df68b3.jpg&quot; alt=&quot;2012-02-12_FinePix_S5700_S700_cores-with-backside_0df68b3&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After pulling it off the glass and flipping it over, the test piece looks like this:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-02-12_FinePix_S5700_S700_cores-frontside_ca4066b.jpg&quot; alt=&quot;2012-02-12_FinePix_S5700_S700_cores-frontside_ca4066b&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Another trick you can use that is sometimes helpful is to pour resin over fabric, between two sheets of plastic. Then use a squeegee to wet out the fabric, and you have “homemade prepreg” (fabric with pre-impregnated resin) that will last for 30 minutes or so. Use some scissors to cut out a little piece of it and directly apply it to those hard-to-reach areas.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-02-12_FinePix_S5700_S700_poor-mans-prepreg_b5d40ad.jpg&quot; alt=&quot;2012-02-12_FinePix_S5700_S700_poor-mans-prepreg_b5d40ad&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;An example of a vacuum bag setup. The gummy, clay-like vacuum bag tape is expensiev, but well worth it for removing leaks. Try at all costs to keep resin out of your vacuum hose.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-02-12_FinePix_S5700_S700_vacuum-bag_ce76fa0.jpg&quot; alt=&quot;2012-02-12_FinePix_S5700_S700_vacuum-bag_ce76fa0&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A close-up of the vacuum pump I used.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-02-12_FinePix_S5700_S700_vacuum-pump_06c25f5.jpg&quot; alt=&quot;2012-02-12_FinePix_S5700_S700_vacuum-pump_06c25f5&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here’s a sample piece of the Nomex honeycomb core after being cut out. It makes a really, really light and stiff part. This thing is just 1 layer of carbon and some paper honexcomb, and it’s just barely breakable with your hands. If the edges were sealed (leaving the nomex exposed to the air is a big no-no) as would be common in a non-sample part, it would be even harder to break or crush the core.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-02-12_FinePix_S5700_S700_weighing-honeycomb_0df929e.jpg&quot; alt=&quot;2012-02-12_FinePix_S5700_S700_weighing-honeycomb_0df929e&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Kevlar is surprisingly resin-hungry, and absorbs a lot of epoxy in my experience. Even just a single layer of kevlar weighs as much as two layers of carbon fiber over nomex honeycomb. If you can stand the extra weight, though, xbKevlar is decidedly “tougher” and less brittle.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;2012-02-12_FinePix_S5700_S700_weighing-kevlar_f3ad879.jpg&quot; alt=&quot;2012-02-12_FinePix_S5700_S700_weighing-kevlar_f3ad879&quot; title=&quot;Desc.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If this article interested you, perhaps look at the &lt;a href=&quot;../../about/frp-seminar-slides.pdf&quot;&gt;FRP tutorial slides I made&lt;/a&gt;, or watch the &lt;a href=&quot;https://youtu.be/x9cK6zSe-NQ&quot;&gt;tutorial video&lt;/a&gt;.&lt;/p&gt;

&lt;iframe width=&quot;708&quot; height=&quot;398&quot; src=&quot;https://www.youtube.com/embed/x9cK6zSe-NQ&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><category term="robot" /><category term="robotics" /><category term="composites" /><category term="fiberglass" /><category term="carbon fiber" /><category term="jimi" /><summary type="html">This article describes the progress of a fiber-reinforced polymer monopod robot that I built over a period of about 30 days. My hope is that seeing some of the successes and failures I encountered will help you build your own composite robots. Foam and fiberglass are very versatile materials that are just as accessible to garage-level workshops as they are to research institutions, as I hope you will see.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="{&quot;feature&quot;=&gt;nil}" /></entry><entry><title type="html">Loading CSVs in Clojure</title><link href="/blog/loading-csvs-in-clojure/" rel="alternate" type="text/html" title="Loading CSVs in Clojure" /><published>2019-02-16T00:00:00-08:00</published><updated>2019-02-16T00:00:00-08:00</updated><id>/blog/loading-csvs-in-clojure</id><content type="html" xml:base="/blog/loading-csvs-in-clojure/">&lt;p&gt;Loading CSVs in Clojure is really easy using &lt;code class=&quot;highlighter-rouge&quot;&gt;clojure.data.csv&lt;/code&gt;. Depending on what you will do with the data, you can either represent it in tabular form (as a vector of vectors), or as a list of hashmaps. Both approaches have their advantages and disadvantages, and here are some very stock functions for how to achieve that:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(ns net.roboloco.csvs
  &quot;Functions for loading and saving CSVs.&quot;
  (:require [clojure.data.csv :as csv]))

(defn empty-string-to-nil
  &quot;Returns a nil if given an empty string S, otherwise returns S.&quot;
  [s]
  (if (and (string? s) (empty? s))
    nil
    s))

(defn dissoc-nils
  &quot;Drops keys with nil values, or nil keys, from the hashmap H.&quot;
  [h]
  (into {} (filter (fn [[k v]] (and v k)) h)))


(defn load-csv
  &quot;Returns a data structure loaded from a CSV file at FILEPATH.&quot;
  [filepath]
  (with-open [reader (clojure.java.io/reader filepath)]
    (-&amp;gt;&amp;gt; (csv/read-csv reader)
         (map (fn [row] (map empty-string-to-nil row)))
         (doall))))

(defn save-csv
  &quot;Saves a vector of vectors DATA (i.e. a CSV) to disk at FILEPATH. &quot;
  [vec-of-vecs filepath]
  (with-open [writer (clojure.java.io/writer filepath)]
    (csv/write-csv writer vec-of-vecs)))

(defn tabular-&amp;gt;maps
  &quot;Converts a vector of vectors into a vector of maps. Assumes that the
  first row of the CSV is a header that contains column names.&quot;
  [tabular]
  (let [header (first tabular)]
    (-&amp;gt; (map zipmap (repeat header) (rest tabular))
        (mapv dissoc-nils))))

(defn maps-&amp;gt;tabular
  &quot;Converts a vector of vectors into a vector of maps.&quot;
  [rowmaps]
  (let [columns (vec (sort (into #{} (map name (flatten (map keys rowmaps))))))]
    (vec (conj (for [row rowmaps]
              (vec (for [col columns]
                     (str (get row col &quot;&quot;)))))
            columns))))

(comment

  (def data (tabular-&amp;gt;maps (load-csv &quot;/path/to/mycsv.csv&quot;)))
  
  (save-csv! (maps-&amp;gt;tabular data) &quot;/some/other/path.csv&quot;)

  )
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Note that the above functions are not lazy, which is a good choice for CSVs 90% of the time. If you find yourself working with very large datasets that cannot be loaded all at once, you might want to adjust &lt;code class=&quot;highlighter-rouge&quot;&gt;load-csv&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;tabular-&amp;gt;maps&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;maps-&amp;gt;tabular&lt;/code&gt; to work lazily and incrementally.&lt;/p&gt;</content><category term="clojure" /><category term="csv" /><summary type="html">Loading CSVs in Clojure is really easy using clojure.data.csv. Depending on what you will do with the data, you can either represent it in tabular form (as a vector of vectors), or as a list of hashmaps. Both approaches have their advantages and disadvantages, and here are some very stock functions for how to achieve that:</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="{&quot;feature&quot;=&gt;nil}" /></entry><entry><title type="html">A Localhost Swagger Editor</title><link href="/blog/localhost-swagger-editor/" rel="alternate" type="text/html" title="A Localhost Swagger Editor" /><published>2019-02-14T00:00:00-08:00</published><updated>2019-02-14T00:00:00-08:00</updated><id>/blog/localhost-swagger-editor</id><content type="html" xml:base="/blog/localhost-swagger-editor/">&lt;p&gt;I’ve always edited swagger docs using the online editor, but thanks to docker, you may run it locally with equal ease:&lt;/p&gt;

&lt;p&gt;From &lt;a href=&quot;https://github.com/swagger-api/swagger-editor&quot;&gt;https://github.com/swagger-api/swagger-editor&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker pull swaggerapi/swagger-editor
docker run -d -p 80:8080 swaggerapi/swagger-editor
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then browse to port 80 on localhost. If you want more than one tab to work in, launch a few more containers on ports 81, 82, and 83.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -d -p 81:8080 swaggerapi/swagger-editor
docker run -d -p 82:8080 swaggerapi/swagger-editor
docker run -d -p 83:8080 swaggerapi/swagger-editor
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I can’t believe I never thought of this before.&lt;/p&gt;</content><category term="docker" /><category term="swagger" /><summary type="html">I’ve always edited swagger docs using the online editor, but thanks to docker, you may run it locally with equal ease:</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="{&quot;feature&quot;=&gt;nil}" /></entry><entry><title type="html">Connecting a Clojure REPL to a PostgreSQL Docker Container</title><link href="/blog/docker-postgres/" rel="alternate" type="text/html" title="Connecting a Clojure REPL to a PostgreSQL Docker Container" /><published>2019-01-24T00:00:00-08:00</published><updated>2019-01-24T00:00:00-08:00</updated><id>/blog/docker-postgres</id><content type="html" xml:base="/blog/docker-postgres/">&lt;p&gt;In this tutorial, we’ll launch Postgres (a.k.a. PostgreSQL) in a Docker container, create a Postgres database, and connect to it from a Clojure REPL. Postgres is a great open source SQL database with a long history, and is a good choice for many small-to-medium scale projects.&lt;/p&gt;

&lt;p&gt;First, we need to download the official Postgres image, named &lt;code class=&quot;highlighter-rouge&quot;&gt;postgres&lt;/code&gt;, create a new container, and start the image running in that container. Remember, in the parlance of Docker, “images” are the recipe and “containers” are the cake(s) made from that recipe. By default, Docker containers can make connections to the outside world, but the outside world cannot connect to containers. So we need to “publish” a port that has been exposed in the Docker image.&lt;/p&gt;

&lt;p&gt;Downloading the docker image, instantiating it, setting a password, and publishing a port can all be done in a single command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run  --name my-postgres-container --env POSTGRES_PASSWORD=mysecretpassword -p 5432:5432 --detach postgres
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;where&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-p 5432:5432 Publish port 5432 in the container as 5432 on localhost, so you can connect
-name        Gives a name to this container
-env    Environment variable(s)
-detach Disconnect terminal
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;An important note, as I mentioned in the article on &lt;a href=&quot;../clojure-apps-in-docker&quot;&gt;using Docker to deploy Clojure apps&lt;/a&gt;, is that the &lt;code class=&quot;highlighter-rouge&quot;&gt;docker run&lt;/code&gt; command &lt;em&gt;creates&lt;/em&gt; a new container – it “bakes a new cake”. If you want to launch a container you have already baked, you’ll use the &lt;code class=&quot;highlighter-rouge&quot;&gt;docker start&lt;/code&gt; command instead, as we’ll see below.&lt;/p&gt;

&lt;p&gt;You can check that the Docker container is running with&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker container ls
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;or more succinctly&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker ps
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Next, let’s use another Docker trick to create a second &lt;code class=&quot;highlighter-rouge&quot;&gt;postgres&lt;/code&gt; cake, this time running the &lt;code class=&quot;highlighter-rouge&quot;&gt;psql&lt;/code&gt; command, and &lt;code class=&quot;highlighter-rouge&quot;&gt;link&lt;/code&gt; it to the other container. We want this container to be deleted when we close it (&lt;code class=&quot;highlighter-rouge&quot;&gt;--rm&lt;/code&gt;), and to be linked to the &lt;code class=&quot;highlighter-rouge&quot;&gt;my-postgres-container&lt;/code&gt; so that it can access the server we just started. It is interesting that we can use &lt;code class=&quot;highlighter-rouge&quot;&gt;psql&lt;/code&gt; without having it installed on our local machine; we’re using the command that is inside a container!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -it --rm --link my-postgres-container:postgres postgres psql -h postgres -U postgres
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In that terminal, let’s now create a test database:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE DATABASE testdb;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You may now hit control-d to quit the terminal if you want to close it. In my case, I often leave it open for debugging.&lt;/p&gt;

&lt;p&gt;Make a new Clojure project, and be sure to add these lines to the &lt;code class=&quot;highlighter-rouge&quot;&gt;:dependencies&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;             [org.clojure/java.jdbc &quot;0.7.9&quot;]
             [org.postgresql/postgresql &quot;42.2.5&quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now spin a up a Clojure REPL in that project, and run the following commands, one at a time, and note the output of each.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(ns mytest (:require [clojure.java.jdbc :as sql]))

(def db-spec {:dbtype &quot;postgresql&quot; :dbname &quot;testdb&quot; :user &quot;postgres&quot; :password &quot;mysecretpassword&quot;})

(sql/query db-spec [&quot;SELECT 3*5 AS result&quot;])

(sql/db-do-commands db-spec (sql/create-table-ddl :testing [[:data :text]]))

(sql/insert! db-spec :testing {:data &quot;hahaha&quot;})

(sql/insert! db-spec :testing {:data &quot;lol&quot;})

(sql/query db-spec [&quot;SELECT * FROM testing&quot;])
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now it’s time to develop that app to your heart’s content.&lt;/p&gt;

&lt;p&gt;When you are done with your app, you can stop your container with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker container stop my-postgres-container
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;At later times, you can restart the container, and use its state, with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker container start my-postgres-container
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can delete the stopped container with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker container rm my-postgres-container
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Note that if you want a second container for postgres – say, for a different project – you could make a second container called “my-postgres-container2” using the &lt;code class=&quot;highlighter-rouge&quot;&gt;docker run&lt;/code&gt; command near the top of this. Make as many containers as you need, and start and stop them as required.&lt;/p&gt;

&lt;p&gt;Keeping the database in the container is fine during first steps and testing, but it can be slow and wasteful of disk. The reccommended solution is use &lt;a href=&quot;https://docs.docker.com/storage/volumes/&quot;&gt;Docker Volumes&lt;/a&gt; to be able to upgrade the Postgres version separately from the data itself.&lt;/p&gt;

&lt;p&gt;An example of how to do that is in this case is:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker volume create --name postgresvol

docker run  --name my-postgres-container --env POSTGRES_PASSWORD=mysecretpassword -p 5432:5432 --detach -v postgresvol:/var/lib/postgresql/data postgres
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://clojure-doc.org/articles/ecosystem/java_jdbc/home.html&quot;&gt;The Clojure JDBC docs&lt;/a&gt; were a helpful starting point for learning how to use JDBC.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://clojure-doc.org/articles/ecosystem/java_jdbc/using_sql.html&quot;&gt;The Clojure JDBC SQL page&lt;/a&gt; is also very good.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/get-started/&quot;&gt;The Docker Getting Started Guide&lt;/a&gt;. Docker documentation is detailed and helpful. The getting started guide is decent, but not as example-heavy and in-depth as I would have wanted.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/v17.09/engine/userguide/networking/default_network/binding/&quot;&gt;Docker Documentation on Binding Container Ports to the Host&lt;/a&gt;. This has a critical quote that helped me on a related problem: “By default Docker containers can make connections to the outside world, but the outside world cannot connect to containers.” Even though I had exposed the ports in docker images with “EXPOSE”, they were not actually be reachable from the host unless you launch the container with &lt;code class=&quot;highlighter-rouge&quot;&gt;docker run -P ...&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;docker run -p 5432:5432&lt;/code&gt;. Kind of a gotcha for newbies, I feel.&lt;/li&gt;
&lt;/ul&gt;</content><category term="clojure" /><category term="docker" /><category term="devops" /><summary type="html">In this tutorial, we’ll launch Postgres (a.k.a. PostgreSQL) in a Docker container, create a Postgres database, and connect to it from a Clojure REPL. Postgres is a great open source SQL database with a long history, and is a good choice for many small-to-medium scale projects.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="{&quot;feature&quot;=&gt;nil}" /></entry><entry><title type="html">Packaging and Running Clojure Apps Locally with Docker</title><link href="/blog/clojure-apps-in-docker/" rel="alternate" type="text/html" title="Packaging and Running Clojure Apps Locally with Docker" /><published>2019-01-23T00:00:00-08:00</published><updated>2019-01-23T00:00:00-08:00</updated><id>/blog/clojure-apps-in-docker</id><content type="html" xml:base="/blog/clojure-apps-in-docker/">&lt;p&gt;This is just a simple tutorial on how to package and deploy a Clojure application to a Docker file, which can then be deployed locally, on a server, or in the cloud.&lt;/p&gt;

&lt;p&gt;We are going to follow a pretty classic pattern in Clojure:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;em&gt;DEVELOP&lt;/em&gt;. In this case, we’ll use &lt;code class=&quot;highlighter-rouge&quot;&gt;lein repl&lt;/code&gt; and emacs (cider). For a mixed Clojure/Clojurescript app, &lt;code class=&quot;highlighter-rouge&quot;&gt;lein figwheel&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;BUILD UBERJAR&lt;/em&gt;. Very simply, &lt;code class=&quot;highlighter-rouge&quot;&gt;lein uberjar&lt;/code&gt; is all we need to do to package all java dependencies and app resources into a single file.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;BUILD DOCKER IMAGE&lt;/em&gt;. Because the uberjar does most of the work for us, we just need a Java JRE and the uberjar.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;DEPLOY&lt;/em&gt;. If you are running your own a production system, Kubernetes would be a good choice here. Amazon, Google, Microsoft all have their own container services as well.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;develop&quot;&gt;Develop&lt;/h2&gt;

&lt;p&gt;It’s probably not the latest and greatest way of making a front end and back end, but I find for many of my small apps &lt;a href=&quot;https://reagent-project.github.io/&quot;&gt;Reagent&lt;/a&gt; for the front end and &lt;a href=&quot;https://github.com/ring-clojure&quot;&gt;Ring&lt;/a&gt; for the back end are enough. Creating a project is simple:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lein new reagent myapp +cider
cd myapp
git init
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And then you just develop like normal until you are happy with the way your app works. The only slightly tricky thing to remember when rolling up an app that you will put in a Docker container is that your web server should be configured to listen on 0.0.0.0 (which means to listen on all interfaces). Typically you just add &lt;code class=&quot;highlighter-rouge&quot;&gt;:host &quot;0.0.0.0&quot;&lt;/code&gt; as an argument to whatever webserver you are starting, &lt;code class=&quot;highlighter-rouge&quot;&gt;jetty&lt;/code&gt; in this case.&lt;/p&gt;

&lt;h2 id=&quot;build-the-uberjar&quot;&gt;Build the UberJar&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;lein&lt;/code&gt; makes packaging up a web server, front end, and assets all together extremely easy:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lein uberjar
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The JAR file will appear in the &lt;code class=&quot;highlighter-rouge&quot;&gt;target/&lt;/code&gt; directory.  If you need to control the name of the output uberjar, adjust the &lt;code class=&quot;highlighter-rouge&quot;&gt;:uberjar-name&lt;/code&gt; key in your &lt;code class=&quot;highlighter-rouge&quot;&gt;project.clj&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;build-docker-image&quot;&gt;Build Docker Image&lt;/h2&gt;

&lt;p&gt;The steps for building a Docker image are stored in a special file called &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;, which I typically place in the root directory of my project repo. Since all the assets are already stored in the uberjar, the contents of &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; are simple:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Use https://hub.docker.com/_/oracle-serverjre-8
FROM java:8-alpine

# Make a directory
RUN mkdir -p /app
WORKDIR /app

# Copy only the target jar over
COPY app-standalone.jar .

# Open the port
EXPOSE 3000

# Run the JAR
CMD java -jar app-standalone.jar
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;During the build process, Docker needs a “context” directory that contains all of the files needed to build the image. Since we have already packaged assets in the JAR, and compiled the source code into bytecode, we do not need to copy the source over in the build process. We can let the Docker build process use the “target” directory only. This can speed up the Docker build, and saves space because it is not copying resources twiec. The only downside is that it means we have to explicitly specify the Dockerfile to use explicitly, and explicitly specify the directory to use as the “context” directory. Run this from the root of the project directory:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker build --tag myapp -f Dockerfile target
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And that’s it!&lt;/p&gt;

&lt;h2 id=&quot;deploy-locally-to-test&quot;&gt;Deploy Locally to Test&lt;/h2&gt;

&lt;p&gt;If your app has no state (and it shouldn’t, if you are making a &lt;a href=&quot;https://12factor.net&quot;&gt;12-factor app&lt;/a&gt;, you can now create a new container from your docker image, passing it whatever environment varibales you need, and exposing internal port 3000 to external port 3000:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run --name my-app-container --env MY_ENV_VAR=some_value -p 3000:3000 -rm myapp
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Check to see that it is running:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker containers ls
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;or more concisely,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker ps
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I still find it slightly misleading that &lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt; actually means “create and start a container” in the language of Docker-ese. Stopping the container will not delete it in general, and that often means containers accumulating silently in the background. Hence the &lt;code class=&quot;highlighter-rouge&quot;&gt;-rm&lt;/code&gt; flag, which tells Docker to delete the container when it is done.&lt;/p&gt;

&lt;p&gt;If you don’t want the container to delete itself when done, omit the &lt;code class=&quot;highlighter-rouge&quot;&gt;-rm&lt;/code&gt; option, and maybe consider instead the &lt;code class=&quot;highlighter-rouge&quot;&gt;--detach&lt;/code&gt; option so you get your shell back. If you aren’t building a new container regularly and the container is lying around, starting and stopping the named container is as simple as you would expect:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker container start my-app-container
docker container stop my-app-container
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;resources-and-interesting-reading&quot;&gt;Resources and Interesting Reading&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.jessfraz.com/post/docker-containers-on-the-desktop/&quot;&gt;https://blog.jessfraz.com/post/docker-containers-on-the-desktop/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/get-started/&quot;&gt;https://docs.docker.com/get-started/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kubernetes.io/docs/getting-started-guides/ubuntu/installation/&quot;&gt;https://kubernetes.io/docs/getting-started-guides/ubuntu/installation/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://marketplace.automic.com/details/clojure-official-docker-image&quot;&gt;https://marketplace.automic.com/details/clojure-official-docker-image&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@mprokopov/deployment-of-clojure-app-to-production-with-docker-9dbffeac6ef5&quot;&gt;https://medium.com/@mprokopov/deployment-of-clojure-app-to-production-with-docker-9dbffeac6ef5&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@divyum/building-a-simple-http-server-in-clojure-part-iii-dockerizing-clojure-application-1f53a6a90af2&quot;&gt;https://medium.com/@divyum/building-a-simple-http-server-in-clojure-part-iii-dockerizing-clojure-application-1f53a6a90af2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/develop/develop-images/dockerfile_best-practices/&quot;&gt;https://docs.docker.com/develop/develop-images/dockerfile_best-practices/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://devcenter.heroku.com/articles/clojure-web-application&quot;&gt;https://devcenter.heroku.com/articles/clojure-web-application&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="clojure" /><category term="docker" /><category term="devops" /><summary type="html">This is just a simple tutorial on how to package and deploy a Clojure application to a Docker file, which can then be deployed locally, on a server, or in the cloud.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="{&quot;feature&quot;=&gt;nil}" /></entry><entry><title type="html">Layered Tetrahedral Geometric Structures</title><link href="/blog/layered-dual-geometric-structures/" rel="alternate" type="text/html" title="Layered Tetrahedral Geometric Structures" /><published>2018-02-25T00:00:00-08:00</published><updated>2018-02-25T00:00:00-08:00</updated><id>/blog/layered-dual-geometric-structures</id><content type="html" xml:base="/blog/layered-dual-geometric-structures/">&lt;p&gt;This article describes another iteration of the dome-like structure that I &lt;a href=&quot;../pentakis-dodecahedron-dome&quot;&gt;discussed a few months ago&lt;/a&gt;. I still don’t have a good vocabulary for describing why I think these things are neat, except to say that I somehow find it relaxing to work on toy engineering problems once or twice a month. I guess &lt;em&gt;de gustibus non est disputandum&lt;/em&gt; – “there’s no accounting for (bad) taste!”&lt;/p&gt;

&lt;p&gt;Lately, I have been playing around with simple structures that are subject to some unusual but not pointless constraints. Here are the ones I played with for this design:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;How lightweight could you make a building? All other things being equal, lighter implies fewer materials, lower cost, and less ecological impact. To make something light, you must use what little material there is in a structurally strong fashion.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How simple could the constituent pieces of the structure be? Could they be made of a few simple shapes, repeated over and over? By re-using the same shape over and over again, production becomes more efficient because a miniature economy of scale is created.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Could you make temporary housing that could be flat-packed into the bed of a truck? This might be useful when you want something stronger and warmer than a tent, but less permanent than a house.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;On to the structure itself! A teaser:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;layered-dual-poly-09.jpg&quot; alt=&quot;layered-dual-poly-09&quot; title=&quot;The external pentagular skin, mostly covered.&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;background&quot;&gt;Background&lt;/h1&gt;

&lt;p&gt;Previously, when I was working on the &lt;a href=&quot;../pentakis-dodecahedron-dome&quot;&gt;reinforced pentakis dodecahedron dome&lt;/a&gt; toy concept, I mostly just followed the engineering tradition of using triangles and tetrahedra to create light and strong truss structures. I did not spend time deeply studying what the list of possible starting polyhedra were, and at the end of the project there was one thing in my mind that was not really resolved:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Are there other shapes that are closely-related to the pentakis dodecahedron, but that are simpler to construct or have more desirable properties? How many possible shapes could there be, and how would I know that I have found them all?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Previously, I started with the icosahedron and then connected it to a triakis icosahedron and pentakis dodecahedron without really understanding from whence these solids come, or what properties they have. Let’s go a little further this time into understanding the properties of regular polyhedra.&lt;/p&gt;

&lt;h1 id=&quot;platonic-catalan-and-archimedian-solids&quot;&gt;Platonic, Catalan, and Archimedian Solids&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;../pentakis-dodecahedron-dome&quot;&gt;Last time&lt;/a&gt;, I briefly discussed the 5 platonic solids, which you may remember are the same shapes as dice:&lt;/p&gt;

&lt;table class=&quot;center&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;Platonic Solid&lt;/th&gt;
      &lt;th&gt;Vertex Figure&lt;/th&gt;
      &lt;th&gt;Face&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;platonic/Tetrahedron.gif&quot; alt=&quot;Tetrahedron&quot; title=&quot;Tetrahedron&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;Tetrahedron&lt;/td&gt;
      &lt;td&gt;3.3.3&lt;/td&gt;
      &lt;td&gt;Triangle&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;platonic/Hexahedron.gif&quot; alt=&quot;Hexahedron&quot; title=&quot;Hexahedron&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;Cube&lt;/td&gt;
      &lt;td&gt;4.4.4&lt;/td&gt;
      &lt;td&gt;Square&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;platonic/Octahedron.gif&quot; alt=&quot;Octahedron&quot; title=&quot;Octahedron&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;Octahedron&lt;/td&gt;
      &lt;td&gt;3.3.3.3&lt;/td&gt;
      &lt;td&gt;Triangle&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;platonic/Dodecahedron.gif&quot; alt=&quot;Dodecahedron&quot; title=&quot;Dodecahedron&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;Dodecahedron&lt;/td&gt;
      &lt;td&gt;5.5.5&lt;/td&gt;
      &lt;td&gt;Pentagon&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;platonic/Icosahedron.gif&quot; alt=&quot;Icosahedron&quot; title=&quot;Icosahedron&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;Icosahedron&lt;/td&gt;
      &lt;td&gt;3.3.3.3.3&lt;/td&gt;
      &lt;td&gt;Triangle&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;What’s a &lt;em&gt;vertex figure&lt;/em&gt;, I hear you ask? It is a way to unambiguously define regular polyhedra. If you pick any vertex on the regular polyhedra, and then count the number of sides on each face that touches that vertex, moving in a clockwise or counterclockwise fashion, you will get a sequence of numbers that we call the vertex figure. For example, each corner of the cube touches three squares, so we can call it 4.4.4. We are going to use vertex figures to help us keep track of complicated shapes rather than memorize scores of names.&lt;/p&gt;

&lt;p&gt;There is another advantage to using vertex figures: they are unambigious. In fact, you can use vertex figures to find shapes described by nerds in other countries, even if you don’t speak their language, because the language of math is universal.&lt;/p&gt;

&lt;p&gt;You may remember that Platonic solids have several important properties:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Every edge is the same length.&lt;/li&gt;
  &lt;li&gt;Every face has the same number of sides.&lt;/li&gt;
  &lt;li&gt;Every face’s interior angles are the equal&lt;/li&gt;
  &lt;li&gt;Every vertex lies on the surface of a sphere.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These constraints are so restrictive that there are only five solids that meet all the criteria. But what would happen if we removed one or more of those constraints? As it turns out, by relaxing the constraints we can create two new families of solids: the &lt;strong&gt;Archimedian solids&lt;/strong&gt; and the &lt;strong&gt;Catalan solids&lt;/strong&gt;.&lt;/p&gt;

&lt;table class=&quot;center&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;All Edge&lt;/th&gt;
      &lt;th&gt;All Faces&lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;Vertices on&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;Lengths Equal?&lt;/th&gt;
      &lt;th&gt;Same?&lt;/th&gt;
      &lt;th&gt;Quantity&lt;/th&gt;
      &lt;th&gt;Sphere?&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Platonic&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;Always&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Archimedian&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;13&lt;/td&gt;
      &lt;td&gt;Not always&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Catalan&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;13&lt;/td&gt;
      &lt;td&gt;Not always&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;We’ll now go into more details on each of those families of solids. As a spoiler to all you nerds out there, Archimedian and Catalan solids are mathematically dual to each other, meaning that for each Catalan solid with X faces and Y vertices, there will be an Archimedian solid with Y faces and X vertices.&lt;/p&gt;

&lt;h1 id=&quot;archimedian-solids&quot;&gt;Archimedian Solids&lt;/h1&gt;

&lt;p&gt;First described by the greek mathematician Archimedes, &lt;strong&gt;the Archimedian solids are the set of polyhedra in which all edges are the same length&lt;/strong&gt;. If you are gluing together equal-length matchsticks, there are only 13 possible shapes (or 15, if you count the chiral variants as different) that you can make:&lt;/p&gt;

&lt;table class=&quot;center&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;Archimedian Solid&lt;/th&gt;
      &lt;th&gt;Vertex Fig&lt;/th&gt;
      &lt;th&gt;Symmetry&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;archimedian/3.6.6.truncatedtetrahedron.gif&quot; alt=&quot;3.6.6.truncatedtetrahedron&quot; title=&quot;3.6.6.truncatedtetrahedron.gif&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;Truncated tetrahedron&lt;/td&gt;
      &lt;td&gt;3.6.6&lt;/td&gt;
      &lt;td&gt;Td&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;archimedian/3.4.3.4.cuboctahedron.gif&quot; alt=&quot;3.4.3.4.cuboctahedron&quot; title=&quot;3.4.3.4.cuboctahedron.gif&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;Cuboctahedron&lt;/td&gt;
      &lt;td&gt;3.4.3.4&lt;/td&gt;
      &lt;td&gt;Oh&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;archimedian/3.8.8.truncatedhexahedron.gif&quot; alt=&quot;3.8.8.truncatedhexahedron&quot; title=&quot;3.8.8.truncatedhexahedron.gif&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;Truncated Cube&lt;/td&gt;
      &lt;td&gt;3.8.8&lt;/td&gt;
      &lt;td&gt;Oh&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;archimedian/4.6.6.truncatedoctahedron.gif&quot; alt=&quot;4.6.6.truncatedoctahedron&quot; title=&quot;4.6.6.truncatedoctahedron.gif&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;Truncated Octahedron&lt;/td&gt;
      &lt;td&gt;4.6.6&lt;/td&gt;
      &lt;td&gt;Oh&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;archimedian/3.4.4.4.rhombicuboctahedron.gif&quot; alt=&quot;3.4.4.4.rhombicuboctahedron&quot; title=&quot;3.4.4.4.rhombicuboctahedron.gif&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;Rhombicuboctahedron&lt;/td&gt;
      &lt;td&gt;3.4.4.4&lt;/td&gt;
      &lt;td&gt;Oh&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;archimedian/4.6.8.truncatedcuboctahedron.gif&quot; alt=&quot;4.6.8.truncatedcuboctahedron&quot; title=&quot;4.6.8.truncatedcuboctahedron.gif&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;Truncated Cuboctahedron&lt;/td&gt;
      &lt;td&gt;4.6.8&lt;/td&gt;
      &lt;td&gt;Oh&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;archimedian/3.3.3.4.nubhexahedroncw.gif&quot; alt=&quot;3.3.3.4.nubhexahedroncw&quot; title=&quot;3.3.3.3.4 - Snub Hexahedron&quot; /&gt;or&lt;img src=&quot;archimedian/3.3.3.4.snubhexahedronccw.gif&quot; alt=&quot;3.3.3.4.snubhexahedronccw&quot; title=&quot;3.3.3.4.snubhexahedronccw.gif&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;Snub cube&lt;/td&gt;
      &lt;td&gt;3.3.3.3.4&lt;/td&gt;
      &lt;td&gt;O (Chiral)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;archimedian/3.5.3.5.icosidodecahedron.gif&quot; alt=&quot;3.5.3.5.icosidodecahedron&quot; title=&quot;3.5.3.5.icosidodecahedron.gif&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;Icosidodecahedron&lt;/td&gt;
      &lt;td&gt;3.5.3.5&lt;/td&gt;
      &lt;td&gt;Ih&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;archimedian/3.10.10.truncateddodecahedron.gif&quot; alt=&quot;3.10.10.truncateddodecahedron&quot; title=&quot;3.10.10 - Truncated dodecahedron&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;Truncated Docedahedron&lt;/td&gt;
      &lt;td&gt;3.10.10&lt;/td&gt;
      &lt;td&gt;Ih&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;archimedian/5.6.6.truncatedicosahedron.gif&quot; alt=&quot;5.6.6.truncatedicosahedron&quot; title=&quot;5.6.6.truncatedicosahedron.gif&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;Truncated Icosahedron&lt;/td&gt;
      &lt;td&gt;5.6.6&lt;/td&gt;
      &lt;td&gt;Ih&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;archimedian/3.4.5.4.rhombicosidodecahedron.gif&quot; alt=&quot;3.4.5.4.rhombicosidodecahedron&quot; title=&quot;3.4.5.4.rhombicosidodecahedron.gif&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;Rhombicosidodecahedron&lt;/td&gt;
      &lt;td&gt;3.4.5.4&lt;/td&gt;
      &lt;td&gt;Ih&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;archimedian/4.6.10.truncatedicosidodecahedron.gif&quot; alt=&quot;4.6.10.truncatedicosidodecahedron&quot; title=&quot;4.6.10.truncatedicosidodecahedron.gif&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;Truncated Icosidodecahedron&lt;/td&gt;
      &lt;td&gt;4.6.10&lt;/td&gt;
      &lt;td&gt;Ih&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;archimedian/3.3.3.5.snubdodecahedroncw.gif&quot; alt=&quot;3.3.3.5.snubdodecahedroncw&quot; title=&quot;3.3.3.5.snubdodecahedroncw.gif&quot; /&gt;or&lt;img src=&quot;archimedian/3.5.5.snubdodecahedronccw.gif&quot; alt=&quot;3.5.5.snubdodecahedronccw&quot; title=&quot;3.5.5.snubdodecahedronccw.gif&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;Snub Dodecahedron&lt;/td&gt;
      &lt;td&gt;3.3.3.3.5&lt;/td&gt;
      &lt;td&gt;I (Chiral)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;If that table scares and confuses you, you aren’t the only one – I found this all very bewildering at first! What the heck do all of these weird names mean? Truncated? Rhombi-? Snub? Why is there a combination of a cube and octahedron called a cuboctahedron? How do the icosahedron and dodecahedron combine to make a icosidodecahedron? Also, what is a point symmetry group?&lt;/p&gt;

&lt;p&gt;It’s real easy to “lose the forest for the trees” here, so please feel free to NOT learn the names of these things – some of these polyhedra even have multiple names, which can make studying them terribly confusing. In fact, I’m going to totally ignore defining the truncation, rombi, and snub operations, because I am suspicious of starting by describing them in terms of transformations. Instead, I like to focus on observing the most obvious &lt;em&gt;symmetries&lt;/em&gt; that they have, and focus on learning the unambiguous vertex figure definitions.&lt;/p&gt;

&lt;p&gt;To me, &lt;strong&gt;the important thing to note about polyhedral symmetries is that our 3D universe appears to force polyhedra into just very few point symmetry groups&lt;/strong&gt;. If we are a little hand-wavy and ignore the special case of “chiral” polyhedra for now, we can say there are just two symmetries here:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Shapes like cubes/octahedra (of which the tetrahedral symmetry can probably be considered a special case);&lt;/li&gt;
  &lt;li&gt;Shapes like dodecahedra/icosahedra.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The point symmetry group, roughly speaking, refers to the ways in which you may rotate a polyhedra into a position such that its vertex points look the same as when you started.&lt;/p&gt;

&lt;h1 id=&quot;catalan-solids&quot;&gt;Catalan Solids&lt;/h1&gt;

&lt;p&gt;Catalan solids, named for the Belgian mathematician &lt;a href=&quot;https://en.wikipedia.org/wiki/Eug%C3%A8ne_Charles_Catalan&quot;&gt;Eugene Catalan&lt;/a&gt;, were originally described in 1865. Think about that for a moment – despite Archimedes having discovered important polyhedral shapes in ancient times and despite the fact that the Catalan solids are an incredibly closely related set of shapes, the Catalan solids went formally unrecognized or undiscovered for two millenia. It makes you wonder what other important facts of mathematics lie adjacent to our existing knowledge, but simply have not been discovered yet.&lt;/p&gt;

&lt;p&gt;Catalan solids relax a different constraint than the Archemidean solids. Catalan solids do &lt;em&gt;not&lt;/em&gt; have edges that are all the same length. Instead, they &lt;em&gt;do&lt;/em&gt; have faces that are all the same shape. There are 13 (or 15) of these as well:&lt;/p&gt;

&lt;table class=&quot;center&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;Catalan Solid&lt;/th&gt;
      &lt;th&gt;Face Polygon&lt;/th&gt;
      &lt;th&gt;Symmetry&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;catalan/v3.6.6.triakistetrahedron.gif&quot; alt=&quot;v3.6.6.triakistetrahedron&quot; title=&quot;v3.6.6.triakistetrahedron.gif&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;Triakis Tetrahedron&lt;/td&gt;
      &lt;td&gt;Isosceles&lt;br /&gt; V3.6.6&lt;/td&gt;
      &lt;td&gt;Td&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;catalan/v3.4.3.4.rhombicdodecahedron.gif&quot; alt=&quot;v3.4.3.4.rhombicdodecahedron&quot; title=&quot;v3.4.3.4.rhombicdodecahedron.gif&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;Rhombic Dodecahedron&lt;/td&gt;
      &lt;td&gt;Rhombus&lt;br /&gt; V3.4.3.4&lt;/td&gt;
      &lt;td&gt;Oh&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;catalan/v3.8.8.triakisoctahedron.gif&quot; alt=&quot;v3.8.8.triakisoctahedron&quot; title=&quot;v3.8.8.triakisoctahedron.gif&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;Triakis Octahedron&lt;/td&gt;
      &lt;td&gt;Isosceles&lt;br /&gt; V3.8.8&lt;/td&gt;
      &lt;td&gt;Oh&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;catalan/v4.6.6.tetrakishexahedron.gif&quot; alt=&quot;v4.6.6.tetrakishexahedron&quot; title=&quot;v4.6.6.tetrakishexahedron.gif&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;Tetrakis Hexahedron&lt;/td&gt;
      &lt;td&gt;Isosceles&lt;br /&gt; V4.6.6&lt;/td&gt;
      &lt;td&gt;Oh&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;catalan/v3.4.4.4.deltoidalicositetrahedron.gif&quot; alt=&quot;v3.4.4.4.deltoidalicositetrahedron&quot; title=&quot;v3.4.4.4.deltoidalicositetrahedron.gif&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;Deltoidal Icositetrahedron&lt;/td&gt;
      &lt;td&gt;Kite&lt;br /&gt; V3.4.4.4&lt;/td&gt;
      &lt;td&gt;Oh&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;catalan/v4.6.8.disdyakisdodecahedron.gif&quot; alt=&quot;v4.6.8.disdyakisdodecahedron&quot; title=&quot;v4.6.8.disdyakisdodecahedron.gif&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;Disdyakis Dodecahedron&lt;/td&gt;
      &lt;td&gt;Scalene&lt;br /&gt; V4.6.8&lt;/td&gt;
      &lt;td&gt;Oh&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;catalan/v3.3.3.3.4.pentagonalicositetrahedron-ccw.gif&quot; alt=&quot;v3.3.3.3.4.pentagonalicositetrahedron-ccw&quot; title=&quot;v3.3.3.3.4.pentagonalicositetrahedron-ccw.gif&quot; /&gt;or&lt;img src=&quot;catalan/v3.3.3.3.4.pentagonalicositetrahedron-cw.gif&quot; alt=&quot;v3.3.3.3.4.pentagonalicositetrahedron-cw&quot; title=&quot;v3.3.3.3.4.pentagonalicositetrahedron-cw.gif&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;Pentagonal Icositetrahedron&lt;/td&gt;
      &lt;td&gt;Pentagon&lt;br /&gt; V3.3.3.3.4&lt;/td&gt;
      &lt;td&gt;O&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;catalan/v3.5.3.5.rhombictricontahedron.gif&quot; alt=&quot;v3.5.3.5.rhombictricontahedron&quot; title=&quot;v3.5.3.5.rhombictricontahedron.gif&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;Rhombic Triacontahedron&lt;/td&gt;
      &lt;td&gt;Rhombus&lt;br /&gt; V3.5.3.5&lt;/td&gt;
      &lt;td&gt;Ih&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;catalan/v3.10.10.triakisicosahedron.gif&quot; alt=&quot;v3.10.10.triakisicosahedron&quot; title=&quot;v3.10.10.triakisicosahedron.gif&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;Triakis Icosahedron&lt;/td&gt;
      &lt;td&gt;Isosceles&lt;br /&gt; V3.10.10&lt;/td&gt;
      &lt;td&gt;Ih&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;catalan/v5.6.6.pentakisdodecahedron.gif&quot; alt=&quot;v5.6.6.pentakisdodecahedron&quot; title=&quot;v5.6.6.pentakisdodecahedron.gif&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;Pentakis Dodecahedron&lt;/td&gt;
      &lt;td&gt;Isosceles&lt;br /&gt; V5.6.6&lt;/td&gt;
      &lt;td&gt;Ih&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;catalan/v3.4.5.4.deltoidalhexecontahedron.gif&quot; alt=&quot;v3.4.5.4.deltoidalhexecontahedron&quot; title=&quot;v3.4.5.4.deltoidalhexecontahedron.gif&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;Deltoidal Hexecontahedron&lt;/td&gt;
      &lt;td&gt;Kite&lt;br /&gt; V3.4.5.4&lt;/td&gt;
      &lt;td&gt;Ih&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;catalan/v4.6.10.disdyakistricontahedron.gif&quot; alt=&quot;v4.6.10.disdyakistricontahedron&quot; title=&quot;v4.6.10.disdyakistricontahedron.gif&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;Disdyakis Tricontahedron&lt;/td&gt;
      &lt;td&gt;Scalene&lt;br /&gt; V4.6.10&lt;/td&gt;
      &lt;td&gt;Ih&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;catalan/v3.3.3.3.5.pentagonalhexecontahedron-ccw.gif&quot; alt=&quot;v3.3.3.3.5.pentagonalhexecontahedron-ccw&quot; title=&quot;v3.3.3.3.5.pentagonalhexecontahedron-ccw.gif&quot; /&gt;or&lt;img src=&quot;catalan/v3.3.3.3.5.pentagonalhexecontahedron-cw.gif&quot; alt=&quot;v3.3.3.3.5.pentagonalhexecontahedron-cw&quot; title=&quot;v3.3.3.3.5.pentagonalhexecontahedron-cw.gif&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;Pentagonal Hexecontahedron&lt;/td&gt;
      &lt;td&gt;Pentagon&lt;br /&gt; V3.3.3.3.5&lt;/td&gt;
      &lt;td&gt;I&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;What do the Face Polygon numbers mean that start with a “V”? Well, for the Archimedian solids, we picked a corner and counted the number of sides of each face touching that corner. For the Catalan solids, we take a face, and work our way around the verticies and count the number of polygons touching that point.&lt;/p&gt;

&lt;h1 id=&quot;engineering-with-catalan-and-archimedian-solids&quot;&gt;Engineering with Catalan and Archimedian Solids&lt;/h1&gt;

&lt;p&gt;How does all this relate to &lt;a href=&quot;../pentakis-dodecahedron-dome&quot;&gt;what I tried before&lt;/a&gt;? Well, in the Pentakis Dodecahedron concept, the internal structure was an icosahedron to which a bunch of tetrahedra were added, and this formed new convex hull which turned out to be a Pentakis Dodecahedron, a Catalan solid. In other words, we started with a platonic solid (icosahedron, or 3.3.3.3.3), took its dual to get another platonic solid (dodecahedron, 5.5.5), and then connected all the vertices together to form a catalan solid (V5.6.6). This happened to form very strong tetrahedra throughout the structure.&lt;/p&gt;

&lt;p&gt;But now let’s revisit that important question:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Were there other pairs of shapes we could have used to make a self-supporting dome entirely from tetrahedra, instead of the Icosahedron and Dodecahedron?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The answer appears to be yes – one could begin with any Archimedian or Catalan solid, find its dual, and then connect all verticies together to make a dual-layer structure. It’s not necessarily guaranteed (i.e. I haven’t tried to prove it yet!) that the resulting structure be entirely made of tetrahedra, so it might not be as rigid as the Pentakis Dodecahedron dome, but it would definitely be a dual-layer structure.&lt;/p&gt;

&lt;p&gt;At first pass, there would seem to be many reasons to choose an Archimedian solid for an internal structure, since all the edges would be the same length. If you were making this out of 2x4’s or dowels, they would all be the same length. And we might want to choose a Catalan solid for the exterior skin, so that all the exterior pieces would be the same shape and size. We also have some flexibility on the sizing of the internal polyhedron and external polyhedron, to provide more or less insulation between the inside and outside of the structure.&lt;/p&gt;

&lt;p&gt;There are other considerations as well. For sealing edges or corners to form a waterproof skin, we’d like it if most of our external corners have only 3 polyhedra coming together at a point. This would exclude shapes like the Triakis Icosahedron (V3.10.10), that have many points at which 10 polygons come together.&lt;/p&gt;

&lt;p&gt;Let’s now work through an example of one of the thirtneen dual double-layered domes that you can make, knowing about Catalan and Archimedian solids.&lt;/p&gt;

&lt;h2 id=&quot;example-33335-and-v33335&quot;&gt;Example: 3.3.3.3.5 and V3.3.3.3.5&lt;/h2&gt;

&lt;p&gt;Let’s combine the Snub Dodecahedron (Archimedian Solid 3.3.3.3.5) to its dual, the Pentagonal Hexacontahedron (Catalan Solid V3.3.3.3.5). We start by making simple regular tetrahedra:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;layered-dual-poly-01.jpg&quot; alt=&quot;layered-dual-poly-01&quot; title=&quot;A single tetrahedron.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then connect them in pairs…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;layered-dual-poly-02.jpg&quot; alt=&quot;layered-dual-poly-02&quot; title=&quot;Two tetrahedra, connected along one edge.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And proceed adding on tetrahedron after tetrahedron until the inside forms the triangular faces of the Snub Dodecahedron:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;layered-dual-poly-04.jpg&quot; alt=&quot;layered-dual-poly-04&quot; title=&quot;The inside should begin to form a snub dodecahedron&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;layered-dual-poly-03.jpg&quot; alt=&quot;layered-dual-poly-03&quot; title=&quot;The outside looks like a spiky dodecahedron.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At this point, the outside should look like a bunch of tetrahedral spikes, but the whole structure will still be quite floppy. We now add other icosceles triangles to hold the spike tips a fixed distance from one another. Two of the edges of these icoseles triangles will be the same lengths as the tetrahedra edges, but one edge will be longer, being equal to the outside pentagons’ (from the Pentagonal Hexacontahedron) base edge.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;layered-dual-poly-05.jpg&quot; alt=&quot;layered-dual-poly-05&quot; title=&quot;Exterior view of supporting structure.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The resulting structure should now be fairly rigid and self-supporting, and look like this from the inside:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;layered-dual-poly-06.jpg&quot; alt=&quot;layered-dual-poly-06&quot; title=&quot;Inside view of supporting structure.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The penultimate step is to connect the pentagons into five-piece petals:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;layered-dual-poly-07.jpg&quot; alt=&quot;layered-dual-poly-07&quot; title=&quot;Bottom view of petals&quot; /&gt;
&lt;img src=&quot;layered-dual-poly-08.jpg&quot; alt=&quot;layered-dual-poly-08&quot; title=&quot;Top view of petals&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And finally, cover the top of the supporting structure with these petals:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;layered-dual-poly-09.jpg&quot; alt=&quot;layered-dual-poly-09&quot; title=&quot;One pentagonal petal left&quot; /&gt;
&lt;img src=&quot;layered-dual-poly-10.jpg&quot; alt=&quot;layered-dual-poly-10&quot; title=&quot;The completed structure.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And the inside looks like this:
&lt;img src=&quot;layered-dual-poly-11.jpg&quot; alt=&quot;layered-dual-poly-11&quot; title=&quot;Internal view&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;paper-cut-outs-and-sizing-mathematics&quot;&gt;Paper Cut Outs and Sizing Mathematics&lt;/h2&gt;

&lt;p&gt;To make a fully spherical dual-layer polyhedron from paper, you will need to make triangles of 3 sizes, and also some irregular pentagons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;80 of &lt;script type=&quot;math/tex&quot;&gt;(a,a,a)&lt;/script&gt; triangles that will form the interior snub dodecahedron (3.3.3.3.5)&lt;/li&gt;
  &lt;li&gt;240 of &lt;script type=&quot;math/tex&quot;&gt;(a,b,b)&lt;/script&gt; triangles that will form the tetrahedral spikes on the outside of the snub dodecahedron&lt;/li&gt;
  &lt;li&gt;160 of &lt;script type=&quot;math/tex&quot;&gt;(b,b,c)&lt;/script&gt; triangles that will hold the tetrahedral spikes together&lt;/li&gt;
  &lt;li&gt;60 of &lt;script type=&quot;math/tex&quot;&gt;(c,c,c,d,d)&lt;/script&gt; pentagons to form the exterior pentagonal hexacontahedron (V3.3.3.3.5)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;equilateral-triangles-aaa&quot;&gt;Equilateral Triangles (a,a,a)&lt;/h3&gt;

&lt;p&gt;You can choose &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; however you want; this determines the interior size of the dome. The inner diameter &lt;script type=&quot;math/tex&quot;&gt;d_i&lt;/script&gt; of the dome is:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;d_i \approx 4.07974 a&lt;/script&gt;

&lt;p&gt;I made these by cutting out long strips of paper &lt;script type=&quot;math/tex&quot;&gt;\frac{\sqrt{3}/2}a&lt;/script&gt; wide, marking out a tick every &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; on one edge of the paper, and &lt;script type=&quot;math/tex&quot;&gt;\frac{1}{2}a, \frac{3}{2}a, \frac{5}{2}a, ...&lt;/script&gt; on the other edge, and then connecting the points to form equilateral triangles.&lt;/p&gt;

&lt;h3 id=&quot;icoseles-triangles-abb&quot;&gt;Icoseles Triangles (a,b,b)&lt;/h3&gt;

&lt;p&gt;You can also choose &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt; to be any size you wish, provided that &lt;script type=&quot;math/tex&quot;&gt;2b &gt;= a&lt;/script&gt; so that triangles with edge lengths &lt;script type=&quot;math/tex&quot;&gt;(a,b,b)&lt;/script&gt; exist. The larger &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt; is, the larger the distance between the inner polythedron and outer polyhedron.&lt;/p&gt;

&lt;p&gt;Since we usually start with square paper, I find that cutting out little squares with edge lengths of &lt;script type=&quot;math/tex&quot;&gt;(a,a,a,a)&lt;/script&gt; and then cutting along the two diagonals is a fast way to make four triangles. In this case,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;b = \frac{\sqrt{2}}{2} a \approx 0.707107 a&lt;/script&gt;

&lt;h3 id=&quot;icosceles-triangles-bbc&quot;&gt;Icosceles Triangles (b,b,c)&lt;/h3&gt;

&lt;p&gt;The value of &lt;script type=&quot;math/tex&quot;&gt;c&lt;/script&gt; is constrained by the values of &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt;. Rather than dive into all the math, we’ll just use some pre-derived constants to simplify our expressions.&lt;/p&gt;

&lt;p&gt;We start by &lt;a href=&quot;http://dmccooey.com/polyhedra/RsnubDodecahedron.html&quot;&gt;looking up the triangle center radius radius&lt;/a&gt; of the snub dodecahedron’s triangles:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;r_{snub tri} \approx 2.0770896597432085994 a&lt;/script&gt;

&lt;p&gt;To this, we add the height of the tetrahedral spikes &lt;script type=&quot;math/tex&quot;&gt;h_{tet}&lt;/script&gt; to get the radius of the pentagonal hexacontahedron’s 3-vertexes &lt;script type=&quot;math/tex&quot;&gt;r_{pent3vertexes}&lt;/script&gt;. The value of &lt;script type=&quot;math/tex&quot;&gt;h_{tet}&lt;/script&gt; is easily derived from the pythogorean theorem and our knowledge that the inradius of a equilateral triangle &lt;script type=&quot;math/tex&quot;&gt;(a,a,a)&lt;/script&gt; is &lt;script type=&quot;math/tex&quot;&gt;\frac{\sqrt{3}}{6}a&lt;/script&gt;:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;h_{tet} = \sqrt{b^2 - (\frac{\sqrt{3}}{6}a)^2}&lt;/script&gt;

&lt;p&gt;Thus&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray*}
 r_{pent3vertexes} &amp; = &amp; r_{snub\_tri} + h_{tet} \\
 &amp; \approx &amp; 2.0770896597432085994 a +  \sqrt{b^2 - (\frac{\sqrt{3}}{6}a)^2} \end{eqnarray*} %]]&gt;&lt;/script&gt;

&lt;p&gt;Finally, we can convert &lt;script type=&quot;math/tex&quot;&gt;r_{pent3vertexes}&lt;/script&gt; into &lt;script type=&quot;math/tex&quot;&gt;c&lt;/script&gt; by multiplying it by the ratio of  the &lt;a href=&quot;http://dmccooey.com/polyhedra/LpentagonalHexecontahedron.html&quot;&gt;length constant of the short edges&lt;/a&gt; of the pentagon: to &lt;a href=&quot;http://dmccooey.com/polyhedra/LpentagonalHexecontahedron.html&quot;&gt;the radius of the 3-vertexes of a pentagonal hexecontahedron’s pentagons&lt;/a&gt;:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;c = \frac{0.58289953474498241442}{2.1172098986276657420} r_{pent3vertexes}&lt;/script&gt;

&lt;p&gt;That’s the general case solution.&lt;/p&gt;

&lt;p&gt;If you are making the particular shape that I did (in which &lt;script type=&quot;math/tex&quot;&gt;a=1, b \approx 0.7071...&lt;/script&gt;) then &lt;script type=&quot;math/tex&quot;&gt;c \approx 0.7495688684810217&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;It’s important to note that not all of the pentagonal hexecontahedron’s points are the same distance from its center; the 12 vertexes where 5 edges come together are actually about 10% farther out than the 80 vertexes where 3 edges come together.&lt;/p&gt;

&lt;p&gt;Once again, the fastest way to make these triangles is to cut out a strip of paper of width &lt;script type=&quot;math/tex&quot;&gt;h&lt;/script&gt;, and use the same trick we used when making the equilateral triangles earlier. That is, we mark off regular distances of &lt;script type=&quot;math/tex&quot;&gt;c&lt;/script&gt;, offset by &lt;script type=&quot;math/tex&quot;&gt;\frac{1}{2}c&lt;/script&gt; on the other side, connect the dots diagonally, and cut out the resulting triangles.&lt;/p&gt;

&lt;h3 id=&quot;pentagons-c-c-c-d-d&quot;&gt;Pentagons (c, c, c, d, d)&lt;/h3&gt;

&lt;p&gt;Finding &lt;script type=&quot;math/tex&quot;&gt;d&lt;/script&gt; from &lt;script type=&quot;math/tex&quot;&gt;c&lt;/script&gt; is easy if you &lt;a href=&quot;https://en.wikipedia.org/wiki/Pentagonal_hexecontahedron&quot;&gt;look on wikipedia&lt;/a&gt; to find the ratio of edge lengths:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;d \approx 1.7498525667362 c&lt;/script&gt;

&lt;p&gt;When laying out the pentagon, don’t forget that the angle between the two &lt;script type=&quot;math/tex&quot;&gt;d&lt;/script&gt; sides is about 67.45351 degrees, and to use appropriate symmetry.&lt;/p&gt;

&lt;p&gt;I don’t have any rules of thumb on the construction of those pentagons, sorry! Just make a template and get to work, I guess.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;So there you have it: a self-supporting, extremely rigid structure in which all the internal structural edges are the same length, and in which all the external polygons are the same. More generally, it appears you could apply this technique to make a dozen other dual-layer structures made of Catalan and Archimedian solids.&lt;/p&gt;

&lt;p&gt;This 3.3.3.3.5 design does have a few nice qualities about it, though:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The pentagonal gaps in the internal structure make excellent places for doors or windows.&lt;/li&gt;
  &lt;li&gt;The pentagonal floorplan enables one to see any distant point from at least 2 windows.&lt;/li&gt;
  &lt;li&gt;If you are willing to make the tetrahedral spikes shorter, you can reduce the volume of insulation needed.&lt;/li&gt;
  &lt;li&gt;Everything is self supporting, and any one piece can be replaced as the structure stands.&lt;/li&gt;
  &lt;li&gt;It is made of overlapping tetrahedra that form a strong and resilient structure.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope you enjoyed this little excursion in geometry and origami with me.&lt;/p&gt;</content><category term="math" /><category term="geometry" /><category term="architecture" /><summary type="html">This article describes another iteration of the dome-like structure that I discussed a few months ago. I still don’t have a good vocabulary for describing why I think these things are neat, except to say that I somehow find it relaxing to work on toy engineering problems once or twice a month. I guess de gustibus non est disputandum – “there’s no accounting for (bad) taste!”</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="{&quot;feature&quot;=&gt;nil}" /></entry><entry><title type="html">The Reinforced Pentakis Dodecahedron Dome</title><link href="/blog/pentakis-dodecahedron-dome/" rel="alternate" type="text/html" title="The Reinforced Pentakis Dodecahedron Dome" /><published>2017-11-05T00:00:00-07:00</published><updated>2017-11-05T00:00:00-07:00</updated><id>/blog/pentakis-dodecahedron-dome</id><content type="html" xml:base="/blog/pentakis-dodecahedron-dome/">&lt;p&gt;For your amusement, I would like to present a reinforced version of a geodesic dome that is many times stronger than conventional geodesic domes. It is essentially two concentric domes, one nested inside the other, connected entirely by tetrahedra in a way that both strengthens the dome and provides space for insulation. Compared to single-layer geodesic structures, this new structure uses about 2-3x more materials, but it is so much stronger that it is startling.&lt;/p&gt;

&lt;p&gt;The internal structure is very regular, as a paper model shows:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;pentakis_dome_bottom.jpg&quot; alt=&quot;pentakis_dome_bottom&quot; title=&quot;A paper reinforced Pentakis Dodecahedron dome mockup, viewed from the bottom to show the internal structure. &quot; /&gt;&lt;/p&gt;

&lt;p&gt;The outside shape is the top 3/4ths of a 60-sided pentakis dodecahedron:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;pentakis_dome_top.jpg&quot; alt=&quot;pentakis_dome_top&quot; title=&quot;An external view of a paper mockup of the Reinforced Pentakis Dodecahedron Dome&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This dome is constructed from the surfaces the &lt;a href=&quot;http://en.wikipedia.org/wiki/icosahedron&quot;&gt;Icosahedron&lt;/a&gt;, the &lt;a href=&quot;http://en.wikipedia.org/wiki/Triakis_icosahedron&quot;&gt;Triakis Icosahedron&lt;/a&gt; and a &lt;a href=&quot;http://en.wikipedia.org/wiki/Pentakis_dodecahedron&quot;&gt;Pentakis Dodecahedron&lt;/a&gt;. Those terms sounds like a mouthful, but their meanings are fairly simple:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;triakis-subdivision.png&quot; alt=&quot;triakis subdivision&quot; title=&quot;Triakis subdivision&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Triakis&lt;/strong&gt;: For each original triangular face of the polyhedra, add a new midpoint on the triangle and form three new triangular faces. (In 3D, this midpoint should have same radius as the other vertices.)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;icosahedron-dice.jpg&quot; alt=&quot;icosahedron dice&quot; title=&quot;Icosahedron&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Icosahedron&lt;/strong&gt;: The 20-sided platonic solid formed by connecting 5 equilateral triangles at every vertex.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;pentakis-subdivision.png&quot; alt=&quot;pentakis subdivision&quot; title=&quot;Pentakis subdivision&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Pentakis&lt;/strong&gt;: The same as “tri-akis”, but for pentagonal faces, thus making five new triangles.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;dodecahedron-dice.jpg&quot; alt=&quot;dodecahedron dice&quot; title=&quot;Dodecahedron&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Dodecahedron&lt;/strong&gt;: The 12-sided platonic solid formed by connecting 3 regular pentagons at every vertex.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;There are a few advantages to constructing a dome of this type:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It is fairly simple: there are only three different triangle shapes that need to be cut out.&lt;/li&gt;
  &lt;li&gt;Every edge is part of at least one tetrahedron, making it incredibly strong and rigid.&lt;/li&gt;
  &lt;li&gt;The tetrahedra form trapped spaces between an ‘inner’ dome surface and an ‘outer’ dome surface. This space may be useful as a type of crawlspace for insulation, wiring, or ventilation.&lt;/li&gt;
  &lt;li&gt;Even if the dome is not connected to the ground, it is rigid and self-supporting. This is unlike most other geodesic domes, which require strong connections between foundations and the rest of the structure or they fold or collapse.&lt;/li&gt;
  &lt;li&gt;As with other domes, the edges can be made first as a skeleton and then the faces attached later, or the faces can be flat and connected with a suitable edge-connection method. In the latter case, a larger structure could be made entirely out of plywood, stamped metal, glass, or perhaps ceramic tile.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the rest of this article, I will next briefly review &lt;a href=&quot;#geodesic_construction&quot;&gt;how other geodesic domes are made&lt;/a&gt;, discuss &lt;a href=&quot;#geodesic_advantages&quot;&gt;their advantages&lt;/a&gt;, then talk about &lt;a href=&quot;#geodesic_disadvantages&quot;&gt;the problems I encountered in them while making paper models&lt;/a&gt;, and then &lt;a href=&quot;#pentakis_construction&quot;&gt;how to make this new dome structure&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;geodesic_construction&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;background-geodesic-dome-construction&quot;&gt;Background: Geodesic Dome Construction&lt;/h2&gt;

&lt;p&gt;What &lt;strong&gt;is&lt;/strong&gt; a geodesic dome, anyway? How do you decide the sizes of all those little triangles? Although they initially may appear very mysterious, geodesic structures are actually formed from very simple patterns.&lt;/p&gt;

&lt;p&gt;Most domes are created from regular platonic polyhedra. What are those? Well, if you have ever played &lt;a href=&quot;http://dnd.wizards.com&quot;&gt;games&lt;/a&gt; with 4-, 6-, 8-, 12-, and 20-sided die)-sided dice, you have seen all the platonic polyhedra. If you have not, it may be a fun exercise to cut out paper triangles, squares, and pentagons, and try to rediscover the shapes yourself. The five platonic solids are the only polyhedra with these two properties:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Every edge has the same length&lt;/li&gt;
  &lt;li&gt;Every face is the same polygon&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Typically, people making geodesic domes choose a tetrahedron (4-sides), octahedron (8-sides), or icosahedron (20-sides), because these polehedra may be formed using, respectively, 3, 4, or 5 equilateral triangles connected together at each vertex.&lt;/p&gt;

&lt;p&gt;For geodesic domes, the icosahedron is by far the most popular choice of a starting shape because it is already closer to a sphere than the other platonic solids.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;icosahedron.png&quot; alt=&quot;icosahedron&quot; title=&quot;An icosahedron. &quot; /&gt;&lt;/p&gt;

&lt;p&gt;The next step is to divide the edges of each triangle into &lt;script type=&quot;math/tex&quot;&gt;v&lt;/script&gt; smaller pieces, and then form smaller triangles connecting the new midpoints. In general, the &lt;script type=&quot;math/tex&quot;&gt;v&lt;/script&gt;th level subdivision is made by breaking each edge of the triangle into &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; pieces:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;subdivisions.png&quot; alt=&quot;subdivided triangles&quot; title=&quot;Subdivided triangles&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For the rest of this example, we will use the 2&lt;script type=&quot;math/tex&quot;&gt;v&lt;/script&gt; subdivision. So let’s draw a 2&lt;script type=&quot;math/tex&quot;&gt;v&lt;/script&gt; subdivided icosahedron:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;icosahedron-subdivided-2v.png&quot; alt=&quot;subdivided triangles&quot; title=&quot;An icosahedron with its edges divided in 2, thus producing 4 new triangles.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The last step is “push out” the newly created vertices so that they also lie on the surface of the sphere defined by the original polyhedron. As the points are pushed out, their angular coordinates (i.e. latitude and longitude) on the surface of the sphere must not change.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;icosahedral-2v-sphere.png&quot; alt=&quot;geodesic 1v, 2v, 3v&quot; title=&quot;A sphere formed by pushing the new vertices out to the same radius as the other vertices.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Mathematically, this last operation is simply the constraint that every vertex &lt;script type=&quot;math/tex&quot;&gt;(x_i, y_i, z_i)&lt;/script&gt; be the same distance &lt;script type=&quot;math/tex&quot;&gt;d&lt;/script&gt; from the center of the polyhedron:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;d = \sqrt{x_i^2 + y_i^2 + z_i^2}&lt;/script&gt;

&lt;p&gt;Working out the analytic solutions for the lengths of the triangles in the &lt;script type=&quot;math/tex&quot;&gt;v&lt;/script&gt;th subdivision of various polyhedra is within the abilities of many high school students, and perhaps even a few gifted middle school students, but it does take some patience and persistence. Thankfully, there are &lt;a href=&quot;http://www.dirkbertels.net/computing/pentaDome_files/pentaDome_070206.pdf&quot;&gt;many&lt;/a&gt;… &lt;a href=&quot;http://www.geometer.org/mathcircles/geodesic.pdf&quot;&gt;good&lt;/a&gt;… &lt;a href=&quot;http://www.salsburg.com/geod/geodesicmath.pdf&quot;&gt;examples&lt;/a&gt; to start from if you are curious about calculating the coordinates.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;geodesic_advantages&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;advantages-of-domes&quot;&gt;Advantages of Domes&lt;/h2&gt;

&lt;p&gt;Geodesic domes are attractive structures in part because they are so simple – there are only 2 different triangle shapes needed for the 2v and 3v designs. When I helped organize the &lt;a href=&quot;http://portland.sciencehackday.org&quot;&gt;2017 Portland Science Hack Day&lt;/a&gt;, one of our kid zone activities was to assemble a geodesic dome out of cardboard. We used a 40W laser cutter to quickly cut the cardboard (25 of the 18x18x24” boxes from HomeDepot is plenty, costing $36.50 in total), and stuck it together the edges with tape remarkably quickly:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;shd-dome.jpg&quot; alt=&quot;Science Hack Day Dome&quot; title=&quot;The Portland 2017 Science Hack Day kid zone 2v geodesic dome.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Some people even build entire homes this way. Advocates of geodesic dome homes tout the design as being one of the strongest, most material-efficient types of structure possible, and most engineers who look at one will immediately be able to give several reasons why this is true:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Of all possible shapes, a sphere has the highest ratio of volume to surface area. All other things being equal, this means that there will be fewer materials used to construct a home with a certain volume. There will also be relatively less energy lost through the surface, so it will be cheaper to heat or cool.&lt;/li&gt;
  &lt;li&gt;Spheres are &lt;a href=&quot;https://en.wikipedia.org/wiki/Gridshell&quot;&gt;doubly-curved surfaces&lt;/a&gt;, which are generally more rigid than &lt;a href=&quot;https://en.wikipedia.org/wiki/Developable_surface&quot;&gt;singly curved surfaces&lt;/a&gt; like cylinders that can crush or kink. You may have noticed how the rounded bottom of an aluminum can is much stronger than the sides, even though the metal is the same thickness.&lt;/li&gt;
  &lt;li&gt;Geodesic domes are constructed from many small triangles. Triangles cannot pivot or bend at the joints, unlike squares or other polygons, and are thus one of the strongest shapes in engineering. One glance at the &lt;a href=&quot;http://en.wikipedia.org/wiki/truss&quot;&gt;truss structures&lt;/a&gt; used in cranes, planes, and spacecraft are all based on the concept of “triangularizing” a structure to make it as rigid and strong as possible.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a name=&quot;geodesic_disadvantages&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;weakpoints-of-geodesic-domes&quot;&gt;Weakpoints of Geodesic Domes&lt;/h2&gt;

&lt;p&gt;One big surprise that the paper geodesic dome models revealed to me was how the strength of the geodesic dome absolutely depends on it being connected at the base where the geodesic dome touches the ground. Although a completed sphere is quite strong, a dome has very little strength unless its edges are securely anchored to the ground!&lt;/p&gt;

&lt;p&gt;It’s hard to show in photos, but the paper geodesic dome I made appears to support itself when sitting on the table, but it quite floppy and easily curls up into strange shapes if the base edge is not taped down.&lt;/p&gt;

&lt;table class=&quot;center&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;geodesic_dome.jpg&quot; alt=&quot;geodesic_dome.jpg&quot; title=&quot;A geodesic dome unconnected to the ground...&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;geodesic_squashed.jpg&quot; alt=&quot;geodesic_squashed&quot; title=&quot;...is quite floppy!&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Although a dome constructed with thick members like wood or metal might appear self-supporting, this is not mathematically true, and failure to connect the foundation of the dome will result in only a fraction of the true strength being developed.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;pentakis_construction&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;constructing-the-pentakis-dodecahedron&quot;&gt;Constructing the Pentakis Dodecahedron&lt;/h2&gt;

&lt;p&gt;One of the fastest ways for me to develop intuition for structures that are too complicated to visualize is to build small mock-ups. I have always liked arts and crafts, so I printed out some templates of various shapes on thick card stock paper, and taped the edges together with scotch tape. If you have an hour to spare, I encourage you to unleash your inner elementary school student, grab your scissors (and maybe a drink and a podcast too!), and try making one of these yourself.&lt;/p&gt;

&lt;p&gt;Here’s how to make it:&lt;/p&gt;

&lt;p&gt;First, print out six copies of the &lt;a href=&quot;reinforced-pentakis-dodecahedron.pdf&quot;&gt;PDF of this design&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next, cut out the triangular tetrahedra. Optionally, you may also use a knife to cut out the insides of the triangles, if you want to be able to see the internal structure.&lt;/p&gt;

&lt;p&gt;Then, fold the sides up and tape them together to form tetrahedra:&lt;/p&gt;

&lt;table class=&quot;center&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;pentakis_construction_step0.jpg&quot; alt=&quot;pentakis-step-1&quot; title=&quot;Step 0.&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;pentakis_construction_step1.jpg&quot; alt=&quot;pentakis-step-1&quot; title=&quot;Step 1.&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;When you have five tetrahedra, tape them together along their edges. This creates one quarter of a triakis icosahedron.&lt;/p&gt;

&lt;table class=&quot;center&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;pentakis_construction_step2.jpg&quot; alt=&quot;pentakis-step-1&quot; title=&quot;Step 2.&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;pentakis_construction_step3.jpg&quot; alt=&quot;pentakis-step-1&quot; title=&quot;Step 3.&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Finally, cover the surface with the smaller pentakis triangles.&lt;/p&gt;

&lt;table class=&quot;center&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;pentakis_construction_step4.jpg&quot; alt=&quot;pentakis-step-1&quot; title=&quot;Step 4.&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;pentakis_construction_step5.jpg&quot; alt=&quot;pentakis-step-1&quot; title=&quot;Step 5.&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Repeat this process to the edges of the small dome you just created, adding more tetrahedra and skin surfaces in this way until you have 3/4ths of a complete sphere.&lt;/p&gt;

&lt;p&gt;While you are cutting out paper, you may also want to compare the relative strength of this with other common shapes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.korthalsaltes.com/model.php?name_en=icosahedron&quot;&gt;Paper template for an icosahedron&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.korthalsaltes.com/model.php?name_en=dodecahedron&quot;&gt;Paper template for a dodecahedron&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.discovere.org/sites/default/files/Dome%20Home_0.pdf&quot;&gt;Paper template for a 2v geodesic dome&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://mathworld.wolfram.com/pdf/PentakisDodecahedron.pdf&quot;&gt;Paper template for a pentakis dodecahedron&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to make new triangles and create your own reinforced pentakis dodecahedron of arbitrary size, the magic numbers for a dome of radius &lt;script type=&quot;math/tex&quot;&gt;r&lt;/script&gt; are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The icosahedron’s equilateral triangles have three edges of length &lt;script type=&quot;math/tex&quot;&gt;l_1 = 1.0514622 r&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;The triakis icosahedron’s icoceles triangles have one edge of length &lt;script type=&quot;math/tex&quot;&gt;l_1&lt;/script&gt; and two edges of length &lt;script type=&quot;math/tex&quot;&gt;l_2 = 0.66500310 r&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;The pentakis dodecahedron’s icoceles triangles have one edge of length &lt;script type=&quot;math/tex&quot;&gt;l_2&lt;/script&gt; and two edges of length &lt;script type=&quot;math/tex&quot;&gt;l_3 = 1.12732203 l_2&lt;/script&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you would like to estimate the amount of flat material that you will need, you will find &lt;a href=&quot;https://en.wikipedia.org/wiki/Heron%27s_formula&quot;&gt;Heron’s Formula&lt;/a&gt; useful:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;A = \sqrt{s(s-a)(s-b)(s-c)}&lt;/script&gt;

&lt;p&gt;where &lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt; is the area of a triangle, &lt;script type=&quot;math/tex&quot;&gt;s=\frac{1}{2}(a+b+c)&lt;/script&gt; is half of the perimeter of the triangle, and &lt;script type=&quot;math/tex&quot;&gt;a,b,c&lt;/script&gt; are the lengths of the sides of the triangle.&lt;/p&gt;

&lt;h2 id=&quot;a-note-on-duality&quot;&gt;A note on Duality&lt;/h2&gt;

&lt;p&gt;It’s fun to look at the mathematics of these polyhedra as well. Basically, this dome is constructed by starting with an icosahedron, adding tetrahedra to the outside, and then add pentagons to the new points defined by this, and then scaling all the radii carefully. Here is an early model whose vertices’ radii are not all equal:&lt;/p&gt;

&lt;table class=&quot;center&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;icosahedron.jpg&quot; alt=&quot;icosahedron&quot; title=&quot;A paper Icosahedron&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;icosahedron_stellated.jpg&quot; alt=&quot;icosahedron_stellated&quot; title=&quot;A paper great stellated icosahedron&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The above tetrahedra that I taped to the outside of the icosahedron are very big, creating a &lt;a href=&quot;http://en.wikipedia.org/wiki/Great_stellated_dodecahedron&quot;&gt;great stellated icosahedron&lt;/a&gt; instead of a triakis icosahedron. If you were to connect the tips of these tetrahedra, they would define 12 new pentagonal surfaces, because the “dual” of the icosahedron is the dodecahedron.&lt;/p&gt;

&lt;p&gt;Duality expresses a mathematical symmetry that appears in many different disciplines, and while a full post on duality is out of scope of this article, the core thing to realize is that in this example of duality, the number of sides and vertices switch:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Icosahedron: 12 vertices, 20 (triangular) sides&lt;/li&gt;
  &lt;li&gt;Dodecahedron: 12 (pentagonal) sides, 20 vertices&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And also the number of faces and the sides of each face switch:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Icosahedron: 3-sided faces, 5 faces connecting at each vertex&lt;/li&gt;
  &lt;li&gt;Dodecahedron: 5-sided faces, 3 faces connecting at each vertex&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If we reduce the radius of the tips of the great stellated icosahedron, the shape becomes a “triakis icosahedron”, in which all vertices have equal radii. By happy coincidence, the convex hull of those vertices defines a pentakis dodecahedron. It is pretty neat that all of the vertices are still at a constant radius.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Most of us would rather live in a beautiful home than one with efficient geometry, so perhaps it is not a surprise that geodesic designs are not very popular and take a backseat to traditional construction techniques. Personally, I find domes to be so ugly that they are actually kind of cute, but I understand that they might not pass muster with the local homeowners association.&lt;/p&gt;

&lt;p&gt;Aesthetics aside, dome construction is probably best reserved for extremely harsh environments: cold-weather shelters, underground structures, or perhaps spacecraft. If the spaces between the icosahedron and pentakis dodecahedron were sealed airtight, they could also act as insulation, floatation chambers, or – for extraterrestrial homes – as airlocks that protect the inner chamber.&lt;/p&gt;

&lt;p&gt;It is a big world out there, and because it is unlikely that I am the first person to think along these lines before, please &lt;a href=&quot;mailto:drrobot-at-gmail.com&quot;&gt;let me know&lt;/a&gt; of other examples of this structure and other more developed implementations. I would be really curious to see pictures of real structures implementing this shape.&lt;/p&gt;

&lt;h2 id=&quot;future-directions&quot;&gt;Future Directions&lt;/h2&gt;

&lt;p&gt;As with any thought experiment, this little game raised more questions than it answered:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Are there other shapes that may also be connected such that every edge is part of a tetrahedron? Is this possible with every triangularized shape and its dual?&lt;/li&gt;
  &lt;li&gt;How does one further subdivide the triangles of this structure to make it more spherical, as was done with the 2v, 3v, and higher-order geodesic domes, while keeping every edge part of at least one tetrahedron?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are fun engineering topics that would also be worth figuring out for this structure:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If this were made of fabric instead of rigid materials, could this be made a self-inflating structure by filling the tetrahedral cells with compressed air or expanding foam?&lt;/li&gt;
  &lt;li&gt;Could this be made entirely out of ceramic tile or glass, connected at the edges in a manner that avoids stress concentrations? Where are the stresses in each trianglular member?&lt;/li&gt;
  &lt;li&gt;Would this be strong enough to be buried underground as an earth-sheltered home? On earth…or mars?&lt;/li&gt;
  &lt;li&gt;How could the corners and edges of this structure be safely and cheaply sealed against water intrusion? How could condensation be removed from the inside?&lt;/li&gt;
&lt;/ul&gt;</content><category term="math" /><category term="geometry" /><category term="architecture" /><summary type="html">For your amusement, I would like to present a reinforced version of a geodesic dome that is many times stronger than conventional geodesic domes. It is essentially two concentric domes, one nested inside the other, connected entirely by tetrahedra in a way that both strengthens the dome and provides space for insulation. Compared to single-layer geodesic structures, this new structure uses about 2-3x more materials, but it is so much stronger that it is startling.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="{&quot;feature&quot;=&gt;nil}" /></entry><entry><title type="html">Introduction to Geometric Algebra, Part 1</title><link href="/blog/intro-to-geometric-algebra-1/" rel="alternate" type="text/html" title="Introduction to Geometric Algebra, Part 1" /><published>2017-07-12T00:00:00-07:00</published><updated>2017-07-12T00:00:00-07:00</updated><id>/blog/intro-to-geometric-algebra-1</id><content type="html" xml:base="/blog/intro-to-geometric-algebra-1/">&lt;p&gt;Geometric Algebra (GA) is one of those things that we should have all learned in high school because it would have made physics and mathematics in college so much easier.&lt;/p&gt;

&lt;p&gt;The fact that we did not learn it in high school is probably because GA appears to only have been known by mathematicians studying &lt;a href=&quot;https://www.wikipedia.org/wiki/clifford_algebra&quot;&gt;Clifford Algebras&lt;/a&gt;. Mathematicians may be 100 years ahead of everybody else in so many ways, but they are not always the best at communicating their subject to non-mathematicians. The physics community, at least, seems to have figured out that GA is useful, and since physicists are 20 years ahead of the rest of the sciences in the adoption of good tools and methods, it seems safe to predict that in the future engineers will start seeing GA in school in a couple of decades, or &lt;a href=&quot;http://link-to-paper&quot;&gt;even sooner&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Geometric Algebra could be taught in high school immediately after basic algebra. Not only is GA not particularly difficult to learn, it provides a unified perspective for several areas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;GA lets you &lt;strong&gt;easily perform 2D and 3D vector transformations&lt;/strong&gt;. It is simpler to perform spatial rotations than using matrices, sines, and inverse trigonometric operations, and it generalizes to more dimensions in a straightforward way.&lt;/li&gt;
  &lt;li&gt;GA gives a &lt;strong&gt;clear geometric meaning to the imaginary number&lt;/strong&gt; – or all 3 imaginary numbers, in the case of quaternions.&lt;/li&gt;
  &lt;li&gt;GA &lt;strong&gt;replaces div, grad, curl, with a single vector derivative&lt;/strong&gt;. To an electrical engineer like myself, it is frankly &lt;em&gt;amazing&lt;/em&gt; to see the four Maxwell Equations reduced into a single equation!&lt;/li&gt;
  &lt;li&gt;GA is &lt;strong&gt;coordinate-free&lt;/strong&gt; and can let you make analytic conclusions without first choosing a basis&lt;/li&gt;
  &lt;li&gt;GA is a framework &lt;strong&gt;applicable to dozens of different fields&lt;/strong&gt; of physics and engineering, including classical and quantum mechanics.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While I am far from being an expert in Geometric Algebra, I wanted to write an accessible, bare-bones introduction to the subject so that people can follow my use of it in a future post on hyperbolic geometry. For this reason, this post will just focus on 2D operations, and perhaps in a later post I can talk about rotations in 3D space or 4D spacetime, differential equations, Maxwell’s Equations, and other applications.&lt;/p&gt;

&lt;h1 id=&quot;preparation-basic-concepts&quot;&gt;Preparation: Basic Concepts&lt;/h1&gt;

&lt;p&gt;Before introducing Geometric Algebra, I’m going to briefly review coordinate systems, basis vectors, and the inner and outer products. As an engineer and not a mathematician, I will focus on examples and developing intuition rather than rigor, entirely symbolic notation, or the capacity to generalize expressions. Checking correctness with a proof must follow the intuition that there is something there to prove!&lt;/p&gt;

&lt;h2 id=&quot;concept-properties-of-algebras&quot;&gt;Concept: Properties of Algebras&lt;/h2&gt;

&lt;p&gt;Most people have a vague idea what algebra is: it is a set of rules to add and multiply objects of different quantities, often represented in school using the variables &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;y&lt;/script&gt;. The operations you perform usually satisfy the properties of being&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;associative&lt;/strong&gt;, meaning that you can reorder operations &lt;script type=&quot;math/tex&quot;&gt;(qr)s=q(rs)&lt;/script&gt;; and&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;distributive&lt;/strong&gt;, meaning that you can expand like &lt;script type=&quot;math/tex&quot;&gt;q(r+s)=qr+qs&lt;/script&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The algebra you learned in school had one other property:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;commutative&lt;/strong&gt; multiplication, meaning that you can reorder terms &lt;script type=&quot;math/tex&quot;&gt;qr = rq&lt;/script&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is &lt;strong&gt;not so&lt;/strong&gt; in Geometric Algebra and matrix algebras, in which the &lt;em&gt;ordering&lt;/em&gt; of terms being multiplied matters and generally speaking &lt;script type=&quot;math/tex&quot;&gt;qr \ne rq&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;If you are wondering why some operations are not commutative, consider where you would end up navigating if you start in a given orientation and:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Walk forward 100 paces (&lt;script type=&quot;math/tex&quot;&gt;q&lt;/script&gt;) and then turn right (&lt;script type=&quot;math/tex&quot;&gt;r&lt;/script&gt;); or&lt;/li&gt;
  &lt;li&gt;Turn right (&lt;script type=&quot;math/tex&quot;&gt;r&lt;/script&gt;) and then walk forward 100 paces (&lt;script type=&quot;math/tex&quot;&gt;q&lt;/script&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Another example is to consider the commutivity of addition and subtraction: &lt;script type=&quot;math/tex&quot;&gt;4+3=3+4&lt;/script&gt;, but does &lt;script type=&quot;math/tex&quot;&gt;4-3=3-4&lt;/script&gt;?&lt;/p&gt;

&lt;h2 id=&quot;concept-coordinate-system-and-references&quot;&gt;Concept: Coordinate System and References&lt;/h2&gt;

&lt;p&gt;To introduce GA we need to define a coordinate system with two things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A way to measure distance (hopefully evenly!)&lt;/li&gt;
  &lt;li&gt;Reference directions (hopefully independent!)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let us consider our options first. If we are drawing on a sheet of paper, we could measure distances using the number of marks passed on a grid. This grid could be:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;coord-arb.png&quot; alt=&quot;coord-arb&quot; title=&quot;Curvilinear coordinates.&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Arbitrary or Curvilinear coordinates&lt;/strong&gt;. We &lt;em&gt;could&lt;/em&gt; draw any bunch of curved lines unevenly over the page in a wavy grid as long as the lines parallel to each other did not intersect. This sounds crazy, but sometimes you need to account for some distortion in a space and this type of coordinate system can be very useful as a transformation. In most cases, however, it would be a poor choice for most problems because one unit of distance is not exactly “equal” to another unit elsewhere on the page.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;coord-polar.png&quot; alt=&quot;coord-polar&quot; title=&quot;Polar Coordinates.&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Polar&lt;/strong&gt;. We &lt;em&gt;could&lt;/em&gt; use we could use an angle (from a reference direction) and a distance or angle from an origin to define where a point is, as is often done on spherical surfaces like the surface of the Earth. While useful in certain circumstances, but again suffer from the problem that distances at different areas on the page are not easily compared.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;coord-rectangular.png&quot; alt=&quot;coord-rect&quot; title=&quot;Rectangular Coordinates.&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Rectangular Coordinates&lt;/strong&gt;. Known as the familiar “XY” coordinate system for most people, we could (and will!) use a grid of straight, parallel lines to find the coordinates of a point. Most problems that are not on highly distorted surfaces are most simply considered in this way – and even on curved surfaces, if you “zoom in” far enough, most surfaces begin to look “locally flat” and begin to resemble straight lines.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Now that we are measuring distances evenly with a Cartesian grid, we need to choose a &lt;strong&gt;basis&lt;/strong&gt;, which are essentially the directions that we reference. The choice of the directions is partly arbitrary, and partly not. For example, we can rotate the grid to be in any orientation and still get the same results. What other options do we have?&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;coord-skew.png&quot; alt=&quot;coord-skewed&quot; title=&quot;Non-orthogonal-basis&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Non-orthogonal basis&lt;/strong&gt;. We &lt;em&gt;could&lt;/em&gt; choose any two directions to draw our parallel lines in, which would probably our grid skewed, but we would soon notice that moving along &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; also moves you along &lt;script type=&quot;math/tex&quot;&gt;y&lt;/script&gt; in some important sense. This seems like a problem, so we must add another constraint!&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;coord-rectangular.png&quot; alt=&quot;coord-rectangular&quot; title=&quot;Cartesian Coordinates&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Orthogonal&lt;/strong&gt;. If we make the two vectors orthogonal (i.e. 90 degrees to each other) we can now move independently in each direction. But what if we accidentally spaced our parallel lines different distances apart along each axis? If we do not add a constraint that both reference directions be of the same magnitude, we might accidentally measure distances along X in units of meters and distances along Y in distances of feet.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;coord-cartesian.png&quot; alt=&quot;coord-cartesian&quot; title=&quot;Cartesian Coordinates&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Orthonormal&lt;/strong&gt;. If your basis is orthogonal and are equal in magnitude (i.e. distances on each are measured in the same way), we call the basis “orthonormal”.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;One of the advantages of GA is that the exact choice of basis often does not matter – it could be rotated to any number of crazy angles or different scales – and that you can find relationships without choosing a basis at all.&lt;/p&gt;

&lt;h2 id=&quot;concept-vectors&quot;&gt;Concept: Vectors&lt;/h2&gt;

&lt;p&gt;Using our new coordinate space, let us now draw two example &lt;strong&gt;vectors&lt;/strong&gt; &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt;, which are mixtures of the basis directions &lt;script type=&quot;math/tex&quot;&gt;e_1&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;e_2&lt;/script&gt;. We will use these same two vectors over and over again to keep the number of symbols low.&lt;/p&gt;

&lt;p&gt;Rather than than using matrices or vector notation, which would do more harm than good because they would obfuscate important quantities, we will instead use simple algebraic forms to express vectors. Let us define&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray*}
 a &amp; = &amp; 2e_1 + 1e_2\\
 b &amp; = &amp; 3e_1 + 4e_2 \end{eqnarray*} %]]&gt;&lt;/script&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;example-vectors.png&quot; alt=&quot;example-vectors&quot; title=&quot;Sample vectors a and b&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In plain english, the vector &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; means a direction that, for each three units you move along &lt;script type=&quot;math/tex&quot;&gt;e_1&lt;/script&gt;, you must also move one unit along &lt;script type=&quot;math/tex&quot;&gt;e_2&lt;/script&gt;. Note that we cannot “add” apples &lt;script type=&quot;math/tex&quot;&gt;e_1&lt;/script&gt; and oranges &lt;script type=&quot;math/tex&quot;&gt;e_2&lt;/script&gt;; the &lt;script type=&quot;math/tex&quot;&gt;+&lt;/script&gt; symbol here means something like the word “and” for the terms with different basis vectors. We &lt;em&gt;can&lt;/em&gt; reduce expressions with &lt;script type=&quot;math/tex&quot;&gt;e_1&lt;/script&gt;, but not combine them with &lt;script type=&quot;math/tex&quot;&gt;e_2&lt;/script&gt; in a way that is further reduced than this notation.&lt;/p&gt;

&lt;h4 id=&quot;example-vector-addition&quot;&gt;Example: Vector Addition&lt;/h4&gt;

&lt;p&gt;What is &lt;script type=&quot;math/tex&quot;&gt;a + b&lt;/script&gt;?&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray*}
 a + b &amp; = &amp; (2e_1 + 1e_2) + (3e_1 + 4e_2) \\
       &amp; = &amp;  2e_1 + 3e_1 + 1e_2 + 4e_2  \\
       &amp; = &amp; (2+3)e_1 + (1+4)e_2 \\
       &amp; = &amp; 5e_1 + 5e_2 \end{eqnarray*} %]]&gt;&lt;/script&gt;

&lt;h2 id=&quot;concept-vector-magnitude&quot;&gt;Concept: Vector Magnitude&lt;/h2&gt;

&lt;p&gt;Since trigonometry is familiar to most people, we will define the &lt;strong&gt;magnitude&lt;/strong&gt; of a vector &lt;script type=&quot;math/tex&quot;&gt;a=\alpha_1 e_1 + \alpha_2 e_2&lt;/script&gt; in the same way as was used the Pythagorean Theorem.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\|a\| = \sqrt{\alpha_1^2 + \alpha_2^2}&lt;/script&gt;

&lt;h4 id=&quot;example-vector-magnitudes&quot;&gt;Example: Vector Magnitudes&lt;/h4&gt;

&lt;p&gt;What are the magnitudes of &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt;?&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;vector-magnitude.png&quot; alt=&quot;vector-magnitude&quot; title=&quot;Euclidean magnitude.&quot; /&gt;&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray*}
 \|a\| &amp; = &amp; \sqrt{2^2 + 1^2} = \sqrt{5}\\
 \|b\| &amp; = &amp; \sqrt{3^2 + 4^2} = \sqrt{25} = 5\end{eqnarray*} %]]&gt;&lt;/script&gt;

&lt;h2 id=&quot;concept-projections-and-the-inner-product&quot;&gt;Concept: Projections and the Inner Product&lt;/h2&gt;

&lt;p&gt;Let us ask a very simple question about these vectors:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you move along &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt;, how much do you also move along &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt;?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The answer to this question is given by the &lt;strong&gt;inner product&lt;/strong&gt; (a.k.a. &lt;strong&gt;dot product&lt;/strong&gt;). It is called the “inner” product because the answer is “inside” or “along” the vector to which you are projecting.&lt;/p&gt;

&lt;p&gt;Most people remember trigonometry pretty well, in which case the single most important thing to remember about the inner product is:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;a\cdot b=\|a\|\|b\|\cos\theta&lt;/script&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;inner-product-and-magnitude.png&quot; alt=&quot;inner-product-and-magnitude&quot; title=&quot;The inner product is related to magnitude.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What can we discover about the consequences of this equation?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The inner product &lt;em&gt;must&lt;/em&gt; be commutative (&lt;script type=&quot;math/tex&quot;&gt;a\cdot b = b \cdot a&lt;/script&gt;), because the cosine function is &lt;strong&gt;symmetric&lt;/strong&gt; (a.k.a “even”), which is the property that &lt;script type=&quot;math/tex&quot;&gt;\cos(\theta)=\cos(-\theta)&lt;/script&gt;. All this means is that the value of &lt;script type=&quot;math/tex&quot;&gt;\cos(...)&lt;/script&gt; will be the same whether we measure from &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; to &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt;, which is &lt;script type=&quot;math/tex&quot;&gt;\cos(\theta)&lt;/script&gt;, or from &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt; to &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt;, which is &lt;script type=&quot;math/tex&quot;&gt;\cos(-\theta)&lt;/script&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;cosine-fn.png&quot; alt=&quot;cosine-fn&quot; title=&quot;The cosine function is symmetric.&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;If &lt;script type=&quot;math/tex&quot;&gt;\|a\|=1&lt;/script&gt;, then &lt;script type=&quot;math/tex&quot;&gt;a \cdot a = 1&lt;/script&gt; because there is zero angle between &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; and itself, and &lt;script type=&quot;math/tex&quot;&gt;\cos(0)=1&lt;/script&gt;. We will use this property for basis vectors extensively, specifically that &lt;script type=&quot;math/tex&quot;&gt;e_1 \cdot e_1 = 1&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;e_2 \cdot e_2 = 1&lt;/script&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Orthogonal things &lt;em&gt;must&lt;/em&gt; have an inner product of zero, because if &lt;script type=&quot;math/tex&quot;&gt;\theta=\pm 90^\circ&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;\cos(\pm 90^\circ)=0&lt;/script&gt;, and thus &lt;script type=&quot;math/tex&quot;&gt;a\cdot b=0&lt;/script&gt;. This definitely applies to our basis vectors, where we see that &lt;script type=&quot;math/tex&quot;&gt;e_1 \cdot e_2 = e_2 \cdot e_1 = 0&lt;/script&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The inner product &lt;em&gt;must&lt;/em&gt; be related closely to magnitudes. It is easy to prove that &lt;script type=&quot;math/tex&quot;&gt;\|a\| = \sqrt{a \cdot a}&lt;/script&gt;; can you see why? Geometrically, we could think of this definition of magnitude as being akin to “What do we get if we move in the direction of &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; by a number of units equal to the length of &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt;? The magnitude of &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt;.”&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It will also help to think the types of objects that enter and exit a “black box functional specification” of the inner product operation. The two “inputs” were vectors and the “output” was a scalar that measures the how much you move along one if you move along the other.&lt;/p&gt;

&lt;h4 id=&quot;example-inner-product&quot;&gt;Example: Inner Product&lt;/h4&gt;

&lt;p&gt;What is &lt;script type=&quot;math/tex&quot;&gt;a \cdot b&lt;/script&gt; using the above values of &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt;?&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray*}
 a \cdot b &amp; = &amp; (2e_1 + 1e_2) \cdot (3e_1 + 4e_2) \\
           &amp; = &amp; 2e_1\cdot 3e_1 + 2e_1\cdot 4e_2 + 1e_2\cdot 3e_1 + 1e_2 \cdot 4e_2  \\
           &amp; = &amp; 6e_1\cdot e_1 + 8e_1\cdot e_2 + 3e_2\cdot e_1 + 4e_2 \cdot e_2  \\
           &amp; = &amp; 6 (1) + 8 (0) + 3 (0) + 4 (1)  \\
           &amp; = &amp; 10 \end{eqnarray*} %]]&gt;&lt;/script&gt;

&lt;h1 id=&quot;concept-rotations-and-the-outer-product&quot;&gt;Concept: Rotations and the Outer Product&lt;/h1&gt;

&lt;p&gt;Let us ask another very simple question about these vectors:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you start pointed in the direction of &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt;, how much do you need to rotate to point in the direction of &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt;?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;strong&gt;outer product&lt;/strong&gt; (a.k.a. &lt;strong&gt;wedge product&lt;/strong&gt;) is what gives us the answer to this question.&lt;/p&gt;

&lt;p&gt;As before, the easiest way to understand this is via trigonometry, in which case the most important fact is:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;a\wedge b=\|a\|\|b\|\sin\theta&lt;/script&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;outer-product-and-sine2.png&quot; alt=&quot;outer-product-and-sine2&quot; title=&quot;The outer product is related to the sine. &quot; /&gt;&lt;/p&gt;

&lt;p&gt;This equation has several important consequences:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The outer product is &lt;em&gt;not&lt;/em&gt; commutative. In fact, the outer product is a kind of multiplication that is called &lt;strong&gt;anti-symmetric&lt;/strong&gt;, which means that commuting the inputs flips the sign (&lt;script type=&quot;math/tex&quot;&gt;a\wedge b = - b \wedge a)&lt;/script&gt;. This is fundamentally because &lt;script type=&quot;math/tex&quot;&gt;\sin()&lt;/script&gt; is an odd function and &lt;script type=&quot;math/tex&quot;&gt;\sin(\theta)=-\sin(-\theta)&lt;/script&gt;. There are also geometric reasons for rotations to not be commutative: if we start at &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt;, we need to rotate counterclockwise to get to &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt;, but we start at &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt;, we need to rotate clockwise to get to &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt;. The choice of which reference direction you measure from matters to the sign of the answer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;sine-fn.png&quot; alt=&quot;sine-fn&quot; title=&quot;The sine function is antisymmetric.&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The outer product is closely related to &lt;strong&gt;rotation&lt;/strong&gt; by 90 degrees, because that is the point at which &lt;script type=&quot;math/tex&quot;&gt;\sin(\theta)&lt;/script&gt; is maximized and minimized. This is &lt;em&gt;so important&lt;/em&gt; that we will right now assign the symbol &lt;script type=&quot;math/tex&quot;&gt;R&lt;/script&gt; to a 90 degree counterclockwise rotation. We can think of smaller or larger rotations as being &lt;script type=&quot;math/tex&quot;&gt;R&lt;/script&gt; multiplied by some scalar to adjust “how big” the rotation is. Under this idea, a 45 degree counterclockwise rotation would be &lt;script type=&quot;math/tex&quot;&gt;0.5R&lt;/script&gt;, and a 90 degree clockwise rotation would be &lt;script type=&quot;math/tex&quot;&gt;-R&lt;/script&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;bivectors.png&quot; alt=&quot;bivectors&quot; title=&quot;A bivector is often drawn as an arc.&quot; /&gt; &lt;img src=&quot;outer-product-half-rotation.png&quot; alt=&quot;outer-product-half-rotation&quot; title=&quot;Half a rotation.&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The outer product of two orthonormal vectors &lt;em&gt;must&lt;/em&gt; be either &lt;script type=&quot;math/tex&quot;&gt;1R&lt;/script&gt; or &lt;script type=&quot;math/tex&quot;&gt;-1R&lt;/script&gt;. Why? Because if &lt;script type=&quot;math/tex&quot;&gt;\theta=\pm 90^\circ&lt;/script&gt;, then &lt;script type=&quot;math/tex&quot;&gt;\sin(\pm 90^\circ)=\pm 1&lt;/script&gt;. For the basis vectors, this means that &lt;script type=&quot;math/tex&quot;&gt;R = e_1 \wedge e_2&lt;/script&gt; is a 90 degree counterclockwise rotation, and &lt;script type=&quot;math/tex&quot;&gt;-R = e_2 \wedge e_1&lt;/script&gt; is a 90 degree clockwise rotation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once again, it will help to consider the black box specification of the outer product operation. The two “inputs” were vectors and the “output” is a scaled amount of a 90 degree rotation &lt;script type=&quot;math/tex&quot;&gt;R&lt;/script&gt;, which is neither a vector nor a scalar. What, exactly, is the type of this output object? After defining the geometric product, we will give it a better name.&lt;/p&gt;

&lt;h4 id=&quot;example-outer-product&quot;&gt;Example: Outer Product&lt;/h4&gt;

&lt;p&gt;What is &lt;script type=&quot;math/tex&quot;&gt;a \cdot b&lt;/script&gt; using the above values of &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt;?&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray*} 
 a \wedge b &amp; = &amp; (2e_1 + 1e_2) \wedge (3e_1 + 4e_2) \\
            &amp; = &amp; 2e_1\wedge 3e_1 + 2e_1\wedge 4e_2 + 1e_2\wedge 3e_1 + 1e_2 \wedge 4e_2  \\
            &amp; = &amp; 6e_1\wedge e_1 + 8e_1\wedge e_2 + 3e_2\wedge e_1 + 4e_2 \wedge e_2  \\
            &amp; = &amp; 6 (0) + 8 (+R) + 3 (-R) + 4 (0)  \\
            &amp; = &amp; 5R \end{eqnarray*} %]]&gt;&lt;/script&gt;

&lt;h1 id=&quot;geometric-algebra&quot;&gt;Geometric Algebra&lt;/h1&gt;

&lt;p&gt;With the preliminaries out of the way, we can now define the geometric product and actually start doing geometric algebra!&lt;/p&gt;

&lt;h2 id=&quot;the-geometric-product&quot;&gt;The Geometric Product&lt;/h2&gt;

&lt;p&gt;In the same way that we introduced the inner and outer products by asking a question, we will introduce the &lt;strong&gt;geometric product&lt;/strong&gt; by asking a very general question:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;How do you transform &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; into &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt;?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Or equivilently, in terms of what we already know,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;How much do you need to rescale and rotate &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; so that it is equal to &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt;?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The intuition that we need both a rotation &lt;em&gt;and&lt;/em&gt; a rescaling is key to understanding the geometric product. We will write the geometric product of &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt; as &lt;script type=&quot;math/tex&quot;&gt;ab&lt;/script&gt;, as we would write scalar multiplication of two variables in high school algebra. We can define the geometric product as:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;ab = a \cdot b + a \wedge b&lt;/script&gt;

&lt;p&gt;But in some ways, this definition puts the cart before the horse! We can &lt;em&gt;discover&lt;/em&gt; this equation if just try to multiply &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt; together and be very careful about how we do so. Let us explore what happens when we try to compute &lt;script type=&quot;math/tex&quot;&gt;ab&lt;/script&gt; using high school rules of algebra (sans commutative multiplication of nonscalars).&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray*}
 ab &amp; = &amp; (2e_1 + 1e_2) (3e_1 + 4e_2)\\
    &amp; = &amp; (2e_1)(3e_1) + (2e_1)(4e_2) + (1e_2)(3e_1) + (1e_2)(4e_2)\\
    &amp; = &amp; 6 e_1 e_1 + 8 e_1 e_2 + 3 e_2 e_1 + 4 e_2 e_2\\
 \end{eqnarray*} %]]&gt;&lt;/script&gt;

&lt;p&gt;Hmm. What should we do with the products of the unit vectors &lt;script type=&quot;math/tex&quot;&gt;e_1 e_1, e_1 e_2, e_2 e_1, e_2 e_2&lt;/script&gt;? We can reason it out:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;e_1 e_1&lt;/script&gt; asks, “How do I transform &lt;script type=&quot;math/tex&quot;&gt;e_1&lt;/script&gt; into &lt;script type=&quot;math/tex&quot;&gt;e_1&lt;/script&gt;?”. The answer, of course, is that nothing needs to be done! We can express this by scaling by one, the identity object, and write that &lt;script type=&quot;math/tex&quot;&gt;e_1 e_1 = 1&lt;/script&gt;. If we recall the properties of dot and wedge products for unit length vectors, &lt;script type=&quot;math/tex&quot;&gt;e_1\cdot e_1=1&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;e_1\wedge e_1=0&lt;/script&gt;, then this assumption also agrees with our definition of the geometric product, &lt;script type=&quot;math/tex&quot;&gt;e_1e_1=e_1\cdot e_1 + e_1 \wedge e_1 = 1 + 0R = 1&lt;/script&gt;. No rotation was needed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;e_2 e_2&lt;/script&gt; must also equal 1, for the same reasons.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;e_1 e_2&lt;/script&gt; is asking how do I transform &lt;script type=&quot;math/tex&quot;&gt;e_1&lt;/script&gt; into &lt;script type=&quot;math/tex&quot;&gt;e_2&lt;/script&gt;? We know that our basis vectors are orthonormal, so this must equal a 90 degree clockwise rotation &lt;script type=&quot;math/tex&quot;&gt;R&lt;/script&gt;. &lt;script type=&quot;math/tex&quot;&gt;e_1e_2=e_1\cdot e_2 + e_1 \wedge e_2 = 0 + 1R = R&lt;/script&gt;, and no rescaling is needed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;e_2 e_1&lt;/script&gt; must thus equal &lt;script type=&quot;math/tex&quot;&gt;-R&lt;/script&gt;, using similar reasoning.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can now finish the simplification process.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray*}
ab &amp; = &amp; 6 e_1 e_1 + 8 e_1 e_2 + 3 e_2 e_1 + 4 e_2 e_2\\
   &amp; = &amp; 6 (1) + 8(R) + 3 (-R) + 4 (1)\\
   &amp; = &amp; 10 + 5R\\
 \end{eqnarray*} %]]&gt;&lt;/script&gt;

&lt;p&gt;If you compare this results to what we found earlier (&lt;script type=&quot;math/tex&quot;&gt;a\cdot b=10&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;a\wedge b=5R&lt;/script&gt;), we can indeed see that in this case &lt;script type=&quot;math/tex&quot;&gt;ab=a\cdot b + a\wedge b&lt;/script&gt;. Now that you have the intuition, it would be a good time to prove this to yourself more generally for all &lt;script type=&quot;math/tex&quot;&gt;a,b&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;Speaking of intuition, what does the result &lt;script type=&quot;math/tex&quot;&gt;ab=10+5R&lt;/script&gt; really mean? Does it mean that we should scale vector &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; by 10 times and go 5 quarter turns counterclockwise to end up at &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt;? That seems obviously incorrect! So our interpretation has led us slightly astray.&lt;/p&gt;

&lt;p&gt;We will correct this intuition of this just a moment, but now is a good time to introduce some simplying notation that will carry us beyond just two dimensions.&lt;/p&gt;

&lt;h2 id=&quot;simplifying-geometric-products-of-basis-vectors&quot;&gt;Simplifying Geometric Products of Basis Vectors&lt;/h2&gt;

&lt;p&gt;For brevity, if you have fewer than 10 dimensions, it is often convenient to combine the subscripts of basis vectors. That is, with this notational convention, &lt;script type=&quot;math/tex&quot;&gt;e_1 e_2 = e_{12}&lt;/script&gt;, or &lt;script type=&quot;math/tex&quot;&gt;e_1 e_2 e_3 = e_{123}&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;As for simplifying more complex geometric product expressions with orthonormal vectors, we have already learned the only two rules that we need to know:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;e_i e_i = e_{ii} = 1&lt;/script&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;e_i e_j = e_{ij} = - e_{ji}&lt;/script&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That’s it! Let’s try an example to make sure this is completely obvious.&lt;/p&gt;

&lt;h4 id=&quot;example-simplifying-geometric-products&quot;&gt;Example: Simplifying Geometric Products&lt;/h4&gt;

&lt;p&gt;Simplify the quantity &lt;script type=&quot;math/tex&quot;&gt;e_2 e_3 e_2 e_1 e_3 e_2 e_2&lt;/script&gt;.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray*}
e_2 e_3 e_2 e_1 e_3 e_2 e_2 &amp; = &amp; e_2 e_3 e_2 e_1 e_3 e_2 e_2\\
                            &amp; = &amp; e_2 e_3 e_2 e_1 e_3 (1) \\
                            &amp; = &amp; e_2 (-e_2 e_3) e_1 e_3\\
                            &amp; = &amp; -(1) e_3 e_2 e_1 e_3 \\
                            &amp; = &amp; -(1) e_3 e_2 e_1 e_3 \\  
                            &amp; = &amp; - (- e_2 e_3) e_1 e_3 \\  
                            &amp; = &amp; e_2 (- e_1 e_3) e_3 \\  
                            &amp; = &amp; - e_2 e_1 (1) \\  
                            &amp; = &amp; e_1 e_2 \\  
                            &amp; = &amp; e_{12} \end{eqnarray*} %]]&gt;&lt;/script&gt;

&lt;h2 id=&quot;blades-grades-and-bivectors&quot;&gt;Blades, Grades and Bivectors&lt;/h2&gt;

&lt;p&gt;Let us make a table of the different types of objects we have seen up to this point, and add a new column called &lt;strong&gt;grade&lt;/strong&gt; that more or less describes the dimensionality of the object.&lt;/p&gt;

&lt;table class=&quot;table&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Object (a.k.a. Blade )&lt;/th&gt;
      &lt;th&gt;Examples&lt;/th&gt;
      &lt;th&gt;Basis&lt;/th&gt;
      &lt;th&gt;Grade&lt;/th&gt;
      &lt;th&gt;Relates to&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Scalar&lt;/td&gt;
      &lt;td&gt;1,2,3,4,5…&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;Magnitude&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Vector&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;a,b&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;e_1, e_2&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;Direction&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bivector / Rotation&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;5R&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;e_{12}&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;Rotation&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Common parlance is to call &lt;script type=&quot;math/tex&quot;&gt;e_{12}&lt;/script&gt; a bivector, and when we get to 3D, &lt;script type=&quot;math/tex&quot;&gt;e_{123}&lt;/script&gt; is the trivector.&lt;/p&gt;

&lt;h2 id=&quot;the-meaning-of-geometric-products&quot;&gt;The meaning of Geometric Products&lt;/h2&gt;

&lt;p&gt;Let us look one more time at the vectors &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt;, but this time let us include all four of the basis vectors we have seen thus far: &lt;script type=&quot;math/tex&quot;&gt;1, e_1, e_2, e_{12}&lt;/script&gt;.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray*}
 a &amp; = &amp; 0(1) + 2e_1 + 1e_2 + 0e_{12}\\
 b &amp; = &amp; 0(1) + 3e_1 + 4e_2 + 0e_{12}\end{eqnarray*} %]]&gt;&lt;/script&gt;

&lt;p&gt;In general, we will call this new compound object a “Multivector”. Multivector &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; has four components:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;An amount of “0” of a scalar quantity&lt;/li&gt;
  &lt;li&gt;An amount of “2” in direction &lt;script type=&quot;math/tex&quot;&gt;e_1&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;An amount of “1” in direction &lt;script type=&quot;math/tex&quot;&gt;e_2&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;An amount of “0” is the bivector (90 degree rotation) direction&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As we know by now, we cannot simplify this expression any further, because we cannot “add” apples and oranges and pears and bananas. All four objects are independent, different measurement units: the scalar values, the two basis values, and the bivector (&lt;script type=&quot;math/tex&quot;&gt;e_{12}&lt;/script&gt;) value.&lt;/p&gt;

&lt;p&gt;The only thing left to do in this post is to explore a few examples.&lt;/p&gt;

&lt;h4 id=&quot;example-on-the-order-of-multiplication-ab-vs-ba&quot;&gt;Example: On the Order of Multiplication (&lt;script type=&quot;math/tex&quot;&gt;ab&lt;/script&gt; vs &lt;script type=&quot;math/tex&quot;&gt;ba&lt;/script&gt;)?&lt;/h4&gt;

&lt;p&gt;What is the relationship between &lt;script type=&quot;math/tex&quot;&gt;ab&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;ba&lt;/script&gt;?&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray*}
ba &amp; = &amp; (3e_{1}+4e_{2})(2e_{1}+1e_{2})\\
 &amp; = &amp; 6e_{11}+3e_{12}+8e_{21}+4e_{22}\\
 &amp; = &amp; 6+3e_{12}-8e_{12}+4\\
 &amp; = &amp; 10-5e_{12}\\
 &amp; = &amp; (ab)^{\dagger}
\end{eqnarray*} %]]&gt;&lt;/script&gt;

&lt;p&gt;where &lt;script type=&quot;math/tex&quot;&gt;^{\dagger}&lt;/script&gt; means the complex conjugate. In physical terms, this means rotating clockwise instead of counterclockwise, which is consistent with our understanding thus far.&lt;/p&gt;

&lt;h4 id=&quot;example-how-do-we-move-from-a-to-b&quot;&gt;Example: How do we move from &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; to &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt;?&lt;/h4&gt;

&lt;p&gt;If &lt;script type=&quot;math/tex&quot;&gt;ab&lt;/script&gt; represents a transformation from &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; to &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt;, how do we show it? Keeping in mind that geometric product operations are not commutative, should we pre- or post- multiply &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; with &lt;script type=&quot;math/tex&quot;&gt;ab&lt;/script&gt; to transform it into &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt;?&lt;/p&gt;

&lt;p&gt;If we pre-multiply,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray*}
aba &amp; = &amp; (ab)a\\
 &amp; = &amp; (10+5e_{12})(2e_{1}+1e_{2})\\
 &amp; = &amp; 20e_{1}+10e_{2}+10e_{121}+5e_{122}\\
 &amp; = &amp; 20e_{1}+10e_{2}-10e_{2}+5e_{1}\\
 &amp; = &amp; 25e_{1}
\end{eqnarray*} %]]&gt;&lt;/script&gt;

&lt;p&gt;Which is not equal to &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt;. Perhaps we should try post-multiplying?&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray*}
aab &amp; = &amp; a(ab)\\
 &amp; = &amp; (2e_{1}+1e_{2})(10+5e_{12})\\
 &amp; = &amp; 20e_{1}+10e_{112}+10e_{2}+5e_{212}\\
 &amp; = &amp; 20e_{1}+10e_{2}+10e_{2}-5e_{1}\\
 &amp; = &amp; 15e_{1}+20e_{2}\\
 &amp; = &amp; 5(3e_{1}+4e_{2})\\
 &amp; = &amp; 5b
\end{eqnarray*} %]]&gt;&lt;/script&gt;

&lt;p&gt;Aha! That is just &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt; multiplied by a factor of 5. Where did that factor of 5 come from? Well, If we normalized &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt; to have unit length (i.e. &lt;script type=&quot;math/tex&quot;&gt;\frac{a}{\|a\|}&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;\frac{b}{\|b\|}&lt;/script&gt;), then the factor of 5 disappears. Now is a good time to grab a sheet of paper and a pen and prove that &lt;script type=&quot;math/tex&quot;&gt;aab=b&lt;/script&gt; for unit length vectors, and then read on:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray*}
r&amp;=&amp;\frac{a}{\|a\|}\frac{b}{\|b\|}\\
&amp;=&amp;...\end{eqnarray*} %]]&gt;&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\|r\|=1&lt;/script&gt;

&lt;p&gt;If you can see that &lt;script type=&quot;math/tex&quot;&gt;r&lt;/script&gt; represents a pure rotation (a.k.a. a &lt;strong&gt;rotor&lt;/strong&gt;), then the transform from &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; to &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt; could be described as: “normalize &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt;, rotate by &lt;script type=&quot;math/tex&quot;&gt;r&lt;/script&gt;, and then scale by &lt;script type=&quot;math/tex&quot;&gt;\|b\|&lt;/script&gt; to reach &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt;. In math, this is quite simply several products written from left to right:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray*}
a\frac{1}{\|a\|}r\|b\| &amp; = &amp; a\frac{1}{\|a\|}\frac{ab}{\|a\|\|b\|}\|b\|\\
 &amp; = &amp; \frac{aab}{\|a\|^{2}}\\
 &amp; = &amp; b
\end{eqnarray*} %]]&gt;&lt;/script&gt;

&lt;p&gt;And we can see that the factor of 5 we saw earlier came from the fact that &lt;script type=&quot;math/tex&quot;&gt;\|a\|^2=5&lt;/script&gt;. The true way to go from &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; to &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt; is thus to multiply &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; by &lt;script type=&quot;math/tex&quot;&gt;\frac{ab}{\|a\|^2}&lt;/script&gt;.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;For those with prior experience in engineering and physics, you have probably noticed by now that the bivector &lt;script type=&quot;math/tex&quot;&gt;e_{12}&lt;/script&gt; is playing the role of the imaginary number &lt;script type=&quot;math/tex&quot;&gt;i=\sqrt{-1}&lt;/script&gt;, and that this is all just complex mathematics in another form. However, you may agree after seeing the results in higher dimensions that it is perhaps more valid to say that complex mathematics is just a special case of geometric algebra!&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;p&gt;I found the following papers useful while learning about Geometric Algebra. Ordering from easiest to hardest,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Geometric Algebra Primer&lt;/em&gt;, by Jaap Suter.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Imaginary Numbers are not Real – the Geometric Algebra of Spacetime&lt;/em&gt;, by Stephen Gull, Anthony Lasenby, and Chris Doran.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;A Survey of Geometric Algebra and Geometric Calculus&lt;/em&gt;, by Alan Macdonald.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Oersted Medal Lecture 2002: Reforming the Mathematical Language of Physics&lt;/em&gt; by David Hestenes.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;An Introduction to Geometric Algebra and Calculus&lt;/em&gt;, by Alan Bromborsky.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Geometric Algebra&lt;/em&gt;, by Eric Chisolm.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Spacetime Physics with Geometric Algebra 1&lt;/em&gt;, by David Hestenes.&lt;/li&gt;
&lt;/ul&gt;</content><category term="math" /><category term="geometric algebra" /><summary type="html">Geometric Algebra (GA) is one of those things that we should have all learned in high school because it would have made physics and mathematics in college so much easier.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="{&quot;feature&quot;=&gt;nil}" /></entry><entry><title type="html">Hyperbolic Geometry &amp;amp; Special Relativity</title><link href="/blog/hyperbolic-geometry-and-special-relativity/" rel="alternate" type="text/html" title="Hyperbolic Geometry &amp; Special Relativity" /><published>2017-06-02T00:00:00-07:00</published><updated>2017-06-02T00:00:00-07:00</updated><id>/blog/hyperbolic-geometry-and-special-relativity</id><content type="html" xml:base="/blog/hyperbolic-geometry-and-special-relativity/">&lt;p&gt;While studying &lt;a href=&quot;https://arxiv.org/abs/0810.3328&quot;&gt;An Introduction to Particle Physics&lt;/a&gt; on a recent flight to Japan – studying math that is way above my head is a nerdy hobby of mine – I came across a simple viewpoint on special relativity that really stunned me:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Consider a spatial rotation around, say, the z-axis (or, equivalently, mixing the x and y coordinates). Such a transformation is called an &lt;strong&gt;Euler Transformation&lt;/strong&gt;, and takes the form&lt;/p&gt;
&lt;/blockquote&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray*}
 t^{\prime} &amp; = &amp; t\\
 x^{\prime} &amp; = &amp; x\cos\theta+y\sin\theta\\
 y^{\prime} &amp; = &amp; -x\cos\theta+y\sin\theta\\
 z^{\prime} &amp; = &amp; z \end{eqnarray*} %]]&gt;&lt;/script&gt;

&lt;blockquote&gt;
  &lt;p&gt;where \(\theta\) is the angle of rotation, called the &lt;strong&gt;Euler Angle&lt;/strong&gt;. We can simultaneously express a Lorentz transformation as a sort of “rotation” that mixes a spatial dimension and a time dimension, as follows&lt;/p&gt;
&lt;/blockquote&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray*}
t^{\prime} &amp; = &amp; t\cosh\theta-x\sinh\theta\\
x^{\prime} &amp; = &amp; -t\sinh\theta+x\cosh\theta\\
y^{\prime} &amp; = &amp; y\\
z^{\prime} &amp; = &amp; z\end{eqnarray*} %]]&gt;&lt;/script&gt;

&lt;blockquote&gt;
  &lt;p&gt;where \(\theta \) is defined by the relationship \(\beta = \tan(\theta) \).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After staring at that for a while, I was struck by the analogy between the “mixing” between coordinates when we rotate something, and the relativistic “mixing” between time and space when something accelerates. Although this is just an analogy and perhaps squeezing and stretching is a better metaphor than rotation in this case, is very tempting to search for the geometry of what is happening rather than just the algebra.&lt;/p&gt;

&lt;p&gt;Whether it was the in flight wine or just the jet lag, I found myself lost in thought about the connection between hyperbolic geometry and special relativity – after all, what does it &lt;em&gt;mean&lt;/em&gt; to say that our space is curved in a way consistent with hyperbolic geometry? We all study flat, Euclidean spaces in school, and as a roboticist who worked a lot with rigid body dynamics I became pretty comfortable with the concepts surrounding rotation matrices, quaternions, and SO(3) groups, I but I don’t ever recall using the hyperbolic cosine even once in my life. This was surprising to me, as I use math on a fairly regular basis.&lt;/p&gt;

&lt;p&gt;To try to clear the matter in my mind, I made a little table of some of the definitions of sine, cosine, and their hyperbolic equivalents:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray}
\sin(x) &amp; = &amp; \frac{1}{2}(e^{ix}-e^{-ix}) &amp; = &amp; \sum_{k=0}^{\infty}\frac{(-1)^{k}x^{2k+1}}{(2k+1)!} \\
\cos(x) &amp; = &amp; \frac{1}{2}(e^{ix}+e^{-ix}) &amp; = &amp; \sum_{k=0}^{\infty}\frac{(-1)^{k}x^{2k}}{(2k)!} \\
\sinh(x) &amp; = &amp; \frac{1}{2}(e^{x}-e^{-x}) &amp; = &amp; \sum_{k=0}^{\infty}\frac{x^{2k+1}}{(2k+1)!} \\
\cosh(x) &amp; = &amp; \frac{1}{2}(e^{x}+e^{-x}) &amp; = &amp; \sum_{k=0}^{\infty}\frac{x^{2k}}{(2k)!} \end{eqnarray} %]]&gt;&lt;/script&gt;

&lt;p&gt;Look at how the hyperbolic trig functions have no need of the imaginary number \(i=\sqrt{-1}\) or the alternating -1’s in the infinite series. One of the most frustrating things about \(i\) is that it is so incredibly useful algebraically, but it also makes things more cumbersome because expressions in general become more – pardon the pun – complex. The geometric meaning of the imaginary number is often associated with rotations, but I wonder if there are more geometric ways of understanding the same operation that have no need for the imaginary number per se. I would prefer to see mathematical expressions that are as simple as possible, but no simpler.&lt;/p&gt;

&lt;p&gt;Even now, as I stare at the infinite series for hyperbolic sine and cosine, and their definitions in terms of the all-important exponential function, I wonder if in fact that “things with the imaginary number are wrong” in the same way that &lt;a href=&quot;http://tauday.com/&quot;&gt;“pi is wrong”&lt;/a&gt;. It is not that sines are incorrect in an algebraic or mathematical sense, because they are clearly not. Rather, I am wondering whether, due to the way mathematics developed historically, perhaps we are using algebra that is more cumbersome than necessary to describe two legs of the same geometric elephant.&lt;/p&gt;

&lt;p&gt;I would welcome good book recommendations connecting the essential geometry of hyperbolas to special relativity!&lt;/p&gt;</content><summary type="html">While studying An Introduction to Particle Physics on a recent flight to Japan – studying math that is way above my head is a nerdy hobby of mine – I came across a simple viewpoint on special relativity that really stunned me:</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="{&quot;feature&quot;=&gt;nil}" /></entry></feed>
