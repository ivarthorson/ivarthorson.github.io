<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.2.1">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2017-11-13T23:04:44-08:00</updated><id>/</id><title type="html">Art is Never Finished</title><subtitle>...Only Abandoned. – Leonardo da Vinci</subtitle><entry><title type="html">The Reinforced Pentakis Dodecahedron Dome</title><link href="/blog/pentakis-dodecahedron-dome/" rel="alternate" type="text/html" title="The Reinforced Pentakis Dodecahedron Dome" /><published>2017-11-05T00:00:00-07:00</published><updated>2017-11-05T00:00:00-07:00</updated><id>/blog/pentakis-dodecahedron-dome</id><content type="html" xml:base="/blog/pentakis-dodecahedron-dome/">&lt;p&gt;For your amusement, I would like to present a reinforced version of a geodesic dome that is many times stronger than conventional geodesic domes. It is essentially two concentric domes, one nested inside the other, connected entirely by tetrahedra in a way that both strengthens the dome and provides space for insulation. Compared to single-layer geodesic structures, this new structure uses about 2-3x more materials, but it is so much stronger that it is startling.&lt;/p&gt;

&lt;p&gt;The internal structure is very regular, as a paper model shows:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;pentakis_dome_bottom.jpg&quot; alt=&quot;pentakis_dome_bottom&quot; title=&quot;A paper reinforced Pentakis Dodecahedron dome mockup, viewed from the bottom to show the internal structure. &quot; /&gt;&lt;/p&gt;

&lt;p&gt;The outside shape is the top 3/4ths of a 60-sided pentakis dodecahedron:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;pentakis_dome_top.jpg&quot; alt=&quot;pentakis_dome_top&quot; title=&quot;An external view of a paper mockup of the Reinforced Pentakis Dodecahedron Dome&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This dome is constructed from the surfaces the &lt;a href=&quot;http://en.wikipedia.org/wiki/icosahedron&quot;&gt;Icosahedron&lt;/a&gt;, the &lt;a href=&quot;http://en.wikipedia.org/wiki/Triakis_icosahedron&quot;&gt;Triakis Icosahedron&lt;/a&gt; and a &lt;a href=&quot;http://en.wikipedia.org/wiki/Pentakis_dodecahedron&quot;&gt;Pentakis Dodecahedron&lt;/a&gt;. Those terms sounds like a mouthful, but their meanings are fairly simple:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;triakis-subdivision.png&quot; alt=&quot;triakis subdivision&quot; title=&quot;Triakis subdivision&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Triakis&lt;/strong&gt;: For each original triangular face of the polyhedra, add a new midpoint on the triangle and form three new triangular faces. (In 3D, this midpoint should have same radius as the other vertices.)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;icosahedron-dice.jpg&quot; alt=&quot;icosahedron dice&quot; title=&quot;Icosahedron&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Icosahedron&lt;/strong&gt;: The 20-sided platonic solid formed by connecting 5 equilateral triangles at every vertex.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;pentakis-subdivision.png&quot; alt=&quot;pentakis subdivision&quot; title=&quot;Pentakis subdivision&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Pentakis&lt;/strong&gt;: The same as “tri-akis”, but for pentagonal faces, thus making five new triangles.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;dodecahedron-dice.jpg&quot; alt=&quot;dodecahedron dice&quot; title=&quot;Dodecahedron&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Dodecahedron&lt;/strong&gt;: The 12-sided platonic solid formed by connecting 3 regular pentagons at every vertex.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;I envision connecting these surfaces along their edges, rather than at the vertices. There are a few advantages to constructing a dome in this way:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It is fairly simple: there are only three different triangle shapes that need to be cut out.&lt;/li&gt;
  &lt;li&gt;Every edge is part of at least one tetrahedron, making it incredibly strong and rigid.&lt;/li&gt;
  &lt;li&gt;The tetrahedra form trapped spaces between an ‘inner’ dome surface and an ‘outer’ dome surface. This space may be useful as a type of crawlspace for insulation, wiring, or ventilation.&lt;/li&gt;
  &lt;li&gt;Even if the dome is not connected to the ground, it is rigid and self-supporting. This is unlike most other geodesic domes, which require strong connections between foundations and the rest of the structure or they fold or collapse.&lt;/li&gt;
  &lt;li&gt;As with other domes, the edges can be made first as a skeleton and then the faces attached later, or the faces can be flat and connected with a suitable edge-connection method. In the latter case, a larger structure could be made entirely out of plywood, stamped metal, glass, or perhaps ceramic tile.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the rest of this article, I will next briefly review &lt;a href=&quot;#geodesic_construction&quot;&gt;how other geodesic domes are made&lt;/a&gt;, discuss &lt;a href=&quot;#geodesic_advantages&quot;&gt;their advantages&lt;/a&gt;, then talk about &lt;a href=&quot;#geodesic_disadvantages&quot;&gt;the problems I encountered in them while making paper models&lt;/a&gt;, and then &lt;a href=&quot;#pentakis_construction&quot;&gt;how to make this new dome structure&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;geodesic_construction&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;background-geodesic-dome-construction&quot;&gt;Background: Geodesic Dome Construction&lt;/h2&gt;

&lt;p&gt;What &lt;strong&gt;is&lt;/strong&gt; a geodesic dome, anyway? How do you decide the sizes of all those little triangles? Although they initially may appear very mysterious, geodesic structures are actually formed from very simple patterns.&lt;/p&gt;

&lt;p&gt;Most domes are created from regular platonic polyhedra. What are those? Well, if you have ever played &lt;a href=&quot;http://dnd.wizards.com&quot;&gt;games&lt;/a&gt; with 4-, 6-, 8-, 12-, and 20-sided die)-sided dice, you have seen all the platonic polyhedra. If you have not, it may be a fun exercise to cut out paper triangles, squares, and pentagons, and try to rediscover the shapes yourself. The five platonic solids are the only polyhedra with these two properties:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Every edge has the same length&lt;/li&gt;
  &lt;li&gt;Every face is the same polygon&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Typically, people making geodesic domes choose a tetrahedron (4-sides), octahedron (8-sides), or icosahedron (20-sides), because these polehedra may be formed using, respectively, 3, 4, or 5 equilateral triangles connected together at each vertex.&lt;/p&gt;

&lt;p&gt;For geodesic domes, the icosahedron is by far the most popular choice of a starting shape because it is already closer to a sphere than the other platonic solids.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;icosahedron.png&quot; alt=&quot;icosahedron&quot; title=&quot;An icosahedron. &quot; /&gt;&lt;/p&gt;

&lt;p&gt;The next step is to divide the edges of each triangle into &lt;script type=&quot;math/tex&quot;&gt;v&lt;/script&gt; smaller pieces, and then form smaller triangles connecting the new midpoints. In general, the &lt;script type=&quot;math/tex&quot;&gt;v&lt;/script&gt;th level subdivision is made by breaking each edge of the triangle into &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; pieces:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;subdivisions.png&quot; alt=&quot;subdivided triangles&quot; title=&quot;Subdivided triangles&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For the rest of this example, we will use the 2&lt;script type=&quot;math/tex&quot;&gt;v&lt;/script&gt; subdivision. So let’s draw a 2&lt;script type=&quot;math/tex&quot;&gt;v&lt;/script&gt; subdivided icosahedron:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;icosahedron-subdivided-2v.png&quot; alt=&quot;subdivided triangles&quot; title=&quot;An icosahedron with its edges divided in 2, thus producing 4 new triangles.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The last step is “push out” the new midpoints of any new vertices so that they also lie on the surface of the sphere defined by the original polyhedron. As the points are pushed out, their spherical angles must not change (azimuth and inclination angles, or longitude and latitude if you prefer).&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;icosahedral-2v-sphere.png&quot; alt=&quot;geodesic 1v, 2v, 3v&quot; title=&quot;A sphere formed by pushing the new vertices out to the same radius as the other vertices.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Mathematically, this last operation is simply the constraint that every vertex &lt;script type=&quot;math/tex&quot;&gt;(x_i, y_i, z_i)&lt;/script&gt; be the same distance &lt;script type=&quot;math/tex&quot;&gt;d&lt;/script&gt; from the center of the polyhedron:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;d = \sqrt{x_i^2 + y_i^2 + z_i^2}&lt;/script&gt;

&lt;p&gt;Working out the analytic solutions for the lengths of the triangles in the &lt;script type=&quot;math/tex&quot;&gt;v&lt;/script&gt;th subdivision of various polyhedra is within the abilities of many high school students, and perhaps even a few gifted middle school students, but it does take some patience and persistence. Thankfully, there are &lt;a href=&quot;http://www.dirkbertels.net/computing/pentaDome_files/pentaDome_070206.pdf&quot;&gt;many&lt;/a&gt;… &lt;a href=&quot;http://www.geometer.org/mathcircles/geodesic.pdf&quot;&gt;good&lt;/a&gt;… &lt;a href=&quot;http://www.salsburg.com/geod/geodesicmath.pdf&quot;&gt;examples&lt;/a&gt; to start from if you are curious about calculating the coordinates.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;geodesic_advantages&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;advantages-of-domes&quot;&gt;Advantages of Domes&lt;/h2&gt;

&lt;p&gt;Geodesic domes are attractive structures in part because they are so simple – there are only 2 different triangle shapes needed for the 2v and 3v designs. When I helped organize the &lt;a href=&quot;http://portland.sciencehackday.org&quot;&gt;2017 Portland Science Hack Day&lt;/a&gt;, one of our kid zone activities was to assemble a geodesic dome out of cardboard. We used a 40W laser cutter to quickly cut the cardboard (25 of the 18x18x24” boxes from HomeDepot is plenty, costing $36.50 in total), and stuck it together the edges with tape remarkably quickly:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;shd-dome.jpg&quot; alt=&quot;Science Hack Day Dome&quot; title=&quot;The Portland 2017 Science Hack Day kid zone 2v geodesic dome.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Some people even build entire homes this way. Advocates of geodesic dome homes tout the design as being one of the strongest, most material-efficient types of structure possible, and most engineers who look at one will immediately be able to give several reasons why this is true:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Of all possible shapes, a sphere has the highest ratio of volume to surface area. All other things being equal, this means that there will be fewer materials used to construct a home with a certain volume. There will also be relatively less energy lost through the surface, so it will be cheaper to heat or cool.&lt;/li&gt;
  &lt;li&gt;Spheres are &lt;a href=&quot;https://en.wikipedia.org/wiki/Gridshell&quot;&gt;doubly-curved surfaces&lt;/a&gt;, which are generally more rigid than &lt;a href=&quot;https://en.wikipedia.org/wiki/Developable_surface&quot;&gt;singly curved surfaces&lt;/a&gt; like cylinders that can crush or kink. You may have noticed how the rounded bottom of an aluminum can is much stronger than the sides, even though the metal is the same thickness.&lt;/li&gt;
  &lt;li&gt;Geodesic domes are constructed from many small triangles. Triangles cannot pivot or bend at the joints, unlike squares or other polygons, and are thus one of the strongest shapes in engineering. One glance at the &lt;a href=&quot;http://en.wikipedia.org/wiki/truss&quot;&gt;truss structures&lt;/a&gt; used in cranes, planes, and spacecraft are all based on the concept of “triangularizing” a structure to make it as rigid and strong as possible.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a name=&quot;geodesic_disadvantages&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;weakpoints-of-geodesic-domes&quot;&gt;Weakpoints of Geodesic Domes&lt;/h2&gt;

&lt;p&gt;One big surprise that the paper geodesic dome models revealed to me was how the strength of the geodesic dome absolutely depends on it being connected at the base where the geodesic dome touches the ground. Although a completed sphere is quite strong, a dome has very little strength unless its edges are securely anchored to the ground!&lt;/p&gt;

&lt;p&gt;It’s hard to show in photos, but the paper geodesic dome I made appears to support itself when sitting on the table, but it quite floppy and easily curls up into strange shapes if the base edge is not taped down.&lt;/p&gt;

&lt;table class=&quot;center&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;geodesic_dome.jpg&quot; alt=&quot;geodesic_dome.jpg&quot; title=&quot;A geodesic dome unconnected to the ground...&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;geodesic_squashed.jpg&quot; alt=&quot;geodesic_squashed&quot; title=&quot;...is quite floppy!&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Now, a dome with more thickness (such as one made with 2x4’s or pipe) would be stronger, but its strength still depends on being fixed to the ground.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;pentakis_construction&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;constructing-the-pentakis-dodecahedron&quot;&gt;Constructing the Pentakis Dodecahedron&lt;/h2&gt;

&lt;p&gt;One of the fastest ways for me to develop intuition for structures that are too complicated to visualize is to build small mock-ups. I have always liked arts and crafts, so I printed out some templates of various shapes on thick card stock paper, and taped the edges together with scotch tape. If you have an hour to spare, I encourage you to unleash your inner elementary school student, grab your scissors (and maybe a drink and a podcast too!), and try making one of these yourself.&lt;/p&gt;

&lt;p&gt;Here’s how to make it:&lt;/p&gt;

&lt;p&gt;First, print out six copies of the &lt;a href=&quot;reinforced-pentakis-dodecahedron.pdf&quot;&gt;PDF of this design&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next, cut out the triangular tetrahedra. Optionally, you may also use a knife to cut out the insides of the triangles, if you want to be able to see the internal structure.&lt;/p&gt;

&lt;p&gt;Then, fold the sides up and tape them together to form tetrahedra:&lt;/p&gt;

&lt;table class=&quot;center&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;pentakis_construction_step0.jpg&quot; alt=&quot;pentakis-step-1&quot; title=&quot;Step 0.&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;pentakis_construction_step1.jpg&quot; alt=&quot;pentakis-step-1&quot; title=&quot;Step 1.&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;When you have five tetrahedra, tape them together along their edges. This creates one quarter of a triakis icosahedron.&lt;/p&gt;

&lt;table class=&quot;center&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;pentakis_construction_step2.jpg&quot; alt=&quot;pentakis-step-1&quot; title=&quot;Step 2.&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;pentakis_construction_step3.jpg&quot; alt=&quot;pentakis-step-1&quot; title=&quot;Step 3.&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Finally, cover the surface with the smaller pentakis triangles.&lt;/p&gt;

&lt;table class=&quot;center&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;pentakis_construction_step4.jpg&quot; alt=&quot;pentakis-step-1&quot; title=&quot;Step 4.&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;pentakis_construction_step5.jpg&quot; alt=&quot;pentakis-step-1&quot; title=&quot;Step 5.&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Repeat, adding more tetrahedra and skin surfaces in this way until you have a dome.&lt;/p&gt;

&lt;p&gt;While you are cutting out paper, you may also want to compare the relative strength of this with other common shapes::&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.korthalsaltes.com/model.php?name_en=icosahedron&quot;&gt;Paper template for an icosahedron&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.korthalsaltes.com/model.php?name_en=dodecahedron&quot;&gt;Paper template for a dodecahedron&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.discovere.org/sites/default/files/Dome%20Home_0.pdf&quot;&gt;Paper template for a 2v geodesic dome&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://mathworld.wolfram.com/pdf/PentakisDodecahedron.pdf&quot;&gt;Paper template for a pentakis dodecahedron&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to make new triangles and create your own rescaled version of the reinforced pentakis dodecahedron, the magic numbers for a dome of radius &lt;script type=&quot;math/tex&quot;&gt;r&lt;/script&gt; are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The icosahedron’s equilateral triangles have three edges of length &lt;script type=&quot;math/tex&quot;&gt;l_1 = 1.0514622 r&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;The triakis icosahedron’s icoceles triangles have one edge of length &lt;script type=&quot;math/tex&quot;&gt;l_1&lt;/script&gt; and two edges of length &lt;script type=&quot;math/tex&quot;&gt;l_2 = 0.66500310 r&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;The pentakis dodecahedron’s icoceles triangles have one edge of length &lt;script type=&quot;math/tex&quot;&gt;l_2&lt;/script&gt; and two edges of length &lt;script type=&quot;math/tex&quot;&gt;l_3 = 1.12732203 l_2&lt;/script&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;a-note-on-duality&quot;&gt;A note on Duality&lt;/h2&gt;

&lt;p&gt;It’s fun to look at the mathematics of these polyhedra as well. Basically, this dome is constructed by starting with an icosahedron, adding tetrahedra to the outside, and then add pentagons to the new points defined by this, and then scaling all the radii carefully. Here is an early model whose vertices’ radii are not all equal:&lt;/p&gt;

&lt;table class=&quot;center&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;icosahedron.jpg&quot; alt=&quot;icosahedron&quot; title=&quot;A paper Icosahedron&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;icosahedron_stellated.jpg&quot; alt=&quot;icosahedron_stellated&quot; title=&quot;A paper great stellated icosahedron&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The above tetrahedra that I taped to the outside of the icosahedron are very big, creating a &lt;a href=&quot;http://en.wikipedia.org/wiki/Great_stellated_dodecahedron&quot;&gt;great stellated icosahedron&lt;/a&gt; instead of a triakis icosahedron. If you were to connect the tips of these tetrahedra, they would define 12 new pentagonal surfaces, because the “dual” of the icosahedron is the dodecahedron.&lt;/p&gt;

&lt;p&gt;Duality expresses a mathematical symmetry that appears in many different disciplines, and while a full post on duality is out of scope of this article, the core thing to realize is that in this example of duality, the number of sides and vertices switch:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Icosahedron: 12 vertices, 20 (triangular) sides&lt;/li&gt;
  &lt;li&gt;Dodecahedron: 12 (pentagonal) sides, 20 vertices&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And also the number of faces and the sides of each face switch:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Icosahedron: 3-sided faces, 5 faces connecting at each vertex&lt;/li&gt;
  &lt;li&gt;Dodecahedron: 5-sided faces, 3 faces connecting at each vertex&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is a happy coincedence that if we reduce their height to make a “triakis icosahedron”, in which the points of the tetrahedra are made to have a radius equal to the other points on the icosahedron, then the convex hull of those vertices defines a pentakis dodecahedron. It is pretty neat that all of the vertices are still at a constant radius.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Most of us would rather live in a beautiful home than one with efficient geometry, so perhaps it is not a surprise that geodesic designs are not very popular and take a backseat to traditional construction techniques. Personally, I find domes to be so ugly that they are actually kind of cute, but I understand that they might not pass muster with the local homeowners association.&lt;/p&gt;

&lt;p&gt;Aesthetics aside, dome construction is probably best reserved for extremely harsh environments: cold-weather shelters, underground structures, or perhaps spacecraft. If the spaces between the icosahedron and pentakis dodecahedron were sealed airtight, they could also act as insulation, floatation chambers, or – for extraterrestrial homes – as airlocks that protect the inner chamber.&lt;/p&gt;

&lt;p&gt;It is a big world out there, and because it is unlikely that I am the first person to think along these lines before, please &lt;a href=&quot;mailto:drrobot-at-gmail.com&quot;&gt;let me know&lt;/a&gt; of other examples of this structure and other more developed implementations. I would be really curious to see pictures of real structures implementing this shape.&lt;/p&gt;

&lt;h2 id=&quot;future-directions&quot;&gt;Future Directions&lt;/h2&gt;

&lt;p&gt;As with any thought experiment, this little game raised more questions than it answered:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Are there other shapes that may also be connected such that every edge is part of a tetrahedron? Is this possible with every triangularized shape and its dual?&lt;/li&gt;
  &lt;li&gt;How does one further subdivide the triangles of this structure to make it more spherical, as was done with the 2v, 3v, and higher-order geodesic domes, while keeping every edge part of at least one tetrahedron?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are fun engineering topics that would also be worth figuring out for this structure:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Could this be made self-inflating structure by filling the tetrahedral cells with compressed air or expanding foam?&lt;/li&gt;
  &lt;li&gt;Could this be made entirely out of ceramic tile or glass, connected at the edges in a manner that avoids stress concentrations?&lt;/li&gt;
  &lt;li&gt;Would this be strong enough under certain conditions to be buried underground as an earth-sheltered home?&lt;/li&gt;
  &lt;li&gt;How could the corners and edges of this structure be safely and cheaply sealed against water intrusion?&lt;/li&gt;
&lt;/ul&gt;</content><category term="math" /><category term="geometry" /><category term="architecture" /><summary type="html">For your amusement, I would like to present a reinforced version of a geodesic dome that is many times stronger than conventional geodesic domes. It is essentially two concentric domes, one nested inside the other, connected entirely by tetrahedra in a way that both strengthens the dome and provides space for insulation. Compared to single-layer geodesic structures, this new structure uses about 2-3x more materials, but it is so much stronger that it is startling.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="{&quot;feature&quot;=&gt;nil}" /></entry><entry><title type="html">Introduction to Geometric Algebra, Part 1</title><link href="/blog/intro-to-geometric-algebra-1/" rel="alternate" type="text/html" title="Introduction to Geometric Algebra, Part 1" /><published>2017-07-12T00:00:00-07:00</published><updated>2017-07-12T00:00:00-07:00</updated><id>/blog/intro-to-geometric-algebra-1</id><content type="html" xml:base="/blog/intro-to-geometric-algebra-1/">&lt;p&gt;Geometric Algebra (GA) is one of those things that we should have all learned in high school because it would have made physics and mathematics in college so much easier.&lt;/p&gt;

&lt;p&gt;The fact that we did not learn it in high school is probably because GA appears to only have been known by mathematicians studying &lt;a href=&quot;https://www.wikipedia.org/wiki/clifford_algebra&quot;&gt;Clifford Algebras&lt;/a&gt;. Mathematicians may be 100 years ahead of everybody else in so many ways, but they are not always the best at communicating their subject to non-mathematicians. The physics community, at least, seems to have figured out that GA is useful, and since physicists are 20 years ahead of the rest of the sciences in the adoption of good tools and methods, it seems safe to predict that in the future engineers will start seeing GA in school in a couple of decades, or &lt;a href=&quot;http://link-to-paper&quot;&gt;even sooner&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Geometric Algebra could be taught in high school immediately after basic algebra. Not only is GA not particularly difficult to learn, it provides a unified perspective for several areas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;GA lets you &lt;strong&gt;easily perform 2D and 3D vector transformations&lt;/strong&gt;. It is simpler to perform spatial rotations than using matrices, sines, and inverse trigonometric operations, and it generalizes to more dimensions in a straightforward way.&lt;/li&gt;
  &lt;li&gt;GA gives a &lt;strong&gt;clear geometric meaning to the imaginary number&lt;/strong&gt; – or all 3 imaginary numbers, in the case of quaternions.&lt;/li&gt;
  &lt;li&gt;GA &lt;strong&gt;replaces div, grad, curl, with a single vector derivative&lt;/strong&gt;. To an electrical engineer like myself, it is frankly &lt;em&gt;amazing&lt;/em&gt; to see the four Maxwell Equations reduced into a single equation!&lt;/li&gt;
  &lt;li&gt;GA is &lt;strong&gt;coordinate-free&lt;/strong&gt; and can let you make analytic conclusions without first choosing a basis&lt;/li&gt;
  &lt;li&gt;GA is a framework &lt;strong&gt;applicable to dozens of different fields&lt;/strong&gt; of physics and engineering, including classical and quantum mechanics.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While I am far from being an expert in Geometric Algebra, I wanted to write an accessible, bare-bones introduction to the subject so that people can follow my use of it in a future post on hyperbolic geometry. For this reason, this post will just focus on 2D operations, and perhaps in a later post I can talk about rotations in 3D space or 4D spacetime, differential equations, Maxwell’s Equations, and other applications.&lt;/p&gt;

&lt;h1 id=&quot;preparation-basic-concepts&quot;&gt;Preparation: Basic Concepts&lt;/h1&gt;

&lt;p&gt;Before introducing Geometric Algebra, I’m going to briefly review coordinate systems, basis vectors, and the inner and outer products. As an engineer and not a mathematician, I will focus on examples and developing intuition rather than rigor, entirely symbolic notation, or the capacity to generalize expressions. Checking correctness with a proof must follow the intuition that there is something there to prove!&lt;/p&gt;

&lt;h2 id=&quot;concept-properties-of-algebras&quot;&gt;Concept: Properties of Algebras&lt;/h2&gt;

&lt;p&gt;Most people have a vague idea what algebra is: it is a set of rules to add and multiply objects of different quantities, often represented in school using the variables &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;y&lt;/script&gt;. The operations you perform usually satisfy the properties of being&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;associative&lt;/strong&gt;, meaning that you can reorder operations &lt;script type=&quot;math/tex&quot;&gt;(qr)s=q(rs)&lt;/script&gt;; and&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;distributive&lt;/strong&gt;, meaning that you can expand like &lt;script type=&quot;math/tex&quot;&gt;q(r+s)=qr+qs&lt;/script&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The algebra you learned in school had one other property:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;commutative&lt;/strong&gt; multiplication, meaning that you can reorder terms &lt;script type=&quot;math/tex&quot;&gt;qr = rq&lt;/script&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is &lt;strong&gt;not so&lt;/strong&gt; in Geometric Algebra and matrix algebras, in which the &lt;em&gt;ordering&lt;/em&gt; of terms being multiplied matters and generally speaking &lt;script type=&quot;math/tex&quot;&gt;qr \ne rq&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;If you are wondering why some operations are not commutative, consider where you would end up navigating if you start in a given orientation and:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Walk forward 100 paces (&lt;script type=&quot;math/tex&quot;&gt;q&lt;/script&gt;) and then turn right (&lt;script type=&quot;math/tex&quot;&gt;r&lt;/script&gt;); or&lt;/li&gt;
  &lt;li&gt;Turn right (&lt;script type=&quot;math/tex&quot;&gt;r&lt;/script&gt;) and then walk forward 100 paces (&lt;script type=&quot;math/tex&quot;&gt;q&lt;/script&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Another example is to consider the commutivity of addition and subtraction: &lt;script type=&quot;math/tex&quot;&gt;4+3=3+4&lt;/script&gt;, but does &lt;script type=&quot;math/tex&quot;&gt;4-3=3-4&lt;/script&gt;?&lt;/p&gt;

&lt;h2 id=&quot;concept-coordinate-system-and-references&quot;&gt;Concept: Coordinate System and References&lt;/h2&gt;

&lt;p&gt;To introduce GA we need to define a coordinate system with two things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A way to measure distance (hopefully evenly!)&lt;/li&gt;
  &lt;li&gt;Reference directions (hopefully independent!)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let us consider our options first. If we are drawing on a sheet of paper, we could measure distances using the number of marks passed on a grid. This grid could be:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;coord-arb.png&quot; alt=&quot;coord-arb&quot; title=&quot;Curvilinear coordinates.&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Arbitrary or Curvilinear coordinates&lt;/strong&gt;. We &lt;em&gt;could&lt;/em&gt; draw any bunch of curved lines unevenly over the page in a wavy grid as long as the lines parallel to each other did not intersect. This sounds crazy, but sometimes you need to account for some distortion in a space and this type of coordinate system can be very useful as a transformation. In most cases, however, it would be a poor choice for most problems because one unit of distance is not exactly “equal” to another unit elsewhere on the page.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;coord-polar.png&quot; alt=&quot;coord-polar&quot; title=&quot;Polar Coordinates.&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Polar&lt;/strong&gt;. We &lt;em&gt;could&lt;/em&gt; use we could use an angle (from a reference direction) and a distance or angle from an origin to define where a point is, as is often done on spherical surfaces like the surface of the Earth. While useful in certain circumstances, but again suffer from the problem that distances at different areas on the page are not easily compared.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;coord-rectangular.png&quot; alt=&quot;coord-rect&quot; title=&quot;Rectangular Coordinates.&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Rectangular Coordinates&lt;/strong&gt;. Known as the familiar “XY” coordinate system for most people, we could (and will!) use a grid of straight, parallel lines to find the coordinates of a point. Most problems that are not on highly distorted surfaces are most simply considered in this way – and even on curved surfaces, if you “zoom in” far enough, most surfaces begin to look “locally flat” and begin to resemble straight lines.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Now that we are measuring distances evenly with a Cartesian grid, we need to choose a &lt;strong&gt;basis&lt;/strong&gt;, which are essentially the directions that we reference. The choice of the directions is partly arbitrary, and partly not. For example, we can rotate the grid to be in any orientation and still get the same results. What other options do we have?&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;coord-skew.png&quot; alt=&quot;coord-skewed&quot; title=&quot;Non-orthogonal-basis&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Non-orthogonal basis&lt;/strong&gt;. We &lt;em&gt;could&lt;/em&gt; choose any two directions to draw our parallel lines in, which would probably our grid skewed, but we would soon notice that moving along &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; also moves you along &lt;script type=&quot;math/tex&quot;&gt;y&lt;/script&gt; in some important sense. This seems like a problem, so we must add another constraint!&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;coord-rectangular.png&quot; alt=&quot;coord-rectangular&quot; title=&quot;Cartesian Coordinates&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Orthogonal&lt;/strong&gt;. If we make the two vectors orthogonal (i.e. 90 degrees to each other) we can now move independently in each direction. But what if we accidentally spaced our parallel lines different distances apart along each axis? If we do not add a constraint that both reference directions be of the same magnitude, we might accidentally measure distances along X in units of meters and distances along Y in distances of feet.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;coord-cartesian.png&quot; alt=&quot;coord-cartesian&quot; title=&quot;Cartesian Coordinates&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Orthonormal&lt;/strong&gt;. If your basis is orthogonal and are equal in magnitude (i.e. distances on each are measured in the same way), we call the basis “orthonormal”.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;One of the advantages of GA is that the exact choice of basis often does not matter – it could be rotated to any number of crazy angles or different scales – and that you can find relationships without choosing a basis at all.&lt;/p&gt;

&lt;h2 id=&quot;concept-vectors&quot;&gt;Concept: Vectors&lt;/h2&gt;

&lt;p&gt;Using our new coordinate space, let us now draw two example &lt;strong&gt;vectors&lt;/strong&gt; &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt;, which are mixtures of the basis directions &lt;script type=&quot;math/tex&quot;&gt;e_1&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;e_2&lt;/script&gt;. We will use these same two vectors over and over again to keep the number of symbols low.&lt;/p&gt;

&lt;p&gt;Rather than than using matrices or vector notation, which would do more harm than good because they would obfuscate important quantities, we will instead use simple algebraic forms to express vectors. Let us define&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray*}
 a &amp; = &amp; 2e_1 + 1e_2\\
 b &amp; = &amp; 3e_1 + 4e_2 \end{eqnarray*} %]]&gt;&lt;/script&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;example-vectors.png&quot; alt=&quot;example-vectors&quot; title=&quot;Sample vectors a and b&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In plain english, the vector &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; means a direction that, for each three units you move along &lt;script type=&quot;math/tex&quot;&gt;e_1&lt;/script&gt;, you must also move one unit along &lt;script type=&quot;math/tex&quot;&gt;e_2&lt;/script&gt;. Note that we cannot “add” apples &lt;script type=&quot;math/tex&quot;&gt;e_1&lt;/script&gt; and oranges &lt;script type=&quot;math/tex&quot;&gt;e_2&lt;/script&gt;; the &lt;script type=&quot;math/tex&quot;&gt;+&lt;/script&gt; symbol here means something like the word “and” for the terms with different basis vectors. We &lt;em&gt;can&lt;/em&gt; reduce expressions with &lt;script type=&quot;math/tex&quot;&gt;e_1&lt;/script&gt;, but not combine them with &lt;script type=&quot;math/tex&quot;&gt;e_2&lt;/script&gt; in a way that is further reduced than this notation.&lt;/p&gt;

&lt;h4 id=&quot;example-vector-addition&quot;&gt;Example: Vector Addition&lt;/h4&gt;

&lt;p&gt;What is &lt;script type=&quot;math/tex&quot;&gt;a + b&lt;/script&gt;?&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray*}
 a + b &amp; = &amp; (2e_1 + 1e_2) + (3e_1 + 4e_2) \\
       &amp; = &amp;  2e_1 + 3e_1 + 1e_2 + 4e_2  \\
       &amp; = &amp; (2+3)e_1 + (1+4)e_2 \\
       &amp; = &amp; 5e_1 + 5e_2 \end{eqnarray*} %]]&gt;&lt;/script&gt;

&lt;h2 id=&quot;concept-vector-magnitude&quot;&gt;Concept: Vector Magnitude&lt;/h2&gt;

&lt;p&gt;Since trigonometry is familiar to most people, we will define the &lt;strong&gt;magnitude&lt;/strong&gt; of a vector &lt;script type=&quot;math/tex&quot;&gt;a=\alpha_1 e_1 + \alpha_2 e_2&lt;/script&gt; in the same way as was used the Pythagorean Theorem.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\|a\| = \sqrt{\alpha_1^2 + \alpha_2^2}&lt;/script&gt;

&lt;h4 id=&quot;example-vector-magnitudes&quot;&gt;Example: Vector Magnitudes&lt;/h4&gt;

&lt;p&gt;What are the magnitudes of &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt;?&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;vector-magnitude.png&quot; alt=&quot;vector-magnitude&quot; title=&quot;Euclidean magnitude.&quot; /&gt;&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray*}
 \|a\| &amp; = &amp; \sqrt{2^2 + 1^2} = \sqrt{5}\\
 \|b\| &amp; = &amp; \sqrt{3^2 + 4^2} = \sqrt{25} = 5\end{eqnarray*} %]]&gt;&lt;/script&gt;

&lt;h2 id=&quot;concept-projections-and-the-inner-product&quot;&gt;Concept: Projections and the Inner Product&lt;/h2&gt;

&lt;p&gt;Let us ask a very simple question about these vectors:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you move along &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt;, how much do you also move along &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt;?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The answer to this question is given by the &lt;strong&gt;inner product&lt;/strong&gt; (a.k.a. &lt;strong&gt;dot product&lt;/strong&gt;). It is called the “inner” product because the answer is “inside” or “along” the vector to which you are projecting.&lt;/p&gt;

&lt;p&gt;Most people remember trigonometry pretty well, in which case the single most important thing to remember about the inner product is:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;a\cdot b=\|a\|\|b\|\cos\theta&lt;/script&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;inner-product-and-magnitude.png&quot; alt=&quot;inner-product-and-magnitude&quot; title=&quot;The inner product is related to magnitude.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What can we discover about the consequences of this equation?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The inner product &lt;em&gt;must&lt;/em&gt; be commutative (&lt;script type=&quot;math/tex&quot;&gt;a\cdot b = b \cdot a&lt;/script&gt;), because the cosine function is &lt;strong&gt;symmetric&lt;/strong&gt; (a.k.a “even”), which is the property that &lt;script type=&quot;math/tex&quot;&gt;\cos(\theta)=\cos(-\theta)&lt;/script&gt;. All this means is that the value of &lt;script type=&quot;math/tex&quot;&gt;\cos(...)&lt;/script&gt; will be the same whether we measure from &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; to &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt;, which is &lt;script type=&quot;math/tex&quot;&gt;\cos(\theta)&lt;/script&gt;, or from &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt; to &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt;, which is &lt;script type=&quot;math/tex&quot;&gt;\cos(-\theta)&lt;/script&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;cosine-fn.png&quot; alt=&quot;cosine-fn&quot; title=&quot;The cosine function is symmetric.&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;If &lt;script type=&quot;math/tex&quot;&gt;\|a\|=1&lt;/script&gt;, then &lt;script type=&quot;math/tex&quot;&gt;a \cdot a = 1&lt;/script&gt; because there is zero angle between &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; and itself, and &lt;script type=&quot;math/tex&quot;&gt;\cos(0)=1&lt;/script&gt;. We will use this property for basis vectors extensively, specifically that &lt;script type=&quot;math/tex&quot;&gt;e_1 \cdot e_1 = 1&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;e_2 \cdot e_2 = 1&lt;/script&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Orthogonal things &lt;em&gt;must&lt;/em&gt; have an inner product of zero, because if &lt;script type=&quot;math/tex&quot;&gt;\theta=\pm 90^\circ&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;\cos(\pm 90^\circ)=0&lt;/script&gt;, and thus &lt;script type=&quot;math/tex&quot;&gt;a\cdot b=0&lt;/script&gt;. This definitely applies to our basis vectors, where we see that &lt;script type=&quot;math/tex&quot;&gt;e_1 \cdot e_2 = e_2 \cdot e_1 = 0&lt;/script&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The inner product &lt;em&gt;must&lt;/em&gt; be related closely to magnitudes. It is easy to prove that &lt;script type=&quot;math/tex&quot;&gt;\|a\| = \sqrt{a \cdot a}&lt;/script&gt;; can you see why? Geometrically, we could think of this definition of magnitude as being akin to “What do we get if we move in the direction of &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; by a number of units equal to the length of &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt;? The magnitude of &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt;.”&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It will also help to think the types of objects that enter and exit a “black box functional specification” of the inner product operation. The two “inputs” were vectors and the “output” was a scalar that measures the how much you move along one if you move along the other.&lt;/p&gt;

&lt;h4 id=&quot;example-inner-product&quot;&gt;Example: Inner Product&lt;/h4&gt;

&lt;p&gt;What is &lt;script type=&quot;math/tex&quot;&gt;a \cdot b&lt;/script&gt; using the above values of &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt;?&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray*}
 a \cdot b &amp; = &amp; (2e_1 + 1e_2) \cdot (3e_1 + 4e_2) \\
           &amp; = &amp; 2e_1\cdot 3e_1 + 2e_1\cdot 4e_2 + 1e_2\cdot 3e_1 + 1e_2 \cdot 4e_2  \\
           &amp; = &amp; 6e_1\cdot e_1 + 8e_1\cdot e_2 + 3e_2\cdot e_1 + 4e_2 \cdot e_2  \\
           &amp; = &amp; 6 (1) + 8 (0) + 3 (0) + 4 (1)  \\
           &amp; = &amp; 10 \end{eqnarray*} %]]&gt;&lt;/script&gt;

&lt;h1 id=&quot;concept-rotations-and-the-outer-product&quot;&gt;Concept: Rotations and the Outer Product&lt;/h1&gt;

&lt;p&gt;Let us ask another very simple question about these vectors:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you start pointed in the direction of &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt;, how much do you need to rotate to point in the direction of &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt;?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;strong&gt;outer product&lt;/strong&gt; (a.k.a. &lt;strong&gt;wedge product&lt;/strong&gt;) is what gives us the answer to this question.&lt;/p&gt;

&lt;p&gt;As before, the easiest way to understand this is via trigonometry, in which case the most important fact is:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;a\wedge b=\|a\|\|b\|\sin\theta&lt;/script&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;outer-product-and-sine2.png&quot; alt=&quot;outer-product-and-sine2&quot; title=&quot;The outer product is related to the sine. &quot; /&gt;&lt;/p&gt;

&lt;p&gt;This equation has several important consequences:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The outer product is &lt;em&gt;not&lt;/em&gt; commutative. In fact, the outer product is a kind of multiplication that is called &lt;strong&gt;anti-symmetric&lt;/strong&gt;, which means that commuting the inputs flips the sign (&lt;script type=&quot;math/tex&quot;&gt;a\wedge b = - b \wedge a)&lt;/script&gt;. This is fundamentally because &lt;script type=&quot;math/tex&quot;&gt;\sin()&lt;/script&gt; is an odd function and &lt;script type=&quot;math/tex&quot;&gt;\sin(\theta)=-\sin(-\theta)&lt;/script&gt;. There are also geometric reasons for rotations to not be commutative: if we start at &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt;, we need to rotate counterclockwise to get to &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt;, but we start at &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt;, we need to rotate clockwise to get to &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt;. The choice of which reference direction you measure from matters to the sign of the answer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;sine-fn.png&quot; alt=&quot;sine-fn&quot; title=&quot;The sine function is antisymmetric.&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The outer product is closely related to &lt;strong&gt;rotation&lt;/strong&gt; by 90 degrees, because that is the point at which &lt;script type=&quot;math/tex&quot;&gt;\sin(\theta)&lt;/script&gt; is maximized and minimized. This is &lt;em&gt;so important&lt;/em&gt; that we will right now assign the symbol &lt;script type=&quot;math/tex&quot;&gt;R&lt;/script&gt; to a 90 degree counterclockwise rotation. We can think of smaller or larger rotations as being &lt;script type=&quot;math/tex&quot;&gt;R&lt;/script&gt; multiplied by some scalar to adjust “how big” the rotation is. Under this idea, a 45 degree counterclockwise rotation would be &lt;script type=&quot;math/tex&quot;&gt;0.5R&lt;/script&gt;, and a 90 degree clockwise rotation would be &lt;script type=&quot;math/tex&quot;&gt;-R&lt;/script&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;bivectors.png&quot; alt=&quot;bivectors&quot; title=&quot;A bivector is often drawn as an arc.&quot; /&gt; &lt;img src=&quot;outer-product-half-rotation.png&quot; alt=&quot;outer-product-half-rotation&quot; title=&quot;Half a rotation.&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The outer product of two orthonormal vectors &lt;em&gt;must&lt;/em&gt; be either &lt;script type=&quot;math/tex&quot;&gt;1R&lt;/script&gt; or &lt;script type=&quot;math/tex&quot;&gt;-1R&lt;/script&gt;. Why? Because if &lt;script type=&quot;math/tex&quot;&gt;\theta=\pm 90^\circ&lt;/script&gt;, then &lt;script type=&quot;math/tex&quot;&gt;\sin(\pm 90^\circ)=\pm 1&lt;/script&gt;. For the basis vectors, this means that &lt;script type=&quot;math/tex&quot;&gt;R = e_1 \wedge e_2&lt;/script&gt; is a 90 degree counterclockwise rotation, and &lt;script type=&quot;math/tex&quot;&gt;-R = e_2 \wedge e_1&lt;/script&gt; is a 90 degree clockwise rotation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once again, it will help to consider the black box specification of the outer product operation. The two “inputs” were vectors and the “output” is a scaled amount of a 90 degree rotation &lt;script type=&quot;math/tex&quot;&gt;R&lt;/script&gt;, which is neither a vector nor a scalar. What, exactly, is the type of this output object? After defining the geometric product, we will give it a better name.&lt;/p&gt;

&lt;h4 id=&quot;example-outer-product&quot;&gt;Example: Outer Product&lt;/h4&gt;

&lt;p&gt;What is &lt;script type=&quot;math/tex&quot;&gt;a \cdot b&lt;/script&gt; using the above values of &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt;?&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray*} 
 a \wedge b &amp; = &amp; (2e_1 + 1e_2) \wedge (3e_1 + 4e_2) \\
            &amp; = &amp; 2e_1\wedge 3e_1 + 2e_1\wedge 4e_2 + 1e_2\wedge 3e_1 + 1e_2 \wedge 4e_2  \\
            &amp; = &amp; 6e_1\wedge e_1 + 8e_1\wedge e_2 + 3e_2\wedge e_1 + 4e_2 \wedge e_2  \\
            &amp; = &amp; 6 (0) + 8 (+R) + 3 (-R) + 4 (0)  \\
            &amp; = &amp; 5R \end{eqnarray*} %]]&gt;&lt;/script&gt;

&lt;h1 id=&quot;geometric-algebra&quot;&gt;Geometric Algebra&lt;/h1&gt;

&lt;p&gt;With the preliminaries out of the way, we can now define the geometric product and actually start doing geometric algebra!&lt;/p&gt;

&lt;h2 id=&quot;the-geometric-product&quot;&gt;The Geometric Product&lt;/h2&gt;

&lt;p&gt;In the same way that we introduced the inner and outer products by asking a question, we will introduce the &lt;strong&gt;geometric product&lt;/strong&gt; by asking a very general question:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;How do you transform &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; into &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt;?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Or equivilently, in terms of what we already know,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;How much do you need to rescale and rotate &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; so that it is equal to &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt;?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The intuition that we need both a rotation &lt;em&gt;and&lt;/em&gt; a rescaling is key to understanding the geometric product. We will write the geometric product of &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt; as &lt;script type=&quot;math/tex&quot;&gt;ab&lt;/script&gt;, as we would write scalar multiplication of two variables in high school algebra. We can define the geometric product as:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;ab = a \cdot b + a \wedge b&lt;/script&gt;

&lt;p&gt;But in some ways, this definition puts the cart before the horse! We can &lt;em&gt;discover&lt;/em&gt; this equation if just try to multiply &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt; together and be very careful about how we do so. Let us explore what happens when we try to compute &lt;script type=&quot;math/tex&quot;&gt;ab&lt;/script&gt; using high school rules of algebra (sans commutative multiplication of nonscalars).&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray*}
 ab &amp; = &amp; (2e_1 + 1e_2) (3e_1 + 4e_2)\\
    &amp; = &amp; (2e_1)(3e_1) + (2e_1)(4e_2) + (1e_2)(3e_1) + (1e_2)(4e_2)\\
    &amp; = &amp; 6 e_1 e_1 + 8 e_1 e_2 + 3 e_2 e_1 + 4 e_2 e_2\\
 \end{eqnarray*} %]]&gt;&lt;/script&gt;

&lt;p&gt;Hmm. What should we do with the products of the unit vectors &lt;script type=&quot;math/tex&quot;&gt;e_1 e_1, e_1 e_2, e_2 e_1, e_2 e_2&lt;/script&gt;? We can reason it out:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;e_1 e_1&lt;/script&gt; asks, “How do I transform &lt;script type=&quot;math/tex&quot;&gt;e_1&lt;/script&gt; into &lt;script type=&quot;math/tex&quot;&gt;e_1&lt;/script&gt;?”. The answer, of course, is that nothing needs to be done! We can express this by scaling by one, the identity object, and write that &lt;script type=&quot;math/tex&quot;&gt;e_1 e_1 = 1&lt;/script&gt;. If we recall the properties of dot and wedge products for unit length vectors, &lt;script type=&quot;math/tex&quot;&gt;e_1\cdot e_1=1&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;e_1\wedge e_1=0&lt;/script&gt;, then this assumption also agrees with our definition of the geometric product, &lt;script type=&quot;math/tex&quot;&gt;e_1e_1=e_1\cdot e_1 + e_1 \wedge e_1 = 1 + 0R = 1&lt;/script&gt;. No rotation was needed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;e_2 e_2&lt;/script&gt; must also equal 1, for the same reasons.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;e_1 e_2&lt;/script&gt; is asking how do I transform &lt;script type=&quot;math/tex&quot;&gt;e_1&lt;/script&gt; into &lt;script type=&quot;math/tex&quot;&gt;e_2&lt;/script&gt;? We know that our basis vectors are orthonormal, so this must equal a 90 degree clockwise rotation &lt;script type=&quot;math/tex&quot;&gt;R&lt;/script&gt;. &lt;script type=&quot;math/tex&quot;&gt;e_1e_2=e_1\cdot e_2 + e_1 \wedge e_2 = 0 + 1R = R&lt;/script&gt;, and no rescaling is needed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;e_2 e_1&lt;/script&gt; must thus equal &lt;script type=&quot;math/tex&quot;&gt;-R&lt;/script&gt;, using similar reasoning.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can now finish the simplification process.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray*}
ab &amp; = &amp; 6 e_1 e_1 + 8 e_1 e_2 + 3 e_2 e_1 + 4 e_2 e_2\\
   &amp; = &amp; 6 (1) + 8(R) + 3 (-R) + 4 (1)\\
   &amp; = &amp; 10 + 5R\\
 \end{eqnarray*} %]]&gt;&lt;/script&gt;

&lt;p&gt;If you compare this results to what we found earlier (&lt;script type=&quot;math/tex&quot;&gt;a\cdot b=10&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;a\wedge b=5R&lt;/script&gt;), we can indeed see that in this case &lt;script type=&quot;math/tex&quot;&gt;ab=a\cdot b + a\wedge b&lt;/script&gt;. Now that you have the intuition, it would be a good time to prove this to yourself more generally for all &lt;script type=&quot;math/tex&quot;&gt;a,b&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;Speaking of intuition, what does the result &lt;script type=&quot;math/tex&quot;&gt;ab=10+5R&lt;/script&gt; really mean? Does it mean that we should scale vector &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; by 10 times and go 5 quarter turns counterclockwise to end up at &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt;? That seems obviously incorrect! So our interpretation has led us slightly astray.&lt;/p&gt;

&lt;p&gt;We will correct this intuition of this just a moment, but now is a good time to introduce some simplying notation that will carry us beyond just two dimensions.&lt;/p&gt;

&lt;h2 id=&quot;simplifying-geometric-products-of-basis-vectors&quot;&gt;Simplifying Geometric Products of Basis Vectors&lt;/h2&gt;

&lt;p&gt;For brevity, if you have fewer than 10 dimensions, it is often convenient to combine the subscripts of basis vectors. That is, with this notational convention, &lt;script type=&quot;math/tex&quot;&gt;e_1 e_2 = e_{12}&lt;/script&gt;, or &lt;script type=&quot;math/tex&quot;&gt;e_1 e_2 e_3 = e_{123}&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;As for simplifying more complex geometric product expressions with orthonormal vectors, we have already learned the only two rules that we need to know:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;e_i e_i = e_{ii} = 1&lt;/script&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;e_i e_j = e_{ij} = - e_{ji}&lt;/script&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That’s it! Let’s try an example to make sure this is completely obvious.&lt;/p&gt;

&lt;h4 id=&quot;example-simplifying-geometric-products&quot;&gt;Example: Simplifying Geometric Products&lt;/h4&gt;

&lt;p&gt;Simplify the quantity &lt;script type=&quot;math/tex&quot;&gt;e_2 e_3 e_2 e_1 e_3 e_2 e_2&lt;/script&gt;.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray*}
e_2 e_3 e_2 e_1 e_3 e_2 e_2 &amp; = &amp; e_2 e_3 e_2 e_1 e_3 e_2 e_2\\
                            &amp; = &amp; e_2 e_3 e_2 e_1 e_3 (1) \\
                            &amp; = &amp; e_2 (-e_2 e_3) e_1 e_3\\
                            &amp; = &amp; -(1) e_3 e_2 e_1 e_3 \\
                            &amp; = &amp; -(1) e_3 e_2 e_1 e_3 \\  
                            &amp; = &amp; - (- e_2 e_3) e_1 e_3 \\  
                            &amp; = &amp; e_2 (- e_1 e_3) e_3 \\  
                            &amp; = &amp; - e_2 e_1 (1) \\  
                            &amp; = &amp; e_1 e_2 \\  
                            &amp; = &amp; e_{12} \end{eqnarray*} %]]&gt;&lt;/script&gt;

&lt;h2 id=&quot;blades-grades-and-bivectors&quot;&gt;Blades, Grades and Bivectors&lt;/h2&gt;

&lt;p&gt;Let us make a table of the different types of objects we have seen up to this point, and add a new column called &lt;strong&gt;grade&lt;/strong&gt; that more or less describes the dimensionality of the object.&lt;/p&gt;

&lt;table class=&quot;table&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Object (a.k.a. Blade )&lt;/th&gt;
      &lt;th&gt;Examples&lt;/th&gt;
      &lt;th&gt;Basis&lt;/th&gt;
      &lt;th&gt;Grade&lt;/th&gt;
      &lt;th&gt;Relates to&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Scalar&lt;/td&gt;
      &lt;td&gt;1,2,3,4,5…&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;Magnitude&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Vector&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;a,b&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;e_1, e_2&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;Direction&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bivector / Rotation&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;5R&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;e_{12}&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;Rotation&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Common parlance is to call &lt;script type=&quot;math/tex&quot;&gt;e_{12}&lt;/script&gt; a bivector, and when we get to 3D, &lt;script type=&quot;math/tex&quot;&gt;e_{123}&lt;/script&gt; is the trivector.&lt;/p&gt;

&lt;h2 id=&quot;the-meaning-of-geometric-products&quot;&gt;The meaning of Geometric Products&lt;/h2&gt;

&lt;p&gt;Let us look one more time at the vectors &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt;, but this time let us include all four of the basis vectors we have seen thus far: &lt;script type=&quot;math/tex&quot;&gt;1, e_1, e_2, e_{12}&lt;/script&gt;.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray*}
 a &amp; = &amp; 0(1) + 2e_1 + 1e_2 + 0e_{12}\\
 b &amp; = &amp; 0(1) + 3e_1 + 4e_2 + 0e_{12}\end{eqnarray*} %]]&gt;&lt;/script&gt;

&lt;p&gt;In general, we will call this new compound object a “Multivector”. Multivector &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; has four components:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;An amount of “0” of a scalar quantity&lt;/li&gt;
  &lt;li&gt;An amount of “2” in direction &lt;script type=&quot;math/tex&quot;&gt;e_1&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;An amount of “1” in direction &lt;script type=&quot;math/tex&quot;&gt;e_2&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;An amount of “0” is the bivector (90 degree rotation) direction&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As we know by now, we cannot simplify this expression any further, because we cannot “add” apples and oranges and pears and bananas. All four objects are independent, different measurement units: the scalar values, the two basis values, and the bivector (&lt;script type=&quot;math/tex&quot;&gt;e_{12}&lt;/script&gt;) value.&lt;/p&gt;

&lt;p&gt;The only thing left to do in this post is to explore a few examples.&lt;/p&gt;

&lt;h4 id=&quot;example-on-the-order-of-multiplication-ab-vs-ba&quot;&gt;Example: On the Order of Multiplication (&lt;script type=&quot;math/tex&quot;&gt;ab&lt;/script&gt; vs &lt;script type=&quot;math/tex&quot;&gt;ba&lt;/script&gt;)?&lt;/h4&gt;

&lt;p&gt;What is the relationship between &lt;script type=&quot;math/tex&quot;&gt;ab&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;ba&lt;/script&gt;?&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray*}
ba &amp; = &amp; (3e_{1}+4e_{2})(2e_{1}+1e_{2})\\
 &amp; = &amp; 6e_{11}+3e_{12}+8e_{21}+4e_{22}\\
 &amp; = &amp; 6+3e_{12}-8e_{12}+4\\
 &amp; = &amp; 10-5e_{12}\\
 &amp; = &amp; (ab)^{\dagger}
\end{eqnarray*} %]]&gt;&lt;/script&gt;

&lt;p&gt;where &lt;script type=&quot;math/tex&quot;&gt;^{\dagger}&lt;/script&gt; means the complex conjugate. In physical terms, this means rotating clockwise instead of counterclockwise, which is consistent with our understanding thus far.&lt;/p&gt;

&lt;h4 id=&quot;example-how-do-we-move-from-a-to-b&quot;&gt;Example: How do we move from &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; to &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt;?&lt;/h4&gt;

&lt;p&gt;If &lt;script type=&quot;math/tex&quot;&gt;ab&lt;/script&gt; represents a transformation from &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; to &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt;, how do we show it? Keeping in mind that geometric product operations are not commutative, should we pre- or post- multiply &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; with &lt;script type=&quot;math/tex&quot;&gt;ab&lt;/script&gt; to transform it into &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt;?&lt;/p&gt;

&lt;p&gt;If we pre-multiply,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray*}
aba &amp; = &amp; (ab)a\\
 &amp; = &amp; (10+5e_{12})(2e_{1}+1e_{2})\\
 &amp; = &amp; 20e_{1}+10e_{2}+10e_{121}+5e_{122}\\
 &amp; = &amp; 20e_{1}+10e_{2}-10e_{2}+5e_{1}\\
 &amp; = &amp; 25e_{1}
\end{eqnarray*} %]]&gt;&lt;/script&gt;

&lt;p&gt;Which is not equal to &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt;. Perhaps we should try post-multiplying?&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray*}
aab &amp; = &amp; a(ab)\\
 &amp; = &amp; (2e_{1}+1e_{2})(10+5e_{12})\\
 &amp; = &amp; 20e_{1}+10e_{112}+10e_{2}+5e_{212}\\
 &amp; = &amp; 20e_{1}+10e_{2}+10e_{2}-5e_{1}\\
 &amp; = &amp; 15e_{1}+20e_{2}\\
 &amp; = &amp; 5(3e_{1}+4e_{2})\\
 &amp; = &amp; 5b
\end{eqnarray*} %]]&gt;&lt;/script&gt;

&lt;p&gt;Aha! That is just &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt; multiplied by a factor of 5. Where did that factor of 5 come from? Well, If we normalized &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt; to have unit length (i.e. &lt;script type=&quot;math/tex&quot;&gt;\frac{a}{\|a\|}&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;\frac{b}{\|b\|}&lt;/script&gt;), then the factor of 5 disappears. Now is a good time to grab a sheet of paper and a pen and prove that &lt;script type=&quot;math/tex&quot;&gt;aab=b&lt;/script&gt; for unit length vectors, and then read on:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray*}
r&amp;=&amp;\frac{a}{\|a\|}\frac{b}{\|b\|}\\
&amp;=&amp;...\end{eqnarray*} %]]&gt;&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\|r\|=1&lt;/script&gt;

&lt;p&gt;If you can see that &lt;script type=&quot;math/tex&quot;&gt;r&lt;/script&gt; represents a pure rotation (a.k.a. a &lt;strong&gt;rotor&lt;/strong&gt;), then the transform from &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; to &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt; could be described as: “normalize &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt;, rotate by &lt;script type=&quot;math/tex&quot;&gt;r&lt;/script&gt;, and then scale by &lt;script type=&quot;math/tex&quot;&gt;\|b\|&lt;/script&gt; to reach &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt;. In math, this is quite simply several products written from left to right:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray*}
a\frac{1}{\|a\|}r\|b\| &amp; = &amp; a\frac{1}{\|a\|}\frac{ab}{\|a\|\|b\|}\|b\|\\
 &amp; = &amp; \frac{aab}{\|a\|^{2}}\\
 &amp; = &amp; b
\end{eqnarray*} %]]&gt;&lt;/script&gt;

&lt;p&gt;And we can see that the factor of 5 we saw earlier came from the fact that &lt;script type=&quot;math/tex&quot;&gt;\|a\|^2=5&lt;/script&gt;. The true way to go from &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; to &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt; is thus to multiply &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; by &lt;script type=&quot;math/tex&quot;&gt;\frac{ab}{\|a\|^2}&lt;/script&gt;.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;For those with prior experience in engineering and physics, you have probably noticed by now that the bivector &lt;script type=&quot;math/tex&quot;&gt;e_{12}&lt;/script&gt; is playing the role of the imaginary number &lt;script type=&quot;math/tex&quot;&gt;i=\sqrt{-1}&lt;/script&gt;, and that this is all just complex mathematics in another form. However, you may agree after seeing the results in higher dimensions that it is perhaps more valid to say that complex mathematics is just a special case of geometric algebra!&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;p&gt;I found the following papers useful while learning about Geometric Algebra. Ordering from easiest to hardest,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Geometric Algebra Primer&lt;/em&gt;, by Jaap Suter.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Imaginary Numbers are not Real – the Geometric Algebra of Spacetime&lt;/em&gt;, by Stephen Gull, Anthony Lasenby, and Chris Doran.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;A Survey of Geometric Algebra and Geometric Calculus&lt;/em&gt;, by Alan Macdonald.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Oersted Medal Lecture 2002: Reforming the Mathematical Language of Physics&lt;/em&gt; by David Hestenes.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;An Introduction to Geometric Algebra and Calculus&lt;/em&gt;, by Alan Bromborsky.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Geometric Algebra&lt;/em&gt;, by Eric Chisolm.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Spacetime Physics with Geometric Algebra 1&lt;/em&gt;, by David Hestenes.&lt;/li&gt;
&lt;/ul&gt;</content><category term="math" /><category term="geometric algebra" /><summary type="html">Geometric Algebra (GA) is one of those things that we should have all learned in high school because it would have made physics and mathematics in college so much easier.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="{&quot;feature&quot;=&gt;nil}" /></entry><entry><title type="html">Hyperbolic Geometry &amp;amp; Special Relativity</title><link href="/blog/hyperbolic-geometry-and-special-relativity/" rel="alternate" type="text/html" title="Hyperbolic Geometry &amp; Special Relativity" /><published>2017-06-02T00:00:00-07:00</published><updated>2017-06-02T00:00:00-07:00</updated><id>/blog/hyperbolic-geometry-and-special-relativity</id><content type="html" xml:base="/blog/hyperbolic-geometry-and-special-relativity/">&lt;p&gt;While studying &lt;a href=&quot;https://arxiv.org/abs/0810.3328&quot;&gt;An Introduction to Particle Physics&lt;/a&gt; on a recent flight to Japan – studying math that is way above my head is a nerdy hobby of mine – I came across a simple viewpoint on special relativity that really stunned me:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Consider a spatial rotation around, say, the z-axis (or, equivalently, mixing the x and y coordinates). Such a transformation is called an &lt;strong&gt;Euler Transformation&lt;/strong&gt;, and takes the form&lt;/p&gt;
&lt;/blockquote&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray*}
 t^{\prime} &amp; = &amp; t\\
 x^{\prime} &amp; = &amp; x\cos\theta+y\sin\theta\\
 y^{\prime} &amp; = &amp; -x\cos\theta+y\sin\theta\\
 z^{\prime} &amp; = &amp; z \end{eqnarray*} %]]&gt;&lt;/script&gt;

&lt;blockquote&gt;
  &lt;p&gt;where \(\theta\) is the angle of rotation, called the &lt;strong&gt;Euler Angle&lt;/strong&gt;. We can simultaneously express a Lorentz transformation as a sort of “rotation” that mixes a spatial dimension and a time dimension, as follows&lt;/p&gt;
&lt;/blockquote&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray*}
t^{\prime} &amp; = &amp; t\cosh\theta-x\sinh\theta\\
x^{\prime} &amp; = &amp; -t\sinh\theta+x\cosh\theta\\
y^{\prime} &amp; = &amp; y\\
z^{\prime} &amp; = &amp; z\end{eqnarray*} %]]&gt;&lt;/script&gt;

&lt;blockquote&gt;
  &lt;p&gt;where \(\theta \) is defined by the relationship \(\beta = \tan(\theta) \).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After staring at that for a while, I was struck by the analogy between the “mixing” between coordinates when we rotate something, and the relativistic “mixing” between time and space when something accelerates. Although this is just an analogy and perhaps squeezing and stretching is a better metaphor than rotation in this case, is very tempting to search for the geometry of what is happening rather than just the algebra.&lt;/p&gt;

&lt;p&gt;Whether it was the in flight wine or just the jet lag, I found myself lost in thought about the connection between hyperbolic geometry and special relativity – after all, what does it &lt;em&gt;mean&lt;/em&gt; to say that our space is curved in a way consistent with hyperbolic geometry? We all study flat, Euclidean spaces in school, and as a roboticist who worked a lot with rigid body dynamics I became pretty comfortable with the concepts surrounding rotation matrices, quaternions, and SO(3) groups, I but I don’t ever recall using the hyperbolic cosine even once in my life. This was surprising to me, as I use math on a fairly regular basis.&lt;/p&gt;

&lt;p&gt;To try to clear the matter in my mind, I made a little table of some of the definitions of sine, cosine, and their hyperbolic equivalents:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray}
\sin(x) &amp; = &amp; \frac{1}{2}(e^{ix}-e^{-ix}) &amp; = &amp; \sum_{k=0}^{\infty}\frac{(-1)^{k}x^{2k+1}}{(2k+1)!} \\
\cos(x) &amp; = &amp; \frac{1}{2}(e^{ix}+e^{-ix}) &amp; = &amp; \sum_{k=0}^{\infty}\frac{(-1)^{k}x^{2k}}{(2k)!} \\
\sinh(x) &amp; = &amp; \frac{1}{2}(e^{x}-e^{-x}) &amp; = &amp; \sum_{k=0}^{\infty}\frac{x^{2k+1}}{(2k+1)!} \\
\cosh(x) &amp; = &amp; \frac{1}{2}(e^{x}+e^{-x}) &amp; = &amp; \sum_{k=0}^{\infty}\frac{x^{2k}}{(2k)!} \end{eqnarray} %]]&gt;&lt;/script&gt;

&lt;p&gt;Look at how the hyperbolic trig functions have no need of the imaginary number \(i=\sqrt{-1}\) or the alternating -1’s in the infinite series. One of the most frustrating things about \(i\) is that it is so incredibly useful algebraically, but it also makes things more cumbersome because expressions in general become more – pardon the pun – complex. The geometric meaning of the imaginary number is often associated with rotations, but I wonder if there are more geometric ways of understanding the same operation that have no need for the imaginary number per se. I would prefer to see mathematical expressions that are as simple as possible, but no simpler.&lt;/p&gt;

&lt;p&gt;Even now, as I stare at the infinite series for hyperbolic sine and cosine, and their definitions in terms of the all-important exponential function, I wonder if in fact that “things with the imaginary number are wrong” in the same way that &lt;a href=&quot;http://tauday.com/&quot;&gt;“pi is wrong”&lt;/a&gt;. It is not that sines are incorrect in an algebraic or mathematical sense, because they are clearly not. Rather, I am wondering whether, due to the way mathematics developed historically, perhaps we are using algebra that is more cumbersome than necessary to describe two legs of the same geometric elephant.&lt;/p&gt;

&lt;p&gt;I would welcome good book recommendations connecting the essential geometry of hyperbolas to special relativity!&lt;/p&gt;</content><summary type="html">While studying An Introduction to Particle Physics on a recent flight to Japan – studying math that is way above my head is a nerdy hobby of mine – I came across a simple viewpoint on special relativity that really stunned me:</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="{&quot;feature&quot;=&gt;nil}" /></entry><entry><title type="html">Reviving the Dead…Content</title><link href="/blog/reviving-the-dead/" rel="alternate" type="text/html" title="Reviving the Dead...Content" /><published>2017-05-30T00:00:00-07:00</published><updated>2017-05-30T00:00:00-07:00</updated><id>/blog/reviving-the-dead</id><content type="html" xml:base="/blog/reviving-the-dead/">&lt;p&gt;From 2003 until 2016, I had a personal website at &lt;a href=&quot;https://roboloco.net/&quot;&gt;roboloco.net&lt;/a&gt;. It lasted until last year, when I finally grew tired of upgrading applications, keeping comments free of spam, and the servers secure from hackers and the occasional website defacement. Thank you, GitHub, for providing this terrible sysadmin a free place to store this content, and one that requires no regular maintanance!&lt;/p&gt;

&lt;p&gt;Now! To slowly revive some of the content that has been offline for the past year…does GitHub have a tool for poking me to do that as well?&lt;/p&gt;

&lt;p&gt;I’ll start with the &lt;a href=&quot;/about&quot;&gt;about page&lt;/a&gt; as this is supposed to be a github.io page, after all.&lt;/p&gt;</content><category term="news" /><summary type="html">From 2003 until 2016, I had a personal website at roboloco.net. It lasted until last year, when I finally grew tired of upgrading applications, keeping comments free of spam, and the servers secure from hackers and the occasional website defacement. Thank you, GitHub, for providing this terrible sysadmin a free place to store this content, and one that requires no regular maintanance!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="{&quot;feature&quot;=&gt;nil}" /></entry><entry><title type="html">Project Euler Problem 89</title><link href="/project-euler/problem-89/" rel="alternate" type="text/html" title="Project Euler Problem 89" /><published>2010-11-16T09:28:30-08:00</published><updated>2010-11-16T09:28:30-08:00</updated><id>/project-euler/problem-89</id><content type="html" xml:base="/project-euler/problem-89/">&lt;p&gt;&lt;a href=&quot;http://projecteuler.net/index.php?section=problems&amp;amp;id=89&quot;&gt;Problem 89&lt;/a&gt; was kind of fun: we needed to convert some sloppily written roman-numerals into their more efficient, minimal representations.&lt;/p&gt;

&lt;p&gt;There are two tricks to doing this easily:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;When converting from roman numerals to decimal digits, it is simplest to process the roman numeral from right to left.&lt;/li&gt;
  &lt;li&gt;Since I can only be placed before V and X, X before L and C, and C before D and M, the symmetry of these results as you move up by powers of ten suggests that we use a few simple &lt;code class=&quot;highlighter-rouge&quot;&gt;cond&lt;/code&gt; statements to handle numbers from 1 to 10, and recurse to handle the increasingly higher powers of ten.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The code to implement these rules wasn’t particularly long. As usual, zipmap is very concise at creating mappings from characters to digits.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(&lt;span style=&quot;color: #729fcf;&quot;&gt;use&lt;/span&gt; '[clojure.contrib.duck-streams &lt;span style=&quot;color: #729fcf;&quot;&gt;:only&lt;/span&gt; (read-lines)])

(&lt;span style=&quot;color: #8ae234;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #edd400; font-weight: bold;&quot;&gt;r2n&lt;/span&gt; (zipmap &lt;span style=&quot;color: #Fd7f98;&quot;&gt;&quot;IVXLCDM&quot;&lt;/span&gt; [1 5 10 50 100 500 1000]))

(&lt;span style=&quot;color: #8ae234;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #edd400; font-weight: bold;&quot;&gt;n2r&lt;/span&gt; (zipmap (&lt;span style=&quot;color: #729fcf;&quot;&gt;vals&lt;/span&gt; r2n) (&lt;span style=&quot;color: #729fcf;&quot;&gt;keys&lt;/span&gt; r2n)))

&lt;span style=&quot;color: #A8AaA5;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #A8AaA5;&quot;&gt;Do things in reverse and it's so much easier to solve!
&lt;/span&gt;(&lt;span style=&quot;color: #8ae234;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #edd400; font-weight: bold;&quot;&gt;de-romanize&lt;/span&gt;
  &lt;span style=&quot;color: #888a85;&quot;&gt;&quot;Returns the decimal representation of a roman numeral string s. &quot;&lt;/span&gt;
  ([s] (de-romanize (&lt;span style=&quot;color: #729fcf;&quot;&gt;reverse&lt;/span&gt; (&lt;span style=&quot;color: #729fcf;&quot;&gt;map&lt;/span&gt; r2n s)) 0 0))
  ([s total mx] (&lt;span style=&quot;color: #8ae234;&quot;&gt;if-let&lt;/span&gt; [c (&lt;span style=&quot;color: #729fcf;&quot;&gt;first&lt;/span&gt; s)]
                  (&lt;span style=&quot;color: #8ae234;&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: #729fcf;&quot;&gt;&amp;gt;=&lt;/span&gt; c mx)
                    (&lt;span style=&quot;color: #8ae234;&quot;&gt;recur&lt;/span&gt; (&lt;span style=&quot;color: #729fcf;&quot;&gt;rest&lt;/span&gt; s) (&lt;span style=&quot;color: #729fcf;&quot;&gt;+&lt;/span&gt; total c) (&lt;span style=&quot;color: #729fcf;&quot;&gt;max&lt;/span&gt; c mx))
                    (&lt;span style=&quot;color: #8ae234;&quot;&gt;recur&lt;/span&gt; (&lt;span style=&quot;color: #729fcf;&quot;&gt;rest&lt;/span&gt; s) (&lt;span style=&quot;color: #729fcf;&quot;&gt;-&lt;/span&gt; total c) mx))
                  total)))

(&lt;span style=&quot;color: #8ae234;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #edd400; font-weight: bold;&quot;&gt;romanize&lt;/span&gt;
  &lt;span style=&quot;color: #888a85;&quot;&gt;&quot;Returns the minimal roman numeral representation of n&quot;&lt;/span&gt;
  ([n]
     {&lt;span style=&quot;color: #729fcf;&quot;&gt;:pre&lt;/span&gt; [(&lt;span style=&quot;color: #729fcf;&quot;&gt;&amp;lt;=&lt;/span&gt; n 10000 )]}
     (romanize (&lt;span style=&quot;color: #729fcf;&quot;&gt;quot&lt;/span&gt; n 10) (&lt;span style=&quot;color: #729fcf;&quot;&gt;rem&lt;/span&gt; n 10) 1))
  ([q r x]
     (&lt;span style=&quot;color: #8ae234;&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: #729fcf;&quot;&gt;&amp;gt;&lt;/span&gt; x 100)
       (&lt;span style=&quot;color: #729fcf;&quot;&gt;repeat&lt;/span&gt; (&lt;span style=&quot;color: #729fcf;&quot;&gt;+&lt;/span&gt; q r) (n2r x))
       (&lt;span style=&quot;color: #8ae234;&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt; (&lt;span style=&quot;color: #729fcf;&quot;&gt;concat&lt;/span&gt;
             (romanize (&lt;span style=&quot;color: #729fcf;&quot;&gt;quot&lt;/span&gt; q 10) (&lt;span style=&quot;color: #729fcf;&quot;&gt;rem&lt;/span&gt; q 10) (&lt;span style=&quot;color: #729fcf;&quot;&gt;*&lt;/span&gt; x 10))
             (&lt;span style=&quot;color: #8ae234;&quot;&gt;cond&lt;/span&gt;
              (&lt;span style=&quot;color: #729fcf;&quot;&gt;&amp;lt;&lt;/span&gt; r 4) (&lt;span style=&quot;color: #729fcf;&quot;&gt;repeat&lt;/span&gt; r (n2r x))
              (&lt;span style=&quot;color: #729fcf;&quot;&gt;=&lt;/span&gt; r 4) [(n2r x) (n2r (&lt;span style=&quot;color: #729fcf;&quot;&gt;*&lt;/span&gt; 5 x))]
              (&lt;span style=&quot;color: #729fcf;&quot;&gt;&amp;lt;&lt;/span&gt; r 9) (&lt;span style=&quot;color: #729fcf;&quot;&gt;concat&lt;/span&gt; [(n2r (&lt;span style=&quot;color: #729fcf;&quot;&gt;*&lt;/span&gt; 5 x))] (&lt;span style=&quot;color: #729fcf;&quot;&gt;repeat&lt;/span&gt; (&lt;span style=&quot;color: #729fcf;&quot;&gt;-&lt;/span&gt; r 5) (n2r x))) 
              (&lt;span style=&quot;color: #729fcf;&quot;&gt;=&lt;/span&gt; r 9) [(n2r x) (n2r (&lt;span style=&quot;color: #729fcf;&quot;&gt;*&lt;/span&gt; 10 x))]
              &lt;span style=&quot;color: #729fcf;&quot;&gt;:else&lt;/span&gt; &lt;span style=&quot;color: #Fd7f98;&quot;&gt;&quot;&quot;&lt;/span&gt;))
           (&lt;span style=&quot;color: #729fcf;&quot;&gt;apply&lt;/span&gt; str )))))

(&lt;span style=&quot;color: #8ae234;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #edd400; font-weight: bold;&quot;&gt;euler-89&lt;/span&gt; [file]
  (&lt;span style=&quot;color: #729fcf;&quot;&gt;reduce&lt;/span&gt;
   +
   (&lt;span style=&quot;color: #8ae234;&quot;&gt;for&lt;/span&gt; [l (read-lines file)]
     (&lt;span style=&quot;color: #729fcf;&quot;&gt;-&lt;/span&gt; (&lt;span style=&quot;color: #729fcf;&quot;&gt;count&lt;/span&gt; l)
        (&lt;span style=&quot;color: #729fcf;&quot;&gt;count&lt;/span&gt; (romanize (de-romanize l)))))))

(euler-89 &lt;span style=&quot;color: #Fd7f98;&quot;&gt;&quot;roman.txt&quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may notice that I used preconditions to indicate the &lt;code class=&quot;highlighter-rouge&quot;&gt;romanize&lt;/code&gt; function only works for numbers less than 10000.&lt;/p&gt;</content><category term="project-euler" /><category term="roman numerals" /><summary type="html">Problem 89 was kind of fun: we needed to convert some sloppily written roman-numerals into their more efficient, minimal representations.</summary></entry><entry><title type="html">Project Euler Problem 87</title><link href="/project-euler/problem-87/" rel="alternate" type="text/html" title="Project Euler Problem 87" /><published>2010-10-20T08:27:12-07:00</published><updated>2010-10-20T08:27:12-07:00</updated><id>/project-euler/problem-87</id><content type="html" xml:base="/project-euler/problem-87/">&lt;p&gt;&lt;a href=&quot;http://projecteuler.net/index.php?section=problems&amp;amp;id=87&quot;&gt;Problem 87&lt;/a&gt; asks us to find how many numbers below 50 million that can be expressed as the sum of a prime square, cube, and fourth power.&lt;/p&gt;

&lt;p&gt;By now we are old hands at this type of problem. By caching the exponents of prime numbers and using a set to filter out duplicates, we can find the solution in roughly 4 seconds:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(&lt;span style=&quot;color: #8ae234;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #edd400; font-weight: bold;&quot;&gt;euler-87&lt;/span&gt; [top]
  (&lt;span style=&quot;color: #729fcf;&quot;&gt;count&lt;/span&gt;
   (&lt;span style=&quot;color: #729fcf;&quot;&gt;into&lt;/span&gt;
    #{}
    (&lt;span style=&quot;color: #8ae234;&quot;&gt;let&lt;/span&gt; [squares (&lt;span style=&quot;color: #729fcf;&quot;&gt;map&lt;/span&gt; #(expt % 2) primes)
          cubes   (&lt;span style=&quot;color: #729fcf;&quot;&gt;map&lt;/span&gt; #(expt % 3) primes)
          quads   (&lt;span style=&quot;color: #729fcf;&quot;&gt;map&lt;/span&gt; #(expt % 4) primes)]
      (&lt;span style=&quot;color: #8ae234;&quot;&gt;for&lt;/span&gt; [i (&lt;span style=&quot;color: #729fcf;&quot;&gt;take-while&lt;/span&gt; #(&lt;span style=&quot;color: #729fcf;&quot;&gt;&amp;lt;&lt;/span&gt; % top) squares)
            j (&lt;span style=&quot;color: #729fcf;&quot;&gt;take-while&lt;/span&gt; #(&lt;span style=&quot;color: #729fcf;&quot;&gt;&amp;lt;&lt;/span&gt; % (&lt;span style=&quot;color: #729fcf;&quot;&gt;-&lt;/span&gt; top i)) cubes)
            k (&lt;span style=&quot;color: #729fcf;&quot;&gt;take-while&lt;/span&gt; #(&lt;span style=&quot;color: #729fcf;&quot;&gt;&amp;lt;&lt;/span&gt; % (&lt;span style=&quot;color: #729fcf;&quot;&gt;-&lt;/span&gt; top i j)) quads)
            s [(&lt;span style=&quot;color: #729fcf;&quot;&gt;+&lt;/span&gt; i j k)]
            &lt;span style=&quot;color: #729fcf;&quot;&gt;:when&lt;/span&gt; (&lt;span style=&quot;color: #729fcf;&quot;&gt;&amp;lt;&lt;/span&gt; s top)]
        s)))))

(&lt;span style=&quot;color: #729fcf;&quot;&gt;time&lt;/span&gt; (euler-87 50000000))  &lt;span style=&quot;color: #A8AaA5;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #A8AaA5;&quot;&gt;&quot;Elapsed time: 3954.751452 msecs&quot;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</content><category term="project-euler" /><category term="primes" /><summary type="html">Problem 87 asks us to find how many numbers below 50 million that can be expressed as the sum of a prime square, cube, and fourth power.</summary></entry><entry><title type="html">Project Euler Problem 86</title><link href="/project-euler/problem-86/" rel="alternate" type="text/html" title="Project Euler Problem 86" /><published>2010-10-20T07:56:03-07:00</published><updated>2010-10-20T07:56:03-07:00</updated><id>/project-euler/problem-86</id><content type="html" xml:base="/project-euler/problem-86/">&lt;p&gt;Despite it’s relative simplicity, I wasted hours on &lt;a href=&quot;http://projecteuler.net/index.php?section=problems&amp;amp;id=86&quot;&gt;problem 86&lt;/a&gt;. One important thing that I learned is:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sometimes you absolutely must formulate the problem in an incremental form!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;My long and complex first attempt at this problem began by generating Pythagorean triples (as we did in &lt;a href=&quot;?tag=pythagorean-triplets&quot;&gt;previous problems&lt;/a&gt;), and computing cuboids whose geodesics were the same as those triples. Unfortunately, although this worked well, I did not formulate it in an incremental manner, so at best it would have O(n^2) performance for this kind of incremental search problem, as I realized in the final step.&lt;/p&gt;

&lt;p&gt;On the other hand, if you formulate the problem in an incremental form, it is remarkably simple to solve:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(&lt;span style=&quot;color: #8ae234;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #edd400; font-weight: bold;&quot;&gt;square?&lt;/span&gt; [x] (&lt;span style=&quot;color: #729fcf;&quot;&gt;=&lt;/span&gt; x (expt (&lt;span style=&quot;color: #729fcf;&quot;&gt;int&lt;/span&gt; (sqrt x)) 2)))

(&lt;span style=&quot;color: #8ae234;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #edd400; font-weight: bold;&quot;&gt;cuboids&lt;/span&gt; [m]
  (&lt;span style=&quot;color: #729fcf;&quot;&gt;reduce&lt;/span&gt;
   +
   (&lt;span style=&quot;color: #8ae234;&quot;&gt;for&lt;/span&gt; [a (&lt;span style=&quot;color: #729fcf;&quot;&gt;filter&lt;/span&gt; #(square? (&lt;span style=&quot;color: #729fcf;&quot;&gt;+&lt;/span&gt; (&lt;span style=&quot;color: #729fcf;&quot;&gt;*&lt;/span&gt; % %) (&lt;span style=&quot;color: #729fcf;&quot;&gt;*&lt;/span&gt; m m)))
                   (&lt;span style=&quot;color: #729fcf;&quot;&gt;range&lt;/span&gt; 1 (&lt;span style=&quot;color: #729fcf;&quot;&gt;inc&lt;/span&gt; (&lt;span style=&quot;color: #729fcf;&quot;&gt;*&lt;/span&gt; 2 m))))]
     (&lt;span style=&quot;color: #8ae234;&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: #729fcf;&quot;&gt;&amp;gt;&lt;/span&gt; a m)
       (&lt;span style=&quot;color: #729fcf;&quot;&gt;-&lt;/span&gt; (&lt;span style=&quot;color: #729fcf;&quot;&gt;quot&lt;/span&gt; a 2) (&lt;span style=&quot;color: #729fcf;&quot;&gt;-&lt;/span&gt; a m 1))
       (&lt;span style=&quot;color: #729fcf;&quot;&gt;quot&lt;/span&gt; a 2)))))

(&lt;span style=&quot;color: #8ae234;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #edd400; font-weight: bold;&quot;&gt;euler-86&lt;/span&gt; [L]
  (&lt;span style=&quot;color: #729fcf;&quot;&gt;count&lt;/span&gt; (&lt;span style=&quot;color: #729fcf;&quot;&gt;take-while&lt;/span&gt; #(&lt;span style=&quot;color: #729fcf;&quot;&gt;&amp;gt;&lt;/span&gt; L %) (reductions + (&lt;span style=&quot;color: #729fcf;&quot;&gt;map&lt;/span&gt; cuboids (&lt;span style=&quot;color: #729fcf;&quot;&gt;range&lt;/span&gt;))))))

(&lt;span style=&quot;color: #729fcf;&quot;&gt;time&lt;/span&gt; (euler-86 1000000)) &lt;span style=&quot;color: #A8AaA5;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #A8AaA5;&quot;&gt;&quot;Elapsed time: 3872.220781 msecs&quot;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</content><category term="project-euler" /><category term="incremental" /><category term="Pythagorean triplets" /><category term="spider-fly" /><summary type="html">Despite it’s relative simplicity, I wasted hours on problem 86. One important thing that I learned is:</summary></entry><entry><title type="html">Project Euler Problem 85</title><link href="/project-euler/problem-85/" rel="alternate" type="text/html" title="Project Euler Problem 85" /><published>2010-10-19T05:47:08-07:00</published><updated>2010-10-19T05:47:08-07:00</updated><id>/project-euler/problem-85</id><content type="html" xml:base="/project-euler/problem-85/">&lt;p&gt;&lt;a href=&quot;http://projecteuler.net/index.php?section=problems&amp;amp;id=85&quot;&gt;Problem 85&lt;/a&gt; asks us to find the number of rectangles that can be drawn in a grid of size m by n.&lt;/p&gt;

&lt;p&gt;It may help to work out the answer to a few of the grids until you see the pattern: the number of rectangles is equal to the product of two summations.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(&lt;span style=&quot;color: #8ae234;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #edd400; font-weight: bold;&quot;&gt;sums&lt;/span&gt; (reductions + (&lt;span style=&quot;color: #729fcf;&quot;&gt;range&lt;/span&gt;)))

(&lt;span style=&quot;color: #8ae234;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #edd400; font-weight: bold;&quot;&gt;num-rects&lt;/span&gt; [m n] (&lt;span style=&quot;color: #729fcf;&quot;&gt;*&lt;/span&gt; (&lt;span style=&quot;color: #729fcf;&quot;&gt;nth&lt;/span&gt; sums m) (&lt;span style=&quot;color: #729fcf;&quot;&gt;nth&lt;/span&gt; sums n)))

(&lt;span style=&quot;color: #8ae234;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #edd400; font-weight: bold;&quot;&gt;smallest-second&lt;/span&gt; [coll]
  (&lt;span style=&quot;color: #729fcf;&quot;&gt;reduce&lt;/span&gt; #(&lt;span style=&quot;color: #8ae234;&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: #729fcf;&quot;&gt;&amp;lt;&lt;/span&gt; (&lt;span style=&quot;color: #729fcf;&quot;&gt;second&lt;/span&gt; %1) (&lt;span style=&quot;color: #729fcf;&quot;&gt;second&lt;/span&gt; %2)) %1 %2) coll))

(&lt;span style=&quot;color: #8ae234;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #edd400; font-weight: bold;&quot;&gt;euler-85&lt;/span&gt; [goal]
  (&lt;span style=&quot;color: #729fcf;&quot;&gt;first&lt;/span&gt;
   (smallest-second
    (&lt;span style=&quot;color: #8ae234;&quot;&gt;for&lt;/span&gt; [i (&lt;span style=&quot;color: #729fcf;&quot;&gt;take-while&lt;/span&gt; #(&lt;span style=&quot;color: #729fcf;&quot;&gt;&amp;lt;&lt;/span&gt; (num-rects % 1) goal) (&lt;span style=&quot;color: #729fcf;&quot;&gt;rest&lt;/span&gt; (&lt;span style=&quot;color: #729fcf;&quot;&gt;range&lt;/span&gt;)))
          j (&lt;span style=&quot;color: #729fcf;&quot;&gt;take-while&lt;/span&gt; #(&lt;span style=&quot;color: #729fcf;&quot;&gt;&amp;lt;&lt;/span&gt; 0 (&lt;span style=&quot;color: #729fcf;&quot;&gt;-&lt;/span&gt; goal (num-rects i %))) (&lt;span style=&quot;color: #729fcf;&quot;&gt;rest&lt;/span&gt; (&lt;span style=&quot;color: #729fcf;&quot;&gt;range&lt;/span&gt;)))]
      [(&lt;span style=&quot;color: #729fcf;&quot;&gt;*&lt;/span&gt; i j) (&lt;span style=&quot;color: #729fcf;&quot;&gt;-&lt;/span&gt; goal (num-rects i j))]))))

(&lt;span style=&quot;color: #729fcf;&quot;&gt;time&lt;/span&gt; (euler-85 2000000)) &lt;span style=&quot;color: #A8AaA5;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #A8AaA5;&quot;&gt;&quot;Elapsed time: 1607.372755 msecs&quot;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course the above is straightforward, but we might as well remember the &lt;a href=&quot;http://en.wikipedia.org/wiki/Carl_Friedrich_Gauss#Early_years_.281777.E2.80.931798.29&quot;&gt; story of Gauss as a young boy&lt;/a&gt; and use an analytic solution for &lt;code class=&quot;highlighter-rouge&quot;&gt;num-rects&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(&lt;span style=&quot;color: #8ae234;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #edd400; font-weight: bold;&quot;&gt;num-rects&lt;/span&gt; [m n]
  (&lt;span style=&quot;color: #729fcf;&quot;&gt;*&lt;/span&gt; (&lt;span style=&quot;color: #729fcf;&quot;&gt;/&lt;/span&gt; (&lt;span style=&quot;color: #729fcf;&quot;&gt;+&lt;/span&gt; (&lt;span style=&quot;color: #729fcf;&quot;&gt;*&lt;/span&gt; m m) m) 2)
     (&lt;span style=&quot;color: #729fcf;&quot;&gt;/&lt;/span&gt; (&lt;span style=&quot;color: #729fcf;&quot;&gt;+&lt;/span&gt; (&lt;span style=&quot;color: #729fcf;&quot;&gt;*&lt;/span&gt; n n) n) 2)))

(&lt;span style=&quot;color: #729fcf;&quot;&gt;time&lt;/span&gt; (euler-85 2000000)) &lt;span style=&quot;color: #A8AaA5;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #A8AaA5;&quot;&gt;&quot;Elapsed time: 45.927094 msecs&quot;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I’m somewhat surprised that is so much faster – I would have thought that caching the values in the lazy list would have been only slightly slower, but it seems that my intuition was incorrect. The evils of premature optimization appears again.&lt;/p&gt;</content><category term="project-euler" /><category term="grids" /><category term="summation" /><summary type="html">Problem 85 asks us to find the number of rectangles that can be drawn in a grid of size m by n.</summary></entry><entry><title type="html">Project Euler Problem 84</title><link href="/project-euler/problem-84/" rel="alternate" type="text/html" title="Project Euler Problem 84" /><published>2010-10-19T05:29:12-07:00</published><updated>2010-10-19T05:29:12-07:00</updated><id>/project-euler/problem-84</id><content type="html" xml:base="/project-euler/problem-84/">&lt;p&gt;&lt;a href=&quot;http://projecteuler.net/index.php?section=problems&amp;amp;id=84&quot;&gt;Problem 84&lt;/a&gt; asks us to implement the classic game &lt;a href=&quot;http://en.wikipedia.org/wiki/Monopoly_%28game%29&quot;&gt;Monopoly&lt;/a&gt; and find the most-visited spaces on the board…if we used two 4-sided dice instead of 6-sided ones.&lt;/p&gt;

&lt;p&gt;Although it would probably be straightforward to compute probabilities directly using fractions, or indirectly approximate them with Hidden Markov Models, for now let’s just brute force it and use Clojure’s ability to run things in parallel.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(&lt;span style=&quot;color: #8ae234;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #edd400; font-weight: bold;&quot;&gt;board&lt;/span&gt; [&lt;span style=&quot;color: #729fcf;&quot;&gt;:GO&lt;/span&gt;   &lt;span style=&quot;color: #729fcf;&quot;&gt;:A1&lt;/span&gt; &lt;span style=&quot;color: #729fcf;&quot;&gt;:CC1&lt;/span&gt; &lt;span style=&quot;color: #729fcf;&quot;&gt;:A2&lt;/span&gt;  &lt;span style=&quot;color: #729fcf;&quot;&gt;:T1&lt;/span&gt; &lt;span style=&quot;color: #729fcf;&quot;&gt;:R1&lt;/span&gt; &lt;span style=&quot;color: #729fcf;&quot;&gt;:B1&lt;/span&gt;  &lt;span style=&quot;color: #729fcf;&quot;&gt;:CH1&lt;/span&gt; &lt;span style=&quot;color: #729fcf;&quot;&gt;:B2&lt;/span&gt; &lt;span style=&quot;color: #729fcf;&quot;&gt;:B3&lt;/span&gt;
            &lt;span style=&quot;color: #729fcf;&quot;&gt;:JAIL&lt;/span&gt; &lt;span style=&quot;color: #729fcf;&quot;&gt;:C1&lt;/span&gt; &lt;span style=&quot;color: #729fcf;&quot;&gt;:U1&lt;/span&gt;  &lt;span style=&quot;color: #729fcf;&quot;&gt;:C2&lt;/span&gt;  &lt;span style=&quot;color: #729fcf;&quot;&gt;:C3&lt;/span&gt; &lt;span style=&quot;color: #729fcf;&quot;&gt;:R2&lt;/span&gt; &lt;span style=&quot;color: #729fcf;&quot;&gt;:D1&lt;/span&gt;  &lt;span style=&quot;color: #729fcf;&quot;&gt;:CC2&lt;/span&gt; &lt;span style=&quot;color: #729fcf;&quot;&gt;:D2&lt;/span&gt; &lt;span style=&quot;color: #729fcf;&quot;&gt;:D3&lt;/span&gt;
            &lt;span style=&quot;color: #729fcf;&quot;&gt;:FP&lt;/span&gt;   &lt;span style=&quot;color: #729fcf;&quot;&gt;:E1&lt;/span&gt; &lt;span style=&quot;color: #729fcf;&quot;&gt;:CH2&lt;/span&gt; &lt;span style=&quot;color: #729fcf;&quot;&gt;:E2&lt;/span&gt;  &lt;span style=&quot;color: #729fcf;&quot;&gt;:E3&lt;/span&gt; &lt;span style=&quot;color: #729fcf;&quot;&gt;:R3&lt;/span&gt; &lt;span style=&quot;color: #729fcf;&quot;&gt;:F1&lt;/span&gt;  &lt;span style=&quot;color: #729fcf;&quot;&gt;:F2&lt;/span&gt;  &lt;span style=&quot;color: #729fcf;&quot;&gt;:U2&lt;/span&gt; &lt;span style=&quot;color: #729fcf;&quot;&gt;:F3&lt;/span&gt;
            &lt;span style=&quot;color: #729fcf;&quot;&gt;:G2J&lt;/span&gt;  &lt;span style=&quot;color: #729fcf;&quot;&gt;:G1&lt;/span&gt; &lt;span style=&quot;color: #729fcf;&quot;&gt;:G2&lt;/span&gt;  &lt;span style=&quot;color: #729fcf;&quot;&gt;:CC3&lt;/span&gt; &lt;span style=&quot;color: #729fcf;&quot;&gt;:G3&lt;/span&gt; &lt;span style=&quot;color: #729fcf;&quot;&gt;:R4&lt;/span&gt; &lt;span style=&quot;color: #729fcf;&quot;&gt;:CH3&lt;/span&gt; &lt;span style=&quot;color: #729fcf;&quot;&gt;:H1&lt;/span&gt;  &lt;span style=&quot;color: #729fcf;&quot;&gt;:T2&lt;/span&gt; &lt;span style=&quot;color: #729fcf;&quot;&gt;:H2&lt;/span&gt;])

(&lt;span style=&quot;color: #8ae234;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #edd400; font-weight: bold;&quot;&gt;b2i&lt;/span&gt; (zipmap board (&lt;span style=&quot;color: #729fcf;&quot;&gt;range&lt;/span&gt;))) &lt;span style=&quot;color: #A8AaA5;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #A8AaA5;&quot;&gt;Board symbols to integers
&lt;/span&gt;
(&lt;span style=&quot;color: #8ae234;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #edd400; font-weight: bold;&quot;&gt;i2b&lt;/span&gt; (zipmap (&lt;span style=&quot;color: #729fcf;&quot;&gt;range&lt;/span&gt;) board)) &lt;span style=&quot;color: #A8AaA5;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #A8AaA5;&quot;&gt;Integers to board symbols
&lt;/span&gt;
(&lt;span style=&quot;color: #8ae234;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #edd400; font-weight: bold;&quot;&gt;card-CC&lt;/span&gt;
  &lt;span style=&quot;color: #888a85;&quot;&gt;&quot;Community Chest. Returns the number of the square to move to.&quot;&lt;/span&gt;
  [n]
  (&lt;span style=&quot;color: #8ae234;&quot;&gt;let&lt;/span&gt; [options (&lt;span style=&quot;color: #729fcf;&quot;&gt;concat&lt;/span&gt; [(b2i &lt;span style=&quot;color: #729fcf;&quot;&gt;:GO&lt;/span&gt;) (b2i &lt;span style=&quot;color: #729fcf;&quot;&gt;:JAIL&lt;/span&gt;)] (&lt;span style=&quot;color: #729fcf;&quot;&gt;repeat&lt;/span&gt; 14 n))]
    (rand-nth options)))

(&lt;span style=&quot;color: #8ae234;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #edd400; font-weight: bold;&quot;&gt;card-CH&lt;/span&gt;
  &lt;span style=&quot;color: #888a85;&quot;&gt;&quot;Chance card. Returns the number of the square to move to.&quot;&lt;/span&gt;
  [n]
  (&lt;span style=&quot;color: #8ae234;&quot;&gt;let&lt;/span&gt; [options [&lt;span style=&quot;color: #729fcf;&quot;&gt;:X&lt;/span&gt; &lt;span style=&quot;color: #729fcf;&quot;&gt;:X&lt;/span&gt; &lt;span style=&quot;color: #729fcf;&quot;&gt;:X&lt;/span&gt; &lt;span style=&quot;color: #729fcf;&quot;&gt;:X&lt;/span&gt; &lt;span style=&quot;color: #729fcf;&quot;&gt;:X&lt;/span&gt; &lt;span style=&quot;color: #729fcf;&quot;&gt;:X&lt;/span&gt;
                 &lt;span style=&quot;color: #729fcf;&quot;&gt;:GO&lt;/span&gt; &lt;span style=&quot;color: #729fcf;&quot;&gt;:JAIL&lt;/span&gt; &lt;span style=&quot;color: #729fcf;&quot;&gt;:C1&lt;/span&gt; &lt;span style=&quot;color: #729fcf;&quot;&gt;:E3&lt;/span&gt; &lt;span style=&quot;color: #729fcf;&quot;&gt;:H2&lt;/span&gt; &lt;span style=&quot;color: #729fcf;&quot;&gt;:R1&lt;/span&gt; &lt;span style=&quot;color: #729fcf;&quot;&gt;:NextR&lt;/span&gt; &lt;span style=&quot;color: #729fcf;&quot;&gt;:NextR&lt;/span&gt; &lt;span style=&quot;color: #729fcf;&quot;&gt;:NextU&lt;/span&gt; &lt;span style=&quot;color: #729fcf;&quot;&gt;:Back3&lt;/span&gt;]
        event (rand-nth options)]
    (&lt;span style=&quot;color: #8ae234;&quot;&gt;condp&lt;/span&gt; = event 
        &lt;span style=&quot;color: #729fcf;&quot;&gt;:X&lt;/span&gt; n                                    &lt;span style=&quot;color: #A8AaA5;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #A8AaA5;&quot;&gt;Do nothing
&lt;/span&gt;        &lt;span style=&quot;color: #729fcf;&quot;&gt;:NextR&lt;/span&gt; (&lt;span style=&quot;color: #729fcf;&quot;&gt;nth&lt;/span&gt; (&lt;span style=&quot;color: #729fcf;&quot;&gt;map&lt;/span&gt; b2i [&lt;span style=&quot;color: #729fcf;&quot;&gt;:R1&lt;/span&gt; &lt;span style=&quot;color: #729fcf;&quot;&gt;:R2&lt;/span&gt; &lt;span style=&quot;color: #729fcf;&quot;&gt;:R3&lt;/span&gt; &lt;span style=&quot;color: #729fcf;&quot;&gt;:R4&lt;/span&gt;]) &lt;span style=&quot;color: #A8AaA5;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #A8AaA5;&quot;&gt;Next railroad
&lt;/span&gt;                    (&lt;span style=&quot;color: #729fcf;&quot;&gt;rem&lt;/span&gt; (&lt;span style=&quot;color: #729fcf;&quot;&gt;quot&lt;/span&gt; (&lt;span style=&quot;color: #729fcf;&quot;&gt;+&lt;/span&gt; 5 n) 10) 4))
        &lt;span style=&quot;color: #729fcf;&quot;&gt;:NextU&lt;/span&gt; (&lt;span style=&quot;color: #8ae234;&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: #8ae234;&quot;&gt;and&lt;/span&gt; (&lt;span style=&quot;color: #729fcf;&quot;&gt;&amp;gt;&lt;/span&gt; n (b2i &lt;span style=&quot;color: #729fcf;&quot;&gt;:U1&lt;/span&gt;)) &lt;span style=&quot;color: #A8AaA5;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #A8AaA5;&quot;&gt;Next Utility
&lt;/span&gt;                        (&lt;span style=&quot;color: #729fcf;&quot;&gt;&amp;lt;&lt;/span&gt; n (b2i &lt;span style=&quot;color: #729fcf;&quot;&gt;:U2&lt;/span&gt;)))
                 (b2i &lt;span style=&quot;color: #729fcf;&quot;&gt;:U2&lt;/span&gt;)
                 (b2i &lt;span style=&quot;color: #729fcf;&quot;&gt;:U1&lt;/span&gt;))     
        &lt;span style=&quot;color: #729fcf;&quot;&gt;:Back3&lt;/span&gt; (&lt;span style=&quot;color: #8ae234;&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: #729fcf;&quot;&gt;=&lt;/span&gt; (&lt;span style=&quot;color: #729fcf;&quot;&gt;-&lt;/span&gt; n 3) (b2i &lt;span style=&quot;color: #729fcf;&quot;&gt;:CC3&lt;/span&gt;))
                 (card-CC (&lt;span style=&quot;color: #729fcf;&quot;&gt;-&lt;/span&gt; n 3)) &lt;span style=&quot;color: #A8AaA5;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #A8AaA5;&quot;&gt;Sometimes you land on another CC
&lt;/span&gt;                 (&lt;span style=&quot;color: #729fcf;&quot;&gt;-&lt;/span&gt; n 3))          &lt;span style=&quot;color: #A8AaA5;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #A8AaA5;&quot;&gt;But mostly you don't
&lt;/span&gt;        (b2i event))))

(&lt;span style=&quot;color: #8ae234;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #edd400; font-weight: bold;&quot;&gt;dice-4&lt;/span&gt; [] (&lt;span style=&quot;color: #729fcf;&quot;&gt;inc&lt;/span&gt; (&lt;span style=&quot;color: #729fcf;&quot;&gt;rand-int&lt;/span&gt; 4)))

(&lt;span style=&quot;color: #8ae234;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #edd400; font-weight: bold;&quot;&gt;move&lt;/span&gt; [[n doubles]]
  (&lt;span style=&quot;color: #8ae234;&quot;&gt;let&lt;/span&gt; [d1 (dice-4)
        d2 (dice-4)
        m (&lt;span style=&quot;color: #8ae234;&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: #8ae234;&quot;&gt;and&lt;/span&gt; (&lt;span style=&quot;color: #729fcf;&quot;&gt;=&lt;/span&gt; d1 d2) (&lt;span style=&quot;color: #729fcf;&quot;&gt;=&lt;/span&gt; 2 doubles))
            (b2i &lt;span style=&quot;color: #729fcf;&quot;&gt;:JAIL&lt;/span&gt;)
            (&lt;span style=&quot;color: #729fcf;&quot;&gt;rem&lt;/span&gt; (&lt;span style=&quot;color: #729fcf;&quot;&gt;+&lt;/span&gt; n d1 d2) 40))]
    [(&lt;span style=&quot;color: #8ae234;&quot;&gt;condp&lt;/span&gt; = m
         (b2i &lt;span style=&quot;color: #729fcf;&quot;&gt;:G2J&lt;/span&gt;) (b2i &lt;span style=&quot;color: #729fcf;&quot;&gt;:JAIL&lt;/span&gt;)
         (b2i &lt;span style=&quot;color: #729fcf;&quot;&gt;:CC1&lt;/span&gt;) (card-CC m)
         (b2i &lt;span style=&quot;color: #729fcf;&quot;&gt;:CC2&lt;/span&gt;) (card-CC m)
         (b2i &lt;span style=&quot;color: #729fcf;&quot;&gt;:CC2&lt;/span&gt;) (card-CC m)
         (b2i &lt;span style=&quot;color: #729fcf;&quot;&gt;:CH1&lt;/span&gt;) (card-CH m)
         (b2i &lt;span style=&quot;color: #729fcf;&quot;&gt;:CH2&lt;/span&gt;) (card-CH m)
         (b2i &lt;span style=&quot;color: #729fcf;&quot;&gt;:CH3&lt;/span&gt;) (card-CH m)
         m)
     (&lt;span style=&quot;color: #8ae234;&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: #729fcf;&quot;&gt;=&lt;/span&gt; d1 d2)
       (&lt;span style=&quot;color: #8ae234;&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: #729fcf;&quot;&gt;not&lt;/span&gt; (&lt;span style=&quot;color: #729fcf;&quot;&gt;=&lt;/span&gt; 2 doubles)) &lt;span style=&quot;color: #A8AaA5;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #A8AaA5;&quot;&gt;reset if 3rd double in a row
&lt;/span&gt;         (&lt;span style=&quot;color: #729fcf;&quot;&gt;inc&lt;/span&gt; doubles)
         0)
       0)]))

(&lt;span style=&quot;color: #8ae234;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #edd400; font-weight: bold;&quot;&gt;compute-monopoly-freqs&lt;/span&gt; []
  (&lt;span style=&quot;color: #8ae234;&quot;&gt;let&lt;/span&gt; [trials 1000000
        games 10
        sim (&lt;span style=&quot;color: #729fcf;&quot;&gt;fn&lt;/span&gt; [trials]
              (frequencies (&lt;span style=&quot;color: #729fcf;&quot;&gt;take&lt;/span&gt; trials (&lt;span style=&quot;color: #729fcf;&quot;&gt;map&lt;/span&gt; first (&lt;span style=&quot;color: #729fcf;&quot;&gt;iterate&lt;/span&gt; move [0 0])))))
        freqs (&lt;span style=&quot;color: #729fcf;&quot;&gt;apply&lt;/span&gt; merge-with + (&lt;span style=&quot;color: #729fcf;&quot;&gt;pmap&lt;/span&gt; sim (&lt;span style=&quot;color: #729fcf;&quot;&gt;repeat&lt;/span&gt; games trials)))
        ps (&lt;span style=&quot;color: #729fcf;&quot;&gt;map&lt;/span&gt; (&lt;span style=&quot;color: #729fcf;&quot;&gt;fn&lt;/span&gt; [[c v]]
                  [(i2b c) (&lt;span style=&quot;color: #729fcf;&quot;&gt;double&lt;/span&gt; (&lt;span style=&quot;color: #729fcf;&quot;&gt;*&lt;/span&gt; 100 (&lt;span style=&quot;color: #729fcf;&quot;&gt;/&lt;/span&gt; v trials games)))])
                (&lt;span style=&quot;color: #729fcf;&quot;&gt;sort&lt;/span&gt; freqs))]
    (&lt;span style=&quot;color: #729fcf;&quot;&gt;map&lt;/span&gt; #(b2i (&lt;span style=&quot;color: #729fcf;&quot;&gt;first&lt;/span&gt; %)) (&lt;span style=&quot;color: #729fcf;&quot;&gt;take&lt;/span&gt; 3 (&lt;span style=&quot;color: #729fcf;&quot;&gt;reverse&lt;/span&gt; (&lt;span style=&quot;color: #729fcf;&quot;&gt;sort-by&lt;/span&gt; second ps))))))

(&lt;span style=&quot;color: #729fcf;&quot;&gt;time&lt;/span&gt; (compute-monopoly-freqs)) &lt;span style=&quot;color: #A8AaA5;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #A8AaA5;&quot;&gt;&quot;Elapsed time: 10217.921373 msecs&quot;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the work of 10,000,000 trials divided evenly across 10 threads and evaluated in parallel in roughly 10 seconds, this gives the correct answer on my machine. However, the probabilities that I compute for the 6-sided dice are slightly different from the ones given on the Project Euler website, so this implementation is probably slightly incorrect. Can you find the mistake?&lt;/p&gt;</content><category term="project-euler" /><category term="monopoly" /><category term="pmap" /><summary type="html">Problem 84 asks us to implement the classic game Monopoly and find the most-visited spaces on the board…if we used two 4-sided dice instead of 6-sided ones.</summary></entry><entry><title type="html">Project Euler Problem 83</title><link href="/project-euler/problem-83/" rel="alternate" type="text/html" title="Project Euler Problem 83" /><published>2010-10-18T09:23:14-07:00</published><updated>2010-10-18T09:23:14-07:00</updated><id>/project-euler/problem-83</id><content type="html" xml:base="/project-euler/problem-83/">&lt;p&gt;&lt;a href=&quot;http://projecteuler.net/index.php?section=problems&amp;amp;id=83&quot;&gt;Problem 83&lt;/a&gt; can be solved with A* exactly like the we did in &lt;a href=&quot;?p=660&quot;&gt;problem 81&lt;/a&gt;. The only code that needs to be changed is the neighbors function &lt;code class=&quot;highlighter-rouge&quot;&gt;neigh&lt;/code&gt; and the estimated cost-to-goal function &lt;code class=&quot;highlighter-rouge&quot;&gt;est&lt;/code&gt;. Everything else can be reused from problem 81.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(&lt;span style=&quot;color: #8ae234;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #edd400; font-weight: bold;&quot;&gt;euler-83&lt;/span&gt; []
  (&lt;span style=&quot;color: #8ae234;&quot;&gt;let&lt;/span&gt; [mat   (load-matrix &lt;span style=&quot;color: #Fd7f98;&quot;&gt;&quot;/zzz/work/matrix.txt&quot;&lt;/span&gt;)
        m     (&lt;span style=&quot;color: #729fcf;&quot;&gt;count&lt;/span&gt; mat)
        n     (&lt;span style=&quot;color: #729fcf;&quot;&gt;count&lt;/span&gt; (&lt;span style=&quot;color: #729fcf;&quot;&gt;first&lt;/span&gt; mat))
        cost  (&lt;span style=&quot;color: #729fcf;&quot;&gt;fn&lt;/span&gt; [[i j]] (&lt;span style=&quot;color: #729fcf;&quot;&gt;nth&lt;/span&gt; (&lt;span style=&quot;color: #729fcf;&quot;&gt;nth&lt;/span&gt; mat (&lt;span style=&quot;color: #729fcf;&quot;&gt;dec&lt;/span&gt; i)) (&lt;span style=&quot;color: #729fcf;&quot;&gt;dec&lt;/span&gt; j)))
        start [1 1]
        goal  [m n]
        goal? (&lt;span style=&quot;color: #729fcf;&quot;&gt;fn&lt;/span&gt; [e] (&lt;span style=&quot;color: #729fcf;&quot;&gt;=&lt;/span&gt; e goal))
        est   (&lt;span style=&quot;color: #729fcf;&quot;&gt;fn&lt;/span&gt; [[i j]] 0)
        neigh (&lt;span style=&quot;color: #729fcf;&quot;&gt;fn&lt;/span&gt; [[i j]]
                (&lt;span style=&quot;color: #729fcf;&quot;&gt;merge&lt;/span&gt;
                 (&lt;span style=&quot;color: #8ae234;&quot;&gt;when&lt;/span&gt; (&lt;span style=&quot;color: #729fcf;&quot;&gt;&amp;lt;&lt;/span&gt; i m) {[(&lt;span style=&quot;color: #729fcf;&quot;&gt;inc&lt;/span&gt; i) j] (cost [(&lt;span style=&quot;color: #729fcf;&quot;&gt;inc&lt;/span&gt; i) j])})
                 (&lt;span style=&quot;color: #8ae234;&quot;&gt;when&lt;/span&gt; (&lt;span style=&quot;color: #729fcf;&quot;&gt;&amp;lt;&lt;/span&gt; j n) {[i (&lt;span style=&quot;color: #729fcf;&quot;&gt;inc&lt;/span&gt; j)] (cost [i (&lt;span style=&quot;color: #729fcf;&quot;&gt;inc&lt;/span&gt; j)])})
                 (&lt;span style=&quot;color: #8ae234;&quot;&gt;when&lt;/span&gt; (&lt;span style=&quot;color: #729fcf;&quot;&gt;&amp;lt;&lt;/span&gt; 1 i) {[(&lt;span style=&quot;color: #729fcf;&quot;&gt;dec&lt;/span&gt; i) j] (cost [(&lt;span style=&quot;color: #729fcf;&quot;&gt;dec&lt;/span&gt; i) j])})
                 (&lt;span style=&quot;color: #8ae234;&quot;&gt;when&lt;/span&gt; (&lt;span style=&quot;color: #729fcf;&quot;&gt;&amp;lt;&lt;/span&gt; 1 j) {[i (&lt;span style=&quot;color: #729fcf;&quot;&gt;dec&lt;/span&gt; j)] (cost [i (&lt;span style=&quot;color: #729fcf;&quot;&gt;dec&lt;/span&gt; j)])})))
        path  (a*-search est neigh start goal?)]
    (&lt;span style=&quot;color: #729fcf;&quot;&gt;reduce&lt;/span&gt; + (&lt;span style=&quot;color: #729fcf;&quot;&gt;map&lt;/span&gt; cost path))))

(&lt;span style=&quot;color: #729fcf;&quot;&gt;time&lt;/span&gt; (euler-83))&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With &lt;code class=&quot;highlighter-rouge&quot;&gt;est&lt;/code&gt; set to always return zero, the A* search becomes effectively a memory-hungry version of &lt;a href=&quot;http://en.wikipedia.org/wiki/Dijkstra%27s_algorithm&quot;&gt;Dijkstra’s Algorithm&lt;/a&gt;.&lt;/p&gt;</content><category term="project-euler" /><category term="a* algorithm" /><category term="dijkstra's algorithm" /><category term="search" /><summary type="html">Problem 83 can be solved with A* exactly like the we did in problem 81. The only code that needs to be changed is the neighbors function neigh and the estimated cost-to-goal function est. Everything else can be reused from problem 81.

(defn euler-83 []
  (let [mat   (load-matrix &quot;/zzz/work/matrix.txt&quot;)
        m     (count mat)
        n     (count (first mat))
        cost  (fn [[i j]] (nth (nth mat (dec i)) (dec j)))
        start [1 1]
        goal  [m n]
        goal? (fn [e] (= e goal))
        est   (fn [[i j]] 0)
        neigh (fn [[i j]]
                (merge
                 (when (&amp;lt; i m) {[(inc i) j] (cost [(inc i) j])})
                 (when (&amp;lt; j n) {[i (inc j)] (cost [i (inc j)])})
                 (when (&amp;lt; 1 i) {[(dec i) j] (cost [(dec i) j])})
                 (when (&amp;lt; 1 j) {[i (dec j)] (cost [i (dec j)])})))
        path  (a*-search est neigh start goal?)]
    (reduce + (map cost path))))</summary></entry></feed>
